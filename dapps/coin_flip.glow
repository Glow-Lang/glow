#lang glow
// TODO: insert escrow in a compiler pass
@interaction([A, B])
let coinFlip = (wagerAmount, escrowAmount) => {
    // @A assert! canReach(A_wins);
    @A let randA = randomUInt256();
    @verifiably!(A) let commitment = digest(randA);
    publish! A -> commitment; deposit! A -> wagerAmount + escrowAmount;
    // @B assert! canReach(B_wins);
    @B let randB = randomUInt256();
    publish! B -> randB; deposit! B -> wagerAmount;
    publish! A -> randA;
    verify! commitment;
    if (((randA ^^^ randB) &&& 1) == 0) {
        //A_wins:
        withdraw! A <- 2*wagerAmount + escrowAmount
    } else {
        //B_wins:
        withdraw! B <- 2*wagerAmount;
        withdraw! A <- escrowAmount
    }
};
