(def i () 2)
(switch i
  (0 "zero")
  (1 "one")
  (2 "two")
  (_ (switch (@app < 0 i) (1 "many") (0 "negative"))))
(def b () 0)
(switch b (1 "yes") (0 "no"))
(def bs () "apple")
(switch bs ("apple" "orange") ("banana" "forage") (_ "storage"))
(def l () (@list 1 2))
(switch l ((@list 0 1) "dore") ((@list 1 2) "remi") ((@list 3 6 0) "fatido") (_ "other"))
(def p () (@tuple 1 2))
(switch p ((@tuple a b0) (@app + a b0)))
(def v () (@tuple 4 3))
(switch v ((@tuple y x) (@app sqrt (@app + (@app sqr x) (@app sqr y)))))
(defrectype lcexpr
  ; or (@pointer (@sum int lcexpr (@tuple lcexpr lcexpr)))
  (@sum int (@pointer lcexpr) (@tuple (@pointer lcexpr) (@pointer lcexpr))))
(def Var (λ (x) (@variant 0 x)))
(def Lam (λ (b) (@variant 1 (@pointer b))))
(def App (λ (f a) (@variant 2 (@tuple (@pointer f) (@pointer a)))))
(def lcexpr_methods
  (@tuple (λ (tag) (: lcexpr) (def x1 (: lcexpr) (input lcexpr tag)) x1)))
(def omega
     ()
     (@app App
           (@app Lam (@app App (@app Var 0) (@app Var 0)))
           (@app Lam (@app App (@app Var 0) (@app Var 0)))))
(def freevars
     ()
     (λ ((e : lcexpr)) ()
       (switch e
         ((@variant 0 x0) (@list x0))
         (_ (@list 0 1 2 3 4 5 6 7 8 9)))))
(switch omega
  ((@variant 2 (@tuple (@pointer (@variant 1 (@pointer b1))) (@pointer a0))) "beta")
  ((@variant 1 (@pointer (@variant 2 (@tuple (@pointer f) (@pointer (@variant 0 0))))))
   (switch (@app not (@app member 0 (@app freevars f)))
     (1 "eta")
     (0 "not immediate")))
  (_ "not immediate"))
(deftype ymn (@sum (@tuple) (@tuple) (@tuple)))
(def Yes (@variant 0 (@tuple)))
(def Maybe (@variant 1 (@tuple)))
(def No (@variant 2 (@tuple)))
(def ymn_methods
  (@tuple (λ ((x3 : ymn)) (: nat)
            (switch x3 ((@variant 0 (@tuple)) 0) ((@variant 1 (@tuple)) 1) ((@variant 2 (@tuple)) 2)))
          (λ ((x4 : nat)) (: ymn)
            (switch x4 (0 Yes) (1 Maybe) (2 No)))
          (λ (tag0) (: ymn) (def x2 (: ymn) (input ymn tag0)) x2)))
(def ans () Maybe)
(def possible ()
  (λ ((a1 : ymn)) (: bool)
    (switch a1
      ((@or-pat (@variant 0 (@tuple)) (@variant 1 (@tuple))) #t)
      ((@variant 2 (@tuple)) #f))))
(def definite ()
  (λ ((a2 : ymn)) (: bool)
    (switch a2
      ((@variant 0 (@tuple)) 1)
      ((@or-pat (@variant 2 (@tuple)) (@variant 1 (@tuple))) 0))))
(switch (@tuple (@app possible ans) (@app definite ans))
  ((@tuple 1 1) "yes")
  ((@tuple 1 0) "maybe")
  ((@tuple 0 0) "no")
  ((@tuple 0 1) "inconceivable!"))
