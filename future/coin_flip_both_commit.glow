#lang glow

// Something where they both commit could be transformed by a compiler pass
// (I propose a new pass between ANF and Checkpointify to be called Unorder)
// into a form similar to what's in `coin_flip_unordered.glow`.
// Then, a pass that would be specific to Account-model backends could
// transform what's in `coin_flip_unordered.glow` into something closer to
// `../dapps/coin_flip.glow`, grouping B's actions in the middle and getting
// rid of B's commitment and escrow.

// TODO: insert escrow in a compiler pass
@interaction([A, B])
let coinFlipUnordered = (wagerAmount, escrowAmount) => {
    @A let randA = randomUInt256();
    @verifiably!(A) let commitmentA = digest(randA);
    publish! A -> commitmentA; deposit! A -> wagerAmount + escrowAmount;
    
    @B let randB = randomUInt256();
    @verifiably!(B) let commitmentB = digest(randB);
    publish! B -> commitmentB; deposit! B -> wagerAmount + escrowAmount;
    
    publish! B -> randB;
    verify! commitmentB;
    withdraw! B <- escrowAmount;
    
    publish! A -> randA;
    verify! commitmentA;
    withdraw! A <- escrowAmount;
    
    if (((randA ^^^ randB) &&& 1) == 0) {
        //A_wins:
        withdraw! A <- 2*wagerAmount
    } else {
        //B_wins:
        withdraw! B <- 2*wagerAmount;
    }
};
