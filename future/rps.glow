#lang glow
// -*- JavaScript -*-

// Generates JS code like
//   let Hand = Enum("Rock", "Paper", "Scissors");
// Implicity generates the thing on the right:
//   Hand.get               inputHand    inputs the user a Hand
//   Hand.is_element        isHand       checks whether it's a Hand
//   Hand.toNat             HandToNat    converts a Hand to a Nat
//   Hand.fromNat           NatToHand    converts a Nat to a Hand // only available contract-side if the constructors have no parameters?
//   Hand.values.Rock       Rock         typed constant value
//   Hand.values.Paper      Paper        typed constant value
//   Hand.values.Scissors   Scissors     typed constant value
data Hand = | Rock | Paper | Scissors;

data Outcome = | B_Wins | Draw | A_Wins;

let winner = (handA : Hand, handB : Hand) : Outcome => {
    Outcome.ofNat((Hand.toNat(handA) + (4 - Hand.toNat(handB))) % 3) }

let winner2 = (handA : Hand, handB : Hand) : Outcome => {
  switch([handA, handB]) {
    | [Rock, Rock]     => Draw    | [Paper, Rock]     => A_Wins  | [Scissors, Rock]     => B_Wins
    | [Rock, Paper]    => B_Wins  | [Paper, Paper]    => Draw    | [Scissors, Paper]    => A_Wins
    | [Rock, Scissors] => A_Wins  | [Paper, Scissors] => B_Wins  | [Scissors, Scissors] => Draw
  }
assert! forall(a: Hand, b: Hand) winner(a,b) == winner2(a,b)

@interaction([A, B])
let rockPaperScissors = (wagerAmount) => {
    // NB: implicitly, A will have to drop an escrow or have one already during this transaction,
    // because there is a step in the future of A where A may (actually must) publish a message.
    @A let handA = inputHand("First player, pick your hand");
    // canReach = EF. can = E, must = A. Reach = F. Maintain = G ?
    // (Where EF AF EG AG EX AX are the modal operators from CTL).
    // Except that since we're in an @A, each subsequent move by B inserts an AX (or conjunction thereof)
    // and move by us inserts another EX (or disjunction thereof), and
    // we take the fixpoint over all branches.
    // Now, B is supposed to have a (non-deterministic?) computable strategy that only uses
    // the information B has, in an abstract setting where you can't see inside digests and encryption,
    // but can compare for equality and later verify contents (also, non-free equations allowed
    // for commutative encryption?)
    // And this is true because B's strategy cannot depend on breaking the encryption of the commitment,
    // so we can assume that B's choice is made from information already available at this point,
    @A assert! canReach(end, end.outcome == A_Wins); // inside @A, canReach means that A can win even *against* others.
    @A let salt = randomUInt256();
    @A @verifiably let commitment = digest(salt, handA);
    publish! A -> commitment;
    deposit! A -> wagerAmount;
    // commit; // Maybe the commit is implicit at the transition between @A and @B ???

    @B assert! canReach(end, end.outcome == B_Wins); // inside @B, the canReach means B can win *against* A
      // NB: no implicit escrow for B, because this is B's only message.
    @B let handB = inputHand("Second player, pick your hand");
    publish! B -> handB;
    deposit! B -> wagerAmount;

    // require! isHand(handB); // Maybe this require! is implicit from the type of B being Hand?
    // commit; // Maybe the commit is implicit at the transition between @B and @A ???

    publish! A -> salt, handA; // NB: A will get her escrow back, since that's her last message.
    verify! commitment; // invokes the recipe from @verifiably, runs *on the consensus*
    // require! isHand(handA); // implicitly runs on the consensus because of handA's type
    let outcome = winner(handA, handB);

    switch(outcome) {
      | A_Wins => withdraw! A <- 2*wagerAmount
      | B_Wins => withdraw! B <- 2*wagerAmount
      | Draw => withdraw! A <- wagerAmount;
                withdraw! B <- wagerAmount };
    // commit; // Implicit since at end of interaction
  end: // This label is used by the two canReach() assertions, that refer to the values of bindings at the end.
    outcome // we return the outcome
};
