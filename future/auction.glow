#lang glow
// -*- JavaScript -*-

// Simple English (open ascending price) forward candle auction.

// ILLUSTRATES FEATURE: one role with an open set of participants
// ILLUSTRATES FEATURE: explicit timeouts
// ILLUSTRATES FEATURE: any basket of fungible or non-fungible assets as goods being sold
// ILLUSTRATES FEATURE: generalization for both goods and services as thing being sold

// TODO: UI should present the user with a checklist of the relevant trust hypotheses, including
// * who reviewed the contract
// * was the reviewed contract the exact same as run (identified by digest, sigil, etc.)
// * are the goods worth more to you than the bid + tx costs?
//
// You do NOT need to trust:
// * the seller to put down the goods, after he deposited them in the interaction

// TODO: write versions of this program for multiple language levels
// 1. with choice, no explicit Action data type.
// 2. with explicit Action data type, no choice
// 3. with end-point projection

data Action = Bid(TokenAmount) | BuyItNow | Close;

@interaction([Seller])
let simpleAuction = (goods : Assets, expirationTime : Timestamp, buyItNowPrice: TokenAmount) => {
   // The following should be added automatically already?
   // the following should be added automatically as part of validating/unmarshalling
   // the input data of type Assets, a constraint from the Assets type:
   require! Assets.is_positive(goods);
   require! expirationTime > currentTime();
   deposit! Seller -> goods; // escrow for the goods (TODO: also allow auction of services with an escrow)

   @interaction([Seller, CurrentBidder])
   let rec auction = (bid) => {
     assert! @deposited == goods + currentBid;
     choice {
       | ForAllParticipant (NewBidder) { // THIS CHOICE ACCEPTS A NEW PARTICIPANT!!!!!
           @NewBidder bid = Bid(input(["Enter next bid"], TokenAmout));
           publish! NewBidder -> bid ; deposit! NewBidder -> bid;
           @NewBidder assume! @value(goods) > @value(bid);
           require! currentTime() < expirationTime;
           require! bid > currentBid;
           //optional: require! bid < buyItNowPrice;
           withdraw! CurrentBidder <- currentBid;
           @interaction([Seller, NewBidder]) auction(bid);
       | ForAllParticipant (NewBidder) { // THIS CHOICE ACCEPTS A NEW PARTICIPANT!!!!!
           publish! NewBidder -> BuyItNow ; deposit! NewBidder -> buyItNowPrice;
           //optional: require! currentTime() < expirationTime;
           withdraw! NewBidder <- goods;
           withdraw! CurrentBidder <- currentBid;
           withdraw! Seller <- buyItNowPrice;
      | @_ { publish! Close; } => // only Seller and currentBidder are interested in it.
         require! currentTime() >= expirationTime;
         withdraw! Seller <- currentBid;
         withdraw! CurrentBidder <- goods;
     };
   @interaction([Seller, Seller]) auction(0);
}

// TODO:
// - Ensure that types statically ensure what a single specific type of token
//   is used for the auction, e.g. Bitcoin, Ethereum, some given ERC20, etc.
// - Support minimum bid, increment, buyout, reserve, dynamic closing, etc.
// - Have a general notion of goods or services such that this covers selling
//   a signature as well as selling tokens of a different kind than used to
//   pay, etc.
// - Have a timeout exception primitive construct that conceptually expands
//   into the above? Not clear that it helps that much,
//   especially considering the way it has to commute with state management.
// - Instead of a special syntax for matching events, a special data type
//   data message = Message('sender, 'data, 'asset)
