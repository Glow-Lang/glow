(@module (def i 2)
         (switch i
                 (0 "zero")
                 (1 "one")
                 (2 "two")
                 (_ (switch (@app < 0 i) (#t "many") (#f "negative"))))
         (def b #f)
         (switch b (#t "yes") (#f "no"))
         (def bs "apple")
         (switch bs ("apple" "orange") ("banana" "forage") (_ "storage"))
         (def l (@list 1 2))
         (switch l ((@list 0 1) "dore") ((@list 1 2) "remi") ((@list 3 6 0) "fatido") (_ "other"))
         (def p (@tuple 1 2))
         (switch p ((@tuple (@var-pat a) (@var-pat b0)) (@app + a b0)))
         (def v (@record (x 3) (y 4)))
         (switch v ((@record (x (@var-pat x)) (y (@var-pat y))) (@app sqrt (@app + (@app sqr x) (@app sqr y)))))
         (defdata lcexpr (Var int) (Lam lcexpr) (App lcexpr lcexpr))
         (def lcexpr1
              (@record (input (λ (tag) (def x1 (input lcexpr tag)) x1))))
         (def omega
              (@app App
                    (@app Lam (@app App (@app Var 0) (@app Var 0)))
                    (@app Lam (@app App (@app Var 0) (@app Var 0)))))
         (def freevars
              (λ (e)
                 (switch e ((@app-ctor Var (@var-pat x0)) (@list x0)) (_ (@list 0 1 2 3 4 5 6 7 8 9)))))
         (switch omega
                 ((@app-ctor App (@app-ctor Lam (@var-pat b1)) (@var-pat a0)) "beta")
                 ((@app-ctor Lam (@app-ctor App (@var-pat f) (@app-ctor Var 0)))
                  (switch (@app not (@app member 0 (@app freevars f)))
                          (#t "eta")
                          (#f "not immediate")))
                 (_ "not immediate"))
         (defdata ymn Yes Maybe No)
         (def ymn1
              (@record (input (λ (tag0) (def x2 (input ymn tag0)) x2))
                       (toNat (λ (x3) (switch x3 ((@app-ctor Yes) 0) ((@app-ctor Maybe) 1) ((@app-ctor No) 2))))
                       (ofNat (λ (x4) (switch x4 (0 Yes) (1 Maybe) (2 No))))))
         (def ans Maybe)
         (def possible (λ (a1) (switch a1 ((@or-pat (@app-ctor Yes) (@app-ctor Maybe)) #t) ((@app-ctor No) #f))))
         (def definite (λ (a2) (switch a2 ((@app-ctor Yes) #t) ((@or-pat (@app-ctor No) (@app-ctor Maybe)) #f))))
         (switch (@tuple (@app possible ans) (@app definite ans))
                 ((@tuple #t #t) "yes")
                 ((@tuple #t #f) "maybe")
                 ((@tuple #f #f) "no")
                 ((@tuple #f #t) "inconceivable!")))
