(defdata Hand Rock Paper Scissors)
(def inputHand
  (λ (tag)
    (def x : Hand (input Hand tag))
    x))
(def NatToHand
  (λ ((x0 : int))
    (def tmp0 (<= 0 x0))
    (def tmp1 (< x0 3))
    (def tmp (and tmp0 tmp1))
    (require! tmp)
    (if (= x0 0)
      (block Rock)
      (block (if (= x0 1)
               (block Paper)
               (block Scissors))))))
(def HandToNat
  (λ ((x1 : Hand))
    (switch x1
      (Rock 0)
      (Paper 1)
      (Scissors 2))))
(defdata Outcome B_Wins Draw A_Wins)
(def inputOutcome
  (λ (tag0)
    (def x2 : Outcome (input Outcome tag0)) x2))
(def NatToOutcome
  (λ ((x3 : int))
    (def tmp3 (<= 0 x3))
    (def tmp4 (< x3 3))
    (def tmp2 (and tmp3 tmp4))
    (require! tmp2)
    (if (= x3 0)
      (block B_Wins)
      (block (if (= x3 1)
        (block Draw)
        (block A_Wins))))))
(def OutcomeToNat
  (λ ((x4 : Outcome))
    (switch x4
      (B_Wins 0)
      (Draw 1)
      (A_Wins 2))))
(def winner
  (λ ((handA : Hand) (handB : Hand)) : Outcome
    (def tmp6 (HandToNat handA))
    (def tmp9 (HandToNat handB))
    (def tmp8 (- 4 tmp9))
    (def tmp7 (mod tmp8 3))
    (def tmp5 (+ tmp6 tmp7))
    (NatToOutcome tmp5)))
(@interaction ((@list A B))
  (def rockPaperScissors
    (λ (wagerAmount)
      (@ A (def handA0 (inputHand "First player, pick your hand")))
      (@ A (def salt (randomUInt256)))
      (@ A (def tmp11 (digest salt handA0)))
      (@ A (def tmp10 (def commitment tmp11)))
      (@ A (@verifiably tmp10))
      (@ A (publish! commitment))
      (@ A (deposit! wagerAmount))
      (@ B (def handB0 (inputHand "Second player, pick your hand")))
      (@ B (publish! handB0))
      (@ B (deposit! wagerAmount))
      (@ A (publish! salt handA0))
      (verify! commitment)
      (def outcome (winner handA0 handB0))
      (switch outcome
        (A_Wins (withdraw! A (* 2 wagerAmount)))
        (B_Wins (withdraw! B (* 2 wagerAmount)))
        (Draw (withdraw! A wagerAmount)
              (withdraw! B wagerAmount)))
      outcome)))
