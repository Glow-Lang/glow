(hash (* (type:arrow (@list (type:name 'Int) (type:name 'Int)) (type:name 'Int)))
      (A (type:name 'Participant))
      (B (type:name 'Participant))
      (bitwise-and (type:arrow (@list (type:name 'Int) (type:name 'Int)) (type:name 'Int)))
      (bitwise-xor (type:arrow (@list (type:name 'Int) (type:name 'Int)) (type:name 'Int)))
      (coinFlip (type:arrow (@list (type:name 'Participant) (type:name 'Participant) (type:name 'Int)) (type:tuple (@list))))
      (commitment (type:name 'Digest))
      (randA (type:name-subtype 'Nat (type:name 'Int)))
      (randB (type:name-subtype 'Nat (type:name 'Int)))
      (randomUInt256 (type:arrow (@list) (type:name-subtype 'Nat (type:name 'Int))))
      (wagerAmount (type:name 'Int))
      (0 (type:name-subtype 'Nat (type:name 'Int)))
      (1 (type:name-subtype 'Nat (type:name 'Int)))
      (2 (type:name-subtype 'Nat (type:name 'Int)))
      ((== commitment (digest randA)) (type:name 'Bool))
      ((== (@app bitwise-and (@app bitwise-xor randA randB) 1) 0) (type:name 'Bool))
      ((@app * 2 wagerAmount) (type:name 'Int))
      ((@app bitwise-and (@app bitwise-xor randA randB) 1) (type:name 'Int))
      ((@app bitwise-xor randA randB) (type:name 'Int))
      ((@app randomUInt256) (type:name-subtype 'Nat (type:name 'Int)))
      ((@make-interaction
        ((@list A B))
        (wagerAmount)
        (@ A (def randA (@app randomUInt256)))
        (@ A (def commitment (digest randA)))
        (publish! A commitment)
        (deposit! A wagerAmount)
        (@ B (def randB (@app randomUInt256)))
        (publish! B randB)
        (deposit! B wagerAmount)
        (publish! A randA)
        (require! (== commitment (digest randA)))
        (switch (== (@app bitwise-and (@app bitwise-xor randA randB) 1) 0)
                (#t (withdraw! A (@app * 2 wagerAmount)))
                (#f (withdraw! B (@app * 2 wagerAmount)))))
       (type:arrow (@list (type:name 'Participant) (type:name 'Participant) (type:name 'Int)) (type:tuple (@list))))
      ((deposit! A wagerAmount) (type:tuple (@list)))
      ((deposit! B wagerAmount) (type:tuple (@list)))
      ((digest randA) (type:name 'Digest))
      ((require! (== commitment (digest randA))) (type:tuple (@list)))
      ((switch (== (@app bitwise-and (@app bitwise-xor randA randB) 1) 0)
               (#t (withdraw! A (@app * 2 wagerAmount)))
               (#f (withdraw! B (@app * 2 wagerAmount))))
       (type:tuple (@list)))
      ((withdraw! A (@app * 2 wagerAmount)) (type:tuple (@list)))
      ((withdraw! B (@app * 2 wagerAmount)) (type:tuple (@list))))
