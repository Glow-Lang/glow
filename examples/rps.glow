#lang glow
data Hand = | Rock | Paper | Scissors;
data Outcome = | B_Wins | Draw | A_Wins;

let winner = (handA : Hand, handB : Hand) : Outcome => {
    Outcome.ofNat((Hand.toNat(handA) + (4 - Hand.toNat(handB))) % 3) };

/* The somewhat magic formula above is equivalent to the tedious definition below:
let winner = (handA : Hand, handB : Hand) : Outcome => {
  switch (handA) {
  case Rock:
    switch(handB) {
    case Rock: return Draw;
    case Paper: return B_Wins;
    case Scissors: return A_Wins;
  }
  case Paper:
    switch(handB) {
    case Rock: return A_Wins;
    case Paper: return Draw;
    case Scissors: return B_Wins;
  }
  case Scissors:
    switch(handB) {
    case Rock: return B_Wins;
    case Paper: return A_Wins;
    case Scissors: return Draw;
    }
  }
}
*/


@interaction([A, B])
let rockPaperScissors = (wagerAmount) => {
    @A let handA = Hand.input("First player, pick your hand");
    // @A assert! canReach(end, end.outcome == A_Wins);
    @A let salt = randomUInt256();
    @A @verifiably let commitment = digest((salt, handA));
    publish! A -> commitment; deposit! A -> wagerAmount;

    // @B assert! canReach(end, end.outcome == B_Wins);
    @B let handB = Hand.input("Second player, pick your hand");
    publish! B -> handB; deposit! B -> wagerAmount;

    publish! A -> salt, handA;
    verify! commitment;
    let outcome = winner(handA, handB);

// end:
    switch (outcome) {
      | A_Wins => withdraw! A <- 2*wagerAmount
      | B_Wins => withdraw! B <- 2*wagerAmount
      | Draw => withdraw! A <- wagerAmount; withdraw! B <- wagerAmount };

    outcome };
