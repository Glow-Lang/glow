(@module (begin end)
         (@label begin)
         (def winner
              (Î» (handA handB)
                 (begin0 end0)
                 (@label begin0)
                 (def tmp (@app - 4 handB))
                 (def tmp0 (@app + handA tmp))
                 (return (@app mod tmp0 3))
                 (@label end0)))
         (def rockPaperScissors
              (@make-interaction
               ((@list A B))
               (wagerAmount)
               (begin1 end1)
               (#f
                (@label begin1)
                (@label cp)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (def commitment (expect-published 'commitment))
                (consensus:set-participant A)
                (expect-deposited wagerAmount)
                (@label cp0)
                (consensus:set-participant B)
                (consensus:set-participant B)
                (def handB0 (expect-published 'handB0))
                (consensus:set-participant B)
                (expect-deposited wagerAmount)
                (def tmp2 (@app < handB0 3))
                (require! tmp2)
                (@label cp1)
                (consensus:set-participant A)
                (def salt (expect-published 'salt))
                (consensus:set-participant A)
                (def handA0 (expect-published 'handA0))
                (def tmp3 (@app < handA0 3))
                (require! tmp3)
                (def tmp4 (digest salt handA0))
                (def tmp5 (== commitment tmp4))
                (require! tmp5)
                (def outcome (@app winner handA0 handB0))
                (@label begin-switch)
                (switch outcome
                        (2 (def tmp6 (@app * 2 wagerAmount)) (consensus:withdraw A tmp6))
                        (0 (def tmp7 (@app * 2 wagerAmount)) (consensus:withdraw B tmp7))
                        (1 (consensus:withdraw A wagerAmount) (consensus:withdraw B wagerAmount)))
                (@label end-switch)
                (return outcome)
                (@label end1))
               (A (@label begin1)
                  (@label cp)
                  (participant:set-participant A)
                  (def handA0 (input Nat "First player, pick your hand: 0 (Rock), 1 (Paper), 2 (Scissors)"))
                  (participant:set-participant A)
                  (def tmp1 (@app < handA0 3))
                  (participant:set-participant A)
                  (require! tmp1)
                  (participant:set-participant A)
                  (def salt (@app randomUInt256))
                  (participant:set-participant A)
                  (def commitment (digest salt handA0))
                  (participant:set-participant A)
                  (add-to-publish 'commitment commitment)
                  (participant:set-participant A)
                  (add-to-deposit wagerAmount)
                  (@label cp0)
                  (participant:set-participant B)
                  (participant:set-participant B)
                  (def handB0 (expect-published 'handB0))
                  (participant:set-participant B)
                  (expect-deposited wagerAmount)
                  (def tmp2 (@app < handB0 3))
                  (require! tmp2)
                  (@label cp1)
                  (participant:set-participant A)
                  (add-to-publish 'salt salt)
                  (participant:set-participant A)
                  (add-to-publish 'handA0 handA0)
                  (def tmp3 (@app < handA0 3))
                  (require! tmp3)
                  (def tmp4 (digest salt handA0))
                  (def tmp5 (== commitment tmp4))
                  (require! tmp5)
                  (def outcome (@app winner handA0 handB0))
                  (@label begin-switch)
                  (switch outcome
                          (2 (def tmp6 (@app * 2 wagerAmount)) (participant:withdraw A tmp6))
                          (0 (def tmp7 (@app * 2 wagerAmount)) (participant:withdraw B tmp7))
                          (1 (participant:withdraw A wagerAmount) (participant:withdraw B wagerAmount)))
                  (@label end-switch)
                  (return outcome)
                  (@label end1))
               (B (@label begin1)
                  (@label cp)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (def commitment (expect-published 'commitment))
                  (participant:set-participant A)
                  (expect-deposited wagerAmount)
                  (@label cp0)
                  (participant:set-participant B)
                  (def handB0 (input Nat "Second player, pick your hand: 0 (Rock), 1 (Paper), 2 (Scissors)"))
                  (participant:set-participant B)
                  (add-to-publish 'handB0 handB0)
                  (participant:set-participant B)
                  (add-to-deposit wagerAmount)
                  (def tmp2 (@app < handB0 3))
                  (require! tmp2)
                  (@label cp1)
                  (participant:set-participant A)
                  (def salt (expect-published 'salt))
                  (participant:set-participant A)
                  (def handA0 (expect-published 'handA0))
                  (def tmp3 (@app < handA0 3))
                  (require! tmp3)
                  (def tmp4 (digest salt handA0))
                  (def tmp5 (== commitment tmp4))
                  (require! tmp5)
                  (def outcome (@app winner handA0 handB0))
                  (@label begin-switch)
                  (switch outcome
                          (2 (def tmp6 (@app * 2 wagerAmount)) (participant:withdraw A tmp6))
                          (0 (def tmp7 (@app * 2 wagerAmount)) (participant:withdraw B tmp7))
                          (1 (participant:withdraw A wagerAmount) (participant:withdraw B wagerAmount)))
                  (@label end-switch)
                  (return outcome)
                  (@label end1))))
         (return (@tuple))
         (@label end))
