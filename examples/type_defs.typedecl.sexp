(type yn = yn0)
(constructor No : yn0)
(constructor App : (-> (lcexpr0 'lit) (lcexpr0 'lit) (lcexpr0 'lit)))
(constructor Lit : (-> 'lit (lcexpr0 'lit)))
(constructor Pair : (-> 'a 'b (pair0 'a 'b)))
(constructor EQ : ordering0)
(type colorRGB = (@record (g int) (b int) (r int)))
(type (lcexpr 'lit) = (lcexpr0 'lit))
(val tuple_pair : (-> (@tuple 'a 'b) (pair0 'a 'b)))
(constructor Ok : (-> 'a (result0 'a 'b)))
(val pair_tuple : (-> (pair0 'a 'b) (@tuple 'a 'b)))
(constructor Cons : (-> 'a (conslist0 'a) (conslist0 'a)))
(type (option 'a) = (option0 'a))
(type (assocpairlist 'a 'b) = (conslist0 (pair0 'a 'b)))
(type (result 'a 'b) = (result0 'a 'b))
(constructor GT : ordering0)
(constructor Zero : natural0)
(constructor Var : (-> natural0 (lcexpr0 'lit)))
(type purelcexpr = (lcexpr0 nothing0))
(constructor None : (option0 'a))
(type ordering = ordering0)
(constructor Empty : (conslist0 'a))
(type lcintexpr = (lcexpr0 int))
(type nothing = nothing0)
(val option_result : (-> (option0 'a) (result0 'a (@tuple))))
(constructor Some : (-> 'a (option0 'a)))
(constructor Error : (-> 'b (result0 'a 'b)))
(constructor Yes : yn0)
(type pos2d = pos2d0)
(type (conslist 'a) = (conslist0 'a))
(constructor Posn : (-> int int pos2d0))
(constructor Lam : (-> (lcexpr0 'lit) (lcexpr0 'lit)))
(type (pair 'a 'b) = (pair0 'a 'b))
(constructor LT : ordering0)
(constructor Succ : (-> natural0 natural0))
(type natural = natural0)
