(@module (begin end)
         (@label begin)
         (def rockPaperScissors
              (@make-interaction
               ((@list A B))
               (wagerAmount)
               (begin0 end0)
               (#f
                (@label begin0)
                (@label cp)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (def commitment (expect-published 'commitment))
                (consensus:set-participant A)
                (expect-deposited wagerAmount)
                (@label cp0)
                (consensus:set-participant B)
                (consensus:set-participant B)
                (def handB (expect-published 'handB))
                (consensus:set-participant B)
                (expect-deposited wagerAmount)
                (def tmp0 (@app < handB 3))
                (require! tmp0)
                (@label cp1)
                (consensus:set-participant A)
                (def salt (expect-published 'salt))
                (consensus:set-participant A)
                (def handA (expect-published 'handA))
                (def tmp1 (@app < handA 3))
                (require! tmp1)
                (def tmp2 (digest salt handA))
                (def tmp3 (== commitment tmp2))
                (require! tmp3)
                (def tmp4 (@app - 4 handB))
                (def tmp5 (@app + handA tmp4))
                (def outcome (@app mod tmp5 3))
                (@label begin-switch)
                (switch outcome
                        (2
                         (def tmp6 (@app * 2 wagerAmount))
                         (consensus:withdraw A tmp6))
                        (0
                         (def tmp7 (@app * 2 wagerAmount))
                         (consensus:withdraw B tmp7))
                        (1
                         (consensus:withdraw A wagerAmount)
                         (consensus:withdraw B wagerAmount)))
                (@label end-switch)
                (return outcome)
                (@label end0))
               (A (@label begin0)
                  (@label cp)
                  (participant:set-participant A)
                  (def handA
                       (input Nat
                              "First player, pick your hand: 0 (Rock), 1 (Paper), 2 (Scissors)"))
                  (participant:set-participant A)
                  (def tmp (@app < handA 3))
                  (participant:set-participant A)
                  (require! tmp)
                  (participant:set-participant A)
                  (def salt (@app randomUInt256))
                  (participant:set-participant A)
                  (def commitment (digest salt handA))
                  (participant:set-participant A)
                  (add-to-publish 'commitment commitment)
                  (participant:set-participant A)
                  (add-to-deposit wagerAmount)
                  (@label cp0)
                  (participant:set-participant B)
                  (participant:set-participant B)
                  (def handB (expect-published 'handB))
                  (participant:set-participant B)
                  (expect-deposited wagerAmount)
                  (def tmp0 (@app < handB 3))
                  (require! tmp0)
                  (@label cp1)
                  (participant:set-participant A)
                  (add-to-publish 'salt salt)
                  (participant:set-participant A)
                  (add-to-publish 'handA handA)
                  (def tmp1 (@app < handA 3))
                  (require! tmp1)
                  (def tmp2 (digest salt handA))
                  (def tmp3 (== commitment tmp2))
                  (require! tmp3)
                  (def tmp4 (@app - 4 handB))
                  (def tmp5 (@app + handA tmp4))
                  (def outcome (@app mod tmp5 3))
                  (@label begin-switch)
                  (switch outcome
                          (2
                           (def tmp6 (@app * 2 wagerAmount))
                           (participant:withdraw A tmp6))
                          (0
                           (def tmp7 (@app * 2 wagerAmount))
                           (participant:withdraw B tmp7))
                          (1
                           (participant:withdraw A wagerAmount)
                           (participant:withdraw B wagerAmount)))
                  (@label end-switch)
                  (return outcome)
                  (@label end0))
               (B (@label begin0)
                  (@label cp)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (def commitment (expect-published 'commitment))
                  (participant:set-participant A)
                  (expect-deposited wagerAmount)
                  (@label cp0)
                  (participant:set-participant B)
                  (def handB
                       (input Nat
                              "Second player, pick your hand: 0 (Rock), 1 (Paper), 2 (Scissors)"))
                  (participant:set-participant B)
                  (add-to-publish 'handB handB)
                  (participant:set-participant B)
                  (add-to-deposit wagerAmount)
                  (def tmp0 (@app < handB 3))
                  (require! tmp0)
                  (@label cp1)
                  (participant:set-participant A)
                  (def salt (expect-published 'salt))
                  (participant:set-participant A)
                  (def handA (expect-published 'handA))
                  (def tmp1 (@app < handA 3))
                  (require! tmp1)
                  (def tmp2 (digest salt handA))
                  (def tmp3 (== commitment tmp2))
                  (require! tmp3)
                  (def tmp4 (@app - 4 handB))
                  (def tmp5 (@app + handA tmp4))
                  (def outcome (@app mod tmp5 3))
                  (@label begin-switch)
                  (switch outcome
                          (2
                           (def tmp6 (@app * 2 wagerAmount))
                           (participant:withdraw A tmp6))
                          (0
                           (def tmp7 (@app * 2 wagerAmount))
                           (participant:withdraw B tmp7))
                          (1
                           (participant:withdraw A wagerAmount)
                           (participant:withdraw B wagerAmount)))
                  (@label end-switch)
                  (return outcome)
                  (@label end0))))
         (return (@tuple))
         (@label end))
