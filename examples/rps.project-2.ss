#|
To generate from the command-line in the glow directory:
./unit-tests.ss pass project-2 examples/rps.sexp
To run from gxi in the glow directory, assuming gerbil-etherum is in a sibling directory:
> (add-load-path (path-normalize "../gerbil-ethereum"))
> (import "examples/rps.project-2.ss" :clan/poo/io :clan/persist/content-addressing :mukn/ethereum/types :mukn/ethereum/signing :mukn/ethereum/t/signing-test)
> (json<- Address alice)                                                                     "0xC54e86DFFb87B9736E2E35DD85c775358F1c31CE"
"0xC54e86DFFb87B9736E2E35DD85c775358F1c31CE"
> (json<- Address bob)
"0x9CcaEd210CE8c0Cb49c5Ad1C4f583406c264BA69"
> (main) ; ((rockPaperScissors alice-address bob-address) 1)
enter JSON agreement or handshake:
["agreement",
 { "interaction": "rockPaperScissors",
   "participants": { "A": "0xC54e86DFFb87B9736E2E35DD85c775358F1c31CE",
                     "B": "0x9CcaEd210CE8c0Cb49c5Ad1C4f583406c264BA69" },
   "parameters": { "wagerAmount": "0x1" },
   "options": {} }]
copy and send the following JSON handshake to other participants:
["handshake",
 { "interaction": "rockPaperScissors",
   "participants": { "A": "0xc54e86dffb87b9736e2e35dd85c775358f1c31ce",
                     "B": "0x9ccaed210ce8c0cb49c5ad1c4f583406c264ba69" },
   "parameters": { "wagerAmount": "0x1" },
   "options": {},
   "confirmation": {} }]
enter JSON role:
["role", "A"]
input Hand: First player, pick your hand
{"tag": "Rock", "value": []}
consensus confirmed message:
(message #u8(197 78 134 223 251 135 185 115 110 46 53 221 133 199 117 53 143 28 49 206)
         #u8(17 187 111 173 52 231 201 174 4 170 92 148 225 238 78 42 75 67 136 156 13 100 71 61 105 27 2 157 122 172 6 135)
         ((#f . 1) (#u8(197 78 134 223 251 135 185 115 110 46 53 221 133 199 117 53 143 28 49 206) . -1)))
input Hand: Second player, pick your hand
{"tag": "Rock", "value": []}
consensus confirmed message:
(message #u8(156 202 237 33 12 232 192 203 73 197 173 28 79 88 52 6 194 100 186 105)
         #u8(0)
         ((#f . 1) (#u8(156 202 237 33 12 232 192 203 73 197 173 28 79 88 52 6 194 100 186 105) . -1)))
consensus confirmed message:
(message #u8(197 78 134 223 251 135 185 115 110 46 53 221 133 199 117 53 143 28 49 206)
         #u8(159  66 229 154 214 120  78 144
              73 184 107  39  26  58 143   9
             140  52 226 219 136  79 115  32
             178 249 240 142  66  91 237  35
              89   0)
         ((#f . -2)
          (#u8(156 202 237 33 12 232 192 203 73 197 173 28 79 88 52 6 194 100 186 105) . 1)
          (#u8(197 78 134 223 251 135 185 115 110 46 53 221 133 199 117 53 143 28 49 206) . 1)))
done
|#
(export #t)
(import :mukn/glow/compiler/project/runtime-2)
(define-type Hand (Sum Rock: (Tuple) Paper: (Tuple) Scissors: (Tuple)))
(define-sum-constructors Hand Rock Paper Scissors)
(def Rock (Hand-Rock (vector)))
(def Paper (Hand-Paper (vector)))
(def Scissors (Hand-Scissors (vector)))
(def tmp (λ (tag) (def x (input Hand1 tag)) x))
(def tmp0 (λ (x0) (match x0 ((Hand-Rock (vector)) 0) ((Hand-Paper (vector)) 1) ((Hand-Scissors (vector)) 2))))
(def tmp1 (λ (x1) (match x1 (0 Rock) (1 Paper) (2 Scissors))))
(def Hand1 (.o (:: @ Hand) (input tmp) (toNat tmp0) (ofNat tmp1)))
(define-type Outcome (Sum B_Wins: (Tuple) Draw: (Tuple) A_Wins: (Tuple)))
(define-sum-constructors Outcome B_Wins Draw A_Wins)
(def B_Wins (Outcome-B_Wins (vector)))
(def Draw (Outcome-Draw (vector)))
(def A_Wins (Outcome-A_Wins (vector)))
(def tmp2 (λ (tag0) (def x2 (input Outcome1 tag0)) x2))
(def tmp3 (λ (x3) (match x3 ((Outcome-B_Wins (vector)) 0) ((Outcome-Draw (vector)) 1) ((Outcome-A_Wins (vector)) 2))))
(def tmp4 (λ (x4) (match x4 (0 B_Wins) (1 Draw) (2 A_Wins))))
(def Outcome1 (.o (:: @ Outcome) (input tmp2) (toNat tmp3) (ofNat tmp4)))
(def winner
     (λ (handA handB)
        (def tmp5 (.@ Outcome1 ofNat))
        (def tmp6 (.@ Hand1 toNat))
        (def tmp7 (%%app tmp6 handA))
        (def tmp8 (.@ Hand1 toNat))
        (def tmp9 (%%app tmp8 handB))
        (def tmp10 (%%app - 4 tmp9))
        (def tmp11 (%%app + tmp7 tmp10))
        (def tmp12 (%%app mod tmp11 3))
        (%%app tmp5 tmp12)))
(def rockPaperScissors-consensus0
     (lambda (in2 out2 A B)
       (lambda (wagerAmount)
         (parameterize ((current-input-channel in2) (current-output-channel out2))
           (begin0 (let ()
                     (consensus:set-participant A)
                     (consensus:set-participant A)
                     (consensus:set-participant A)
                     (consensus:set-participant A)
                     (consensus:set-participant A)
                     (consensus:set-participant A)
                     (def commitment (expect-published 'commitment Bytes32))
                     (consensus:set-participant A)
                     (expect-deposited wagerAmount)
                     (consensus:set-participant B)
                     (consensus:set-participant B)
                     (consensus:set-participant B)
                     (def handB0 (expect-published 'handB0 Hand1))
                     (consensus:set-participant B)
                     (expect-deposited wagerAmount)
                     (consensus:set-participant A)
                     (def salt (expect-published 'salt Nat))
                     (consensus:set-participant A)
                     (def handA0 (expect-published 'handA0 Hand1))
                     (def tmp16 (vector salt handA0))
                     (def tmp17 (digest (@list (cons (Tuple Nat Hand1) tmp16))))
                     (def tmp18 (== commitment tmp17))
                     (assert! tmp18)
                     (def outcome (%%app winner handA0 handB0))
                     (match outcome
                            ((Outcome-A_Wins (vector)) (def tmp19 (%%app * 2 wagerAmount)) (consensus:withdraw A tmp19))
                            ((Outcome-B_Wins (vector)) (def tmp20 (%%app * 2 wagerAmount)) (consensus:withdraw B tmp20))
                            ((Outcome-Draw (vector)) (consensus:withdraw A wagerAmount) (consensus:withdraw B wagerAmount)))
                     outcome)
                   (consensus:end-interaction))))))
(def rockPaperScissors-A0
     (lambda (in3 out3 A B)
       (lambda (wagerAmount)
         (parameterize ((current-input-channel in3) (current-output-channel out3))
           (begin0 (let ()
                     (participant:set-participant A)
                     (def tmp13 (.@ Hand1 input))
                     (participant:set-participant A)
                     (def handA0 (%%app tmp13 "First player, pick your hand"))
                     (participant:set-participant A)
                     (def salt (%%app randomUInt256))
                     (participant:set-participant A)
                     (def tmp14 (vector salt handA0))
                     (participant:set-participant A)
                     (def commitment (digest (@list (cons (Tuple Nat Hand1) tmp14))))
                     (participant:set-participant A)
                     (add-to-publish 'commitment commitment Bytes32)
                     (participant:set-participant A)
                     (add-to-deposit wagerAmount)
                     (participant:set-participant B)
                     (participant:set-participant B)
                     (participant:set-participant B)
                     (def handB0 (expect-published 'handB0 Hand1))
                     (participant:set-participant B)
                     (expect-deposited wagerAmount)
                     (participant:set-participant A)
                     (add-to-publish 'salt salt Nat)
                     (participant:set-participant A)
                     (add-to-publish 'handA0 handA0 Hand1)
                     (def tmp16 (vector salt handA0))
                     (def tmp17 (digest (@list (cons (Tuple Nat Hand1) tmp16))))
                     (def tmp18 (== commitment tmp17))
                     (assert! tmp18)
                     (def outcome (%%app winner handA0 handB0))
                     (match outcome
                            ((Outcome-A_Wins (vector)) (def tmp19 (%%app * 2 wagerAmount)) (participant:withdraw A tmp19))
                            ((Outcome-B_Wins (vector)) (def tmp20 (%%app * 2 wagerAmount)) (participant:withdraw B tmp20))
                            ((Outcome-Draw (vector)) (participant:withdraw A wagerAmount) (participant:withdraw B wagerAmount)))
                     outcome)
                   (participant:end-interaction))))))
(def rockPaperScissors-B0
     (lambda (in4 out4 A B)
       (lambda (wagerAmount)
         (parameterize ((current-input-channel in4) (current-output-channel out4))
           (begin0 (let ()
                     (participant:set-participant A)
                     (participant:set-participant A)
                     (participant:set-participant A)
                     (participant:set-participant A)
                     (participant:set-participant A)
                     (participant:set-participant A)
                     (def commitment (expect-published 'commitment Bytes32))
                     (participant:set-participant A)
                     (expect-deposited wagerAmount)
                     (participant:set-participant B)
                     (def tmp15 (.@ Hand1 input))
                     (participant:set-participant B)
                     (def handB0 (%%app tmp15 "Second player, pick your hand"))
                     (participant:set-participant B)
                     (add-to-publish 'handB0 handB0 Hand1)
                     (participant:set-participant B)
                     (add-to-deposit wagerAmount)
                     (participant:set-participant A)
                     (def salt (expect-published 'salt Nat))
                     (participant:set-participant A)
                     (def handA0 (expect-published 'handA0 Hand1))
                     (def tmp16 (vector salt handA0))
                     (def tmp17 (digest (@list (cons (Tuple Nat Hand1) tmp16))))
                     (def tmp18 (== commitment tmp17))
                     (assert! tmp18)
                     (def outcome (%%app winner handA0 handB0))
                     (match outcome
                            ((Outcome-A_Wins (vector)) (def tmp19 (%%app * 2 wagerAmount)) (participant:withdraw A tmp19))
                            ((Outcome-B_Wins (vector)) (def tmp20 (%%app * 2 wagerAmount)) (participant:withdraw B tmp20))
                            ((Outcome-Draw (vector)) (participant:withdraw A wagerAmount) (participant:withdraw B wagerAmount)))
                     outcome)
                   (participant:end-interaction))))))

(def project-sexp
  '(@module (begin end)
         (@label begin)
         (defdata Hand Rock Paper Scissors)
         (def tmp (λ (tag) (begin0 end0) (@label begin0) (def x (input Hand tag)) (return x) (@label end0)))
         (def tmp0
              (λ (x0)
                 (begin1 end1)
                 (@label begin1)
                 (@label begin-switch)
                 (switch x0 ((@app-ctor Rock) (return 0)) ((@app-ctor Paper) (return 1)) ((@app-ctor Scissors) (return 2)))
                 (@label end-switch)
                 (@label end1)))
         (def tmp1
              (λ (x1)
                 (begin2 end2)
                 (@label begin2)
                 (@label begin-switch0)
                 (switch x1 (0 (return Rock)) (1 (return Paper)) (2 (return Scissors)))
                 (@label end-switch0)
                 (@label end2)))
         (def Hand1 (@record (input tmp) (toNat tmp0) (ofNat tmp1)))
         (defdata Outcome B_Wins Draw A_Wins)
         (def tmp2 (λ (tag0) (begin3 end3) (@label begin3) (def x2 (input Outcome tag0)) (return x2) (@label end3)))
         (def tmp3
              (λ (x3)
                 (begin4 end4)
                 (@label begin4)
                 (@label begin-switch1)
                 (switch x3 ((@app-ctor B_Wins) (return 0)) ((@app-ctor Draw) (return 1)) ((@app-ctor A_Wins) (return 2)))
                 (@label end-switch1)
                 (@label end4)))
         (def tmp4
              (λ (x4)
                 (begin5 end5)
                 (@label begin5)
                 (@label begin-switch2)
                 (switch x4 (0 (return B_Wins)) (1 (return Draw)) (2 (return A_Wins)))
                 (@label end-switch2)
                 (@label end5)))
         (def Outcome1 (@record (input tmp2) (toNat tmp3) (ofNat tmp4)))
         (def winner
              (λ (handA handB)
                 (begin6 end6)
                 (@label begin6)
                 (def tmp5 (@dot Outcome1 ofNat))
                 (def tmp6 (@dot Hand1 toNat))
                 (def tmp7 (@app tmp6 handA))
                 (def tmp8 (@dot Hand1 toNat))
                 (def tmp9 (@app tmp8 handB))
                 (def tmp10 (@app - 4 tmp9))
                 (def tmp11 (@app + tmp7 tmp10))
                 (def tmp12 (@app mod tmp11 3))
                 (return (@app tmp5 tmp12))
                 (@label end6)))
         (def rockPaperScissors
              (@make-interaction
               ((@list A B))
               (wagerAmount)
               (begin7 end7)
               (#f
                (@label begin7)
                (@label cp)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (consensus:set-participant A)
                (def commitment (expect-published 'commitment))
                (consensus:set-participant A)
                (expect-deposited wagerAmount)
                (@label cp0)
                (consensus:set-participant B)
                (consensus:set-participant B)
                (consensus:set-participant B)
                (def handB0 (expect-published 'handB0))
                (consensus:set-participant B)
                (expect-deposited wagerAmount)
                (@label cp1)
                (consensus:set-participant A)
                (def salt (expect-published 'salt))
                (consensus:set-participant A)
                (def handA0 (expect-published 'handA0))
                (def tmp16 (@tuple salt handA0))
                (def tmp17 (digest tmp16))
                (def tmp18 (== commitment tmp17))
                (require! tmp18)
                (def outcome (@app winner handA0 handB0))
                (@label begin-switch3)
                (switch outcome
                        ((@app-ctor A_Wins) (def tmp19 (@app * 2 wagerAmount)) (consensus:withdraw A tmp19))
                        ((@app-ctor B_Wins) (def tmp20 (@app * 2 wagerAmount)) (consensus:withdraw B tmp20))
                        ((@app-ctor Draw) (consensus:withdraw A wagerAmount) (consensus:withdraw B wagerAmount)))
                (@label end-switch3)
                (return outcome)
                (@label end7))
               (A (@label begin7)
                  (@label cp)
                  (participant:set-participant A)
                  (def tmp13 (@dot Hand1 input))
                  (participant:set-participant A)
                  (def handA0 (@app tmp13 "First player, pick your hand"))
                  (participant:set-participant A)
                  (def salt (@app randomUInt256))
                  (participant:set-participant A)
                  (def tmp14 (@tuple salt handA0))
                  (participant:set-participant A)
                  (def commitment (digest tmp14))
                  (participant:set-participant A)
                  (add-to-publish 'commitment commitment)
                  (participant:set-participant A)
                  (add-to-deposit wagerAmount)
                  (@label cp0)
                  (participant:set-participant B)
                  (participant:set-participant B)
                  (participant:set-participant B)
                  (def handB0 (expect-published 'handB0))
                  (participant:set-participant B)
                  (expect-deposited wagerAmount)
                  (@label cp1)
                  (participant:set-participant A)
                  (add-to-publish 'salt salt)
                  (participant:set-participant A)
                  (add-to-publish 'handA0 handA0)
                  (def tmp16 (@tuple salt handA0))
                  (def tmp17 (digest tmp16))
                  (def tmp18 (== commitment tmp17))
                  (require! tmp18)
                  (def outcome (@app winner handA0 handB0))
                  (@label begin-switch3)
                  (switch outcome
                          ((@app-ctor A_Wins) (def tmp19 (@app * 2 wagerAmount)) (participant:withdraw A tmp19))
                          ((@app-ctor B_Wins) (def tmp20 (@app * 2 wagerAmount)) (participant:withdraw B tmp20))
                          ((@app-ctor Draw) (participant:withdraw A wagerAmount) (participant:withdraw B wagerAmount)))
                  (@label end-switch3)
                  (return outcome)
                  (@label end7))
               (B (@label begin7)
                  (@label cp)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (participant:set-participant A)
                  (def commitment (expect-published 'commitment))
                  (participant:set-participant A)
                  (expect-deposited wagerAmount)
                  (@label cp0)
                  (participant:set-participant B)
                  (def tmp15 (@dot Hand1 input))
                  (participant:set-participant B)
                  (def handB0 (@app tmp15 "Second player, pick your hand"))
                  (participant:set-participant B)
                  (add-to-publish 'handB0 handB0)
                  (participant:set-participant B)
                  (add-to-deposit wagerAmount)
                  (@label cp1)
                  (participant:set-participant A)
                  (def salt (expect-published 'salt))
                  (participant:set-participant A)
                  (def handA0 (expect-published 'handA0))
                  (def tmp16 (@tuple salt handA0))
                  (def tmp17 (digest tmp16))
                  (def tmp18 (== commitment tmp17))
                  (require! tmp18)
                  (def outcome (@app winner handA0 handB0))
                  (@label begin-switch3)
                  (switch outcome
                          ((@app-ctor A_Wins) (def tmp19 (@app * 2 wagerAmount)) (participant:withdraw A tmp19))
                          ((@app-ctor B_Wins) (def tmp20 (@app * 2 wagerAmount)) (participant:withdraw B tmp20))
                          ((@app-ctor Draw) (participant:withdraw A wagerAmount) (participant:withdraw B wagerAmount)))
                  (@label end-switch3)
                  (return outcome)
                  (@label end7))))
         (return (@tuple))
         (@label end)))

(def interaction-table
  (hash (rockPaperScissors
         (hash (participants ['A 'B])
               (parameters [(cons 'wagerAmount Nat)])
               (project-sexp project-sexp)
               (procedures
                (hash (#f rockPaperScissors-consensus0)
                      (A rockPaperScissors-A0)
                      (B rockPaperScissors-B0)))))))

(def (main . args)
  (input-run-interaction interaction-table))
