(@module (defdata yn Yes No)
         (def yn1
              (@record (input (λ (tag) (def x (input yn tag)) x))
                       (toNat (λ (x0) (switch x0 ((@app-ctor Yes) 0) ((@app-ctor No) 1))))
                       (ofNat (λ (x1) (switch x1 (0 Yes) (1 No))))))
         (defdata ordering LT EQ GT)
         (def ordering1
              (@record (input (λ (tag0)
                                 (def x2 (input ordering tag0))
                                 x2))
                       (toNat (λ (x3) (switch x3 ((@app-ctor LT) 0) ((@app-ctor EQ) 1) ((@app-ctor GT) 2))))
                       (ofNat (λ (x4) (switch x4 (0 LT) (1 EQ) (2 GT))))))
         (defdata pos2d (Posn int int))
         (def pos2d1
              (@record (input (λ (tag1) (def x5 (input pos2d tag1)) x5))))
         (deftype colorRGB (@record (r int) (g int) (b int)))
         (defdata (pair 'a 'b) (Pair 'a 'b))
         (def pair1 (@record))
         (def pair_tuple
              (λ (p) (switch p ((@app-ctor Pair (@var-pat a) (@var-pat b)) (@tuple a b)))))
         (def tuple_pair
              (λ (t)
                 (switch t ((@tuple (@var-pat a0) (@var-pat b0)) (@app Pair a0 b0)))))
         (defdata (option 'a) (Some 'a) None)
         (def option1 (@record))
         (defdata (result 'a 'b) (Ok 'a) (Error 'b))
         (def result1 (@record))
         (def option_result
              (λ (o)
                 (switch o ((@app-ctor Some (@var-pat a1)) (@app Ok a1)) ((@app-ctor None) (@app Error (@tuple))))))
         (defdata natural Zero (Succ natural))
         (def natural1
              (@record (input (λ (tag2)
                                 (def x6 (input natural tag2))
                                 x6))))
         (defdata (conslist 'a) Empty (Cons 'a (conslist 'a)))
         (def conslist1 (@record))
         (deftype (assocpairlist 'a 'b) (conslist (pair 'a 'b)))
         (defdata (lcexpr 'lit)
                  (Lit 'lit)
                  (Var natural)
                  (Lam (lcexpr 'lit))
                  (App (lcexpr 'lit) (lcexpr 'lit)))
         (def lcexpr1 (@record))
         (deftype lcintexpr (lcexpr int))
         (defdata nothing)
         (def nothing1
              (@record (input (λ (tag3)
                                 (def x7 (input nothing tag3))
                                 x7))
                       (toNat (λ (x8) (switch x8)))
                       (ofNat (λ (x9) (switch x9)))))
         (deftype purelcexpr (lcexpr nothing)))
