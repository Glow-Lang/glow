(@module (begin end)
         (@label begin)
         (defdata Hand Rock Paper Scissors)
         (def tmp
              (λ (tag)
                 (: Hand)
                 (begin0 end0)
                 (@label begin0)
                 (def x (input Hand tag))
                 (ann x Hand)
                 (return x)
                 (@label end0)))
         (def tmp0
              (λ ((x0 : Hand))
                 (: nat)
                 (begin1 end1)
                 (@label begin1)
                 (@label begin-switch)
                 (switch x0
                         ((@app-ctor Rock) (return 0))
                         ((@app-ctor Paper) (return 1))
                         ((@app-ctor Scissors) (return 2)))
                 (@label end-switch)
                 (@label end1)))
         (def tmp1
              (λ ((x1 : nat))
                 (: Hand)
                 (begin2 end2)
                 (@label begin2)
                 (@label begin-switch0)
                 (switch x1
                         (0 (return Rock))
                         (1 (return Paper))
                         (2 (return Scissors)))
                 (@label end-switch0)
                 (@label end2)))
         (def Hand1 (@record (input tmp) (toNat tmp0) (ofNat tmp1)))
         (defdata Outcome B_Wins Draw A_Wins)
         (def tmp2
              (λ (tag0)
                 (: Outcome)
                 (begin3 end3)
                 (@label begin3)
                 (def x2 (input Outcome tag0))
                 (ann x2 Outcome)
                 (return x2)
                 (@label end3)))
         (def tmp3
              (λ ((x3 : Outcome))
                 (: nat)
                 (begin4 end4)
                 (@label begin4)
                 (@label begin-switch1)
                 (switch x3
                         ((@app-ctor B_Wins) (return 0))
                         ((@app-ctor Draw) (return 1))
                         ((@app-ctor A_Wins) (return 2)))
                 (@label end-switch1)
                 (@label end4)))
         (def tmp4
              (λ ((x4 : nat))
                 (: Outcome)
                 (begin5 end5)
                 (@label begin5)
                 (@label begin-switch2)
                 (switch x4
                         (0 (return B_Wins))
                         (1 (return Draw))
                         (2 (return A_Wins)))
                 (@label end-switch2)
                 (@label end5)))
         (def Outcome1 (@record (input tmp2) (toNat tmp3) (ofNat tmp4)))
         (def winner
              (λ ((handA : Hand) (handB : Hand))
                 (: Outcome)
                 (begin6 end6)
                 (@label begin6)
                 (def tmp5 (@dot Outcome1 ofNat))
                 (def tmp6 (@dot Hand1 toNat))
                 (def tmp7 (@app tmp6 handA))
                 (def tmp8 (@dot Hand1 toNat))
                 (def tmp9 (@app tmp8 handB))
                 (def tmp10 (@app - 4 tmp9))
                 (def tmp11 (@app + tmp7 tmp10))
                 (def tmp12 (@app mod tmp11 3))
                 (return (@app tmp5 tmp12))
                 (@label end6)))
         (def rockPaperScissors
              (@make-interaction
               ((@list A B))
               (wagerAmount)
               ()
               (begin7 end7)
               (@label begin7)
               (@label cp)
               (@ A (def tmp13 (@dot Hand1 input)))
               (@ A (def handA0 (@app tmp13 "First player, pick your hand")))
               (@ A (def salt (@app randomUInt256)))
               (@ A (def tmp14 (@tuple salt handA0)))
               (@ A (def commitment (digest tmp14)))
               (publish! A commitment)
               (deposit! A wagerAmount)
               (@label cp0)
               (@ B (def tmp15 (@dot Hand1 input)))
               (@ B (def handB0 (@app tmp15 "Second player, pick your hand")))
               (publish! B handB0)
               (deposit! B wagerAmount)
               (@label cp1)
               (publish! A salt)
               (publish! A handA0)
               (def tmp16 (@tuple salt handA0))
               (def tmp17 (digest tmp16))
               (def tmp18 (== commitment tmp17))
               (require! tmp18)
               (def outcome (@app winner handA0 handB0))
               (@label begin-switch3)
               (switch outcome
                       ((@app-ctor A_Wins) (def tmp19 (@app * 2 wagerAmount))
                                           (withdraw! A tmp19))
                       ((@app-ctor B_Wins) (def tmp20 (@app * 2 wagerAmount))
                                           (withdraw! B tmp20))
                       ((@app-ctor Draw) (withdraw! A wagerAmount)
                                         (withdraw! B wagerAmount)))
               (@label end-switch3)
               (return outcome)
               (@label end7)))
         (return (@tuple))
         (@label end))
