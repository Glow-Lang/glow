
{-# OPTIONS --cubical  #-}
module Glow.Simple.AST where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_) renaming (Bool to ùüö ; _‚âü_ to _‚âüB_)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )

open import Cubical.HITs.Interval

-- open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary renaming (¬¨_ to IsEmpty)
open import Cubical.Relation.Binary

open import Glow.Linked

open import Glow.DecEqMore

open import Glow.Simple.Postulates

open import Glow.ListDecProps

open import Cubical.Categories.Category

data GType : Type‚ÇÄ where
  Bool : GType 
  Int : GType
  Nat : GType
  Unit·µç : GType
  Digest : GType
  Signature : GType






-- GTy‚âü : Discrete GType
-- GTy‚âü x y = {!x y!}

GTy== : GType ‚Üí GType ‚Üí ùüö
GTy== Bool Bool = true
GTy== Int Int = true
GTy== Nat Nat = true
GTy== Unit·µç Unit·µç = true
GTy== Digest Digest = true
GTy== Signature Signature = true
GTy== _ _ = false



instance
  IsDiscrete-GType : IsDiscrete GType
  eqTest IsDiscrete-GType Bool Bool = yes refl
  eqTest IsDiscrete-GType Bool Int = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Bool Nat = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Bool Unit·µç = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Int Bool = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Int Int = yes refl
  eqTest IsDiscrete-GType Int Nat = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Int Unit·µç = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Nat Bool = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Nat Int = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Nat Nat = yes refl
  eqTest IsDiscrete-GType Nat Unit·µç = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Unit·µç Bool = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Unit·µç Int = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Unit·µç Nat = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Unit·µç Unit·µç = yes refl
  eqTest IsDiscrete-GType Digest Digest = yes refl
  eqTest IsDiscrete-GType Signature Signature = yes refl
  eqTest IsDiscrete-GType Bool Digest = no-dec-eq-help' GTy== _ 
  eqTest IsDiscrete-GType Bool Signature = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Int Digest = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Int Signature = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Nat Digest = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Nat Signature = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Unit·µç Digest = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Unit·µç Signature = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Digest Bool = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Digest Int = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Digest Nat = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Digest Unit·µç = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Digest Signature = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Signature Bool = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Signature Int = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Signature Nat = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Signature Unit·µç = no-dec-eq-help' GTy== _
  eqTest IsDiscrete-GType Signature Digest = no-dec-eq-help' GTy== _

GTypeAgdaRep : GType ‚Üí Type‚ÇÄ
GTypeAgdaRep Bool = ùüö
GTypeAgdaRep Int = ‚Ñ§
GTypeAgdaRep Nat = ‚Ñï
GTypeAgdaRep Unit·µç = Unit
GTypeAgdaRep Digest = Dig
GTypeAgdaRep Signature = Sig


isSet-GType : isSet GType
isSet-GType = Discrete‚ÜíisSet (IsDiscrete.eqTest IsDiscrete-GType)

record IsGlowTy (A : Type‚ÇÄ) : Type‚ÇÄ where
  field
    glowRep : GType
    -- glowRep-coh : A ‚â° GTypeAgdaRep glowRep
    cast : A ‚Üí GTypeAgdaRep glowRep
    isSet-A : isSet A
    
instance
  Bool-IsGlowTy : IsGlowTy ùüö
  Bool-IsGlowTy = record { glowRep = Bool ; cast = idfun _ ; isSet-A = isSetBool}

instance
  ‚Ñ§-IsGlowTy : IsGlowTy ‚Ñ§
  ‚Ñ§-IsGlowTy = record { glowRep = Int  ; cast = idfun _  ; isSet-A = isSet‚Ñ§}

instance
  ‚Ñï-IsGlowTy : IsGlowTy ‚Ñï
  ‚Ñï-IsGlowTy = record { glowRep = Nat  ; cast = idfun _  ; isSet-A = isSet‚Ñï}

instance
  Unit-IsGlowTy : IsGlowTy Unit
  Unit-IsGlowTy = record { glowRep = Unit·µç  ; cast = idfun _  ; isSet-A = Œª x y x‚ÇÅ y‚ÇÅ i i‚ÇÅ ‚Üí _}

instance
  Dig-IsGlowTy : IsGlowTy Dig
  Dig-IsGlowTy = record { glowRep = Digest  ; cast = idfun _  ; isSet-A = isSet-Dig}

instance
  Sig-IsGlowTy : IsGlowTy Sig
  Sig-IsGlowTy = record { glowRep = Signature  ; cast = idfun _  ; isSet-A = isSet-Sig}


GTypeAgdaRep' : (Œ§ : GType) ‚Üí IsGlowTy (GTypeAgdaRep Œ§) 
GTypeAgdaRep' Bool = Bool-IsGlowTy
GTypeAgdaRep' Int = ‚Ñ§-IsGlowTy
GTypeAgdaRep' Nat = ‚Ñï-IsGlowTy
GTypeAgdaRep' Unit·µç = Unit-IsGlowTy
GTypeAgdaRep' Digest = Dig-IsGlowTy
GTypeAgdaRep' Signature = Sig-IsGlowTy

record GlowValue : Type‚ÇÄ where
  field
    gType : GType
    gValue : GTypeAgdaRep gType
    


subst-GTypeAgdaRep : ‚àÄ {Œ§‚ÇÄ Œ§‚ÇÅ} ‚Üí Œ§‚ÇÄ ‚â° Œ§‚ÇÅ ‚Üí GTypeAgdaRep Œ§‚ÇÄ ‚Üí GTypeAgdaRep Œ§‚ÇÅ
subst-GTypeAgdaRep {Œ§‚ÇÄ} {Œ§‚ÇÅ} = h _ _ ‚àò fromWitness
  where
    h : ‚àÄ Œ§‚ÇÄ Œ§‚ÇÅ ‚Üí True (Œ§‚ÇÄ ‚âü Œ§‚ÇÅ) ‚Üí GTypeAgdaRep Œ§‚ÇÄ ‚Üí GTypeAgdaRep Œ§‚ÇÅ
    h Bool Bool tt = idfun _
    h Int Int tt = idfun _
    h Nat Nat tt = idfun _
    h Unit·µç Unit·µç tt = idfun _
    h Digest Digest tt = idfun _
    h Signature Signature tt = idfun _


-- data GFunType : Type‚ÇÄ where
--   _G‚Üí_ : List GType ‚Üí GType ‚Üí GFunType

argsV : List GType ‚Üí Type‚ÇÄ
argsV [] = Unit
argsV (x ‚à∑ x‚ÇÅ) = GTypeAgdaRep x √ó argsV x‚ÇÅ 


funV : List GType ‚Üí GType ‚Üí Type‚ÇÄ
funV [] x‚ÇÅ = GTypeAgdaRep x‚ÇÅ
funV (x ‚à∑ x‚ÇÇ) x‚ÇÅ = GTypeAgdaRep x ‚Üí funV x‚ÇÇ x‚ÇÅ

appV : ‚àÄ {dm cdm} ‚Üí funV dm cdm ‚Üí argsV dm ‚Üí GTypeAgdaRep cdm
appV {[]} x x‚ÇÅ = x
appV {x‚ÇÇ ‚à∑ dm} x (x‚ÇÅ , x‚ÇÉ) = appV (x x‚ÇÅ) x‚ÇÉ


module _ (BuilitInsIndex : Type‚ÇÄ) {{IsDiscrete-BuilitInsIndex : IsDiscrete BuilitInsIndex}} where
  record BuiltIn' (dm : List GType) (cdm : GType)  : Type‚ÇÄ where
    constructor builitIn
    field
      impl : funV dm cdm 

  record BuiltIns' : Type‚ÇÄ where
    field
      getBi : BuilitInsIndex ‚Üí Œ£ _ Œª x ‚Üí BuiltIn' (proj‚ÇÅ x) (proj‚ÇÇ x)



ParticipantModality : Type‚ÇÄ
ParticipantModality = ùüö

honest dishonest : ParticipantModality 
honest = true
dishonest = false


module _ (Identifier : Type‚ÇÄ) {{IsDiscrete-Identifier : IsDiscrete Identifier}}
           {BuilitInsIndex : Type‚ÇÄ} {{IsDiscrete-BuilitInsIndex : IsDiscrete BuilitInsIndex}}
              (builtIns : BuiltIns' BuilitInsIndex {{IsDiscrete-BuilitInsIndex}}) where

  module AST (prop-mode : Interval) where 

    open PropMode prop-mode

    BuiltIn = BuiltIn' BuilitInsIndex {{IsDiscrete-BuilitInsIndex}} 

    open BuiltIns' builtIns


    record BI‚ÇÄ (dm : List GType) (cdm : GType ) : Type‚ÇÄ where
      constructor bi'‚ÇÄ
      field
        bIndex : BuilitInsIndex
        {dm‚â°} : dm PM‚â° proj‚ÇÅ (fst (getBi bIndex))
        {cdm‚â°} : cdm PM‚â° proj‚ÇÇ (fst (getBi bIndex))


    record BI (cdm : GType ) : Type‚ÇÄ where
      constructor bi'
      field
        bIndex : BuilitInsIndex
        -- {dm‚â°} : dm PM‚â° proj‚ÇÅ (fst (getBi bIndex))
        {cdm‚â°} : cdm PM‚â° proj‚ÇÇ (fst (getBi bIndex))


    getBI-Dm : ‚àÄ {cdm} ‚Üí BI cdm ‚Üí List GType 
    getBI-Dm x = proj‚ÇÅ (fst (getBi (BI.bIndex x )))

    bi : (x : BuilitInsIndex) ‚Üí BI ((proj‚ÇÇ (fst (getBi x))))
    bi x = bi' x {toWitness'bck refl}

    isSetIdentifier = Discrete‚ÜíisSet (IsDiscrete.eqTest IsDiscrete-Identifier)


    record IdentifierWithType : Type‚ÇÄ where
      pattern
      constructor iwt
      field
        name : Identifier
        type : GType

    open IdentifierWithType

    instance
      IdentifierWithType-Discrete : IsDiscrete IdentifierWithType
      eqTest IdentifierWithType-Discrete x y =
        dec-rec ((x .name ‚â° y .name) √ó (x .type ‚â° y .type))

          (Œª x‚ÇÅ ‚Üí yes Œª i ‚Üí iwt (proj‚ÇÅ x‚ÇÅ i) (proj‚ÇÇ x‚ÇÅ i)) Œª x‚ÇÅ ‚Üí no Œª x‚ÇÇ ‚Üí x‚ÇÅ ((Œª i ‚Üí name (x‚ÇÇ i)) , (Œª i ‚Üí (type (x‚ÇÇ i))))

    isSet-IdentifierWithType : isSet IdentifierWithType
    isSet-IdentifierWithType = Discrete‚ÜíisSet (IsDiscrete.eqTest IdentifierWithType-Discrete)

    ParametersValue : List IdentifierWithType ‚Üí  Type‚ÇÄ
    ParametersValue [] = Unit
    ParametersValue (x ‚à∑ xs) = GTypeAgdaRep (type x) √ó ParametersValue xs

    lookup-ParametersValue : (l : List IdentifierWithType) ‚Üí ParametersValue l
                               ‚Üí (x : IdentifierWithType)
                               ‚Üí IsMemberOf x l 
                               ‚Üí GTypeAgdaRep (type x)
    lookup-ParametersValue (x‚ÇÉ ‚à∑ l) (x‚ÇÅ , x‚ÇÇ) x ex =
       dec-rec (x ‚â° x‚ÇÉ)
          (Œª p ‚Üí subst-GTypeAgdaRep (cong type (sym p)) x‚ÇÅ)
          (Œª ¬¨p ‚Üí lookup-ParametersValue l x‚ÇÇ x (ExistMemberAs-¬¨head‚Üítail ex ¬¨p)) -- ?

    IsParticipantId : {participants : List Identifier} ‚Üí Identifier ‚Üí DecPropŒ£ 
    IsParticipantId {participants} name =
        ExistMemberAs (name ‚â°_) participants
          , ?? _ , Is-Prop-ExistMemberAs _ _ (isSetIdentifier _)

    IsHonestParticipantId : {participants : List (Identifier √ó ParticipantModality)} ‚Üí Identifier ‚Üí DecPropŒ£ 
    IsHonestParticipantId {participants} name =
        let q : (Identifier √ó ParticipantModality) ‚Üí Œ£ Type (Œª x ‚Üí Dec x √ó isProp x)
            q = (Œª x ‚Üí (√ó-dp (name DP‚â° (proj‚ÇÅ x)) (honest DP‚â° (proj‚ÇÇ x)))  )
        in ExistMemberAs (Œª x ‚Üí fst (q x)  ) participants
              , Dec-ExistMemberAs {{dec-pred (Œª x ‚Üí proj‚ÇÅ (snd (q x)))}}
                , Is-Prop-ExistMemberAs _ _ (Œª x ‚Üí proj‚ÇÇ (snd (q x)))


    IsDishonestParticipantId : {participants : List (Identifier √ó ParticipantModality)} ‚Üí Identifier ‚Üí DecPropŒ£ 
    IsDishonestParticipantId {participants} name =
        let q : (Identifier √ó ParticipantModality) ‚Üí Œ£ Type (Œª x ‚Üí Dec x √ó isProp x)
            q = (Œª x ‚Üí (√ó-dp (name DP‚â° (proj‚ÇÅ x)) (dishonest DP‚â° (proj‚ÇÇ x)))  )
        in ExistMemberAs (Œª x ‚Üí fst (q x)  ) participants
              , Dec-ExistMemberAs {{dec-pred (Œª x ‚Üí proj‚ÇÅ (snd (q x)))}}
                , Is-Prop-ExistMemberAs _ _ (Œª x ‚Üí proj‚ÇÇ (snd (q x)))



    -- IsHonest : {participantsWH : List (Identifier √ó ParticipantModality)}
    --               ‚Üí (x : Identifier) ‚Üí PM ( IsParticipantId {map-List proj‚ÇÅ participantsWH} x )
    --               ‚Üí DecPropŒ£ 
    -- IsHonest x x‚ÇÅ = {!
    -- !}

    data ParticipantId' {participants : List Identifier} : Type‚ÇÄ where
      pId : (name : Identifier) ‚Üí {isIn :  PM ( IsParticipantId {participants} name ) } ‚Üí ParticipantId'

    data HonestParticipantId' {participants : List (Identifier √ó ParticipantModality)} : Type‚ÇÄ where
      pId : (name : Identifier) ‚Üí {isIn :  PM ( IsHonestParticipantId {participants} name ) } ‚Üí HonestParticipantId'

    data DishonestParticipantId' {participants : List (Identifier √ó ParticipantModality)} : Type‚ÇÄ where
      pId : (name : Identifier) ‚Üí {isIn :  PM ( IsDishonestParticipantId {participants} name ) } ‚Üí DishonestParticipantId'


    pId-name : ‚àÄ {ptps} ‚Üí ParticipantId' {ptps} ‚Üí Identifier
    pId-name (pId name‚ÇÅ) = name‚ÇÅ

    pId-nameHon : ‚àÄ {ptps} ‚Üí HonestParticipantId' {ptps} ‚Üí Identifier
    pId-nameHon (pId name‚ÇÅ) = name‚ÇÅ

    pId-isInHon : ‚àÄ {ptps} ‚Üí (hp : HonestParticipantId' {ptps}) ‚Üí PM ( IsHonestParticipantId {ptps} (pId-nameHon hp))
    pId-isInHon (pId _ {y}) = y
    
    pId-nameDishon : ‚àÄ {ptps} ‚Üí DishonestParticipantId' {ptps} ‚Üí Identifier
    pId-nameDishon (pId name‚ÇÅ) = name‚ÇÅ

    pId-isInDishon : ‚àÄ {ptps} ‚Üí (hp : DishonestParticipantId' {ptps}) ‚Üí PM ( IsDishonestParticipantId {ptps} (pId-nameDishon hp))
    pId-isInDishon (pId _ {y}) = y


    -- record ParticipantId' {participants : List Identifier} : Type‚ÇÄ where
    --   constructor pId

    --   field
    --     name : Identifier
    --     {isIn} : True (snd (IsParticipantId {participants} name))

    open ParticipantId' public


    Scope' : {participants : List (Identifier √ó ParticipantModality)} ‚Üí Type‚ÇÄ
    Scope' {participants} = Maybe (HonestParticipantId' {participants})

    _CanAccess_ : ‚àÄ {ps} ‚Üí Scope' {ps} ‚Üí Scope' {ps} ‚Üí DecPropŒ£
    _ CanAccess nothing = Unit , ?? _ , Œª x y i ‚Üí tt
    just x CanAccess just x‚ÇÅ = ((pId-nameHon x) DP‚â° (pId-nameHon x‚ÇÅ))
    nothing CanAccess just x‚ÇÅ = Empty , ?? _ , isProp‚ä•

    AllowedScopeNarrowing' : ‚àÄ {ps} ‚Üí Scope' {ps} ‚Üí Scope' {ps} ‚Üí DecPropŒ£
    AllowedScopeNarrowing' s nothing = Unit , yes _ , Œª x y i ‚Üí tt
    AllowedScopeNarrowing' s (just x) =
       caseMaybe
          Unit-dp
          Empty-dp
           s



    record ContextEntry' {participantsWM : List (Identifier √ó ParticipantModality)} : Type‚ÇÄ where
      constructor ice

      field
        scope : Scope' {participantsWM}
        name : Identifier
        type : GType




    open ContextEntry' public


    

    record InteractionHead : Type‚ÇÄ where
      constructor interactionHead
      -- inductive
      pattern
      field
        participantsWM : List (Identifier √ó ParticipantModality)
        parameters : List IdentifierWithType
        {uniqueParams} : PM (_ , UniqueByDec‚â° name parameters , isProp-UniqueBy _ _ )
        {uniquePtcpnts} : PM (_ , UniqueByDec‚â° proj‚ÇÅ participantsWM , isProp-UniqueBy _ _ )

      participants = map-List proj‚ÇÅ participantsWM



      ParticipantId : Type‚ÇÄ
      ParticipantId = ParticipantId' {participants}

      HonestParticipantId : Type‚ÇÄ
      HonestParticipantId = HonestParticipantId' {participantsWM}

      DishonestParticipantId : Type‚ÇÄ
      DishonestParticipantId = DishonestParticipantId' {participantsWM}


      DishonestParticipantId‚Üí‚Ñï : DishonestParticipantId ‚Üí ‚Ñï
      DishonestParticipantId‚Üí‚Ñï (pId _ {x}) = where?-ExistMemberAs (toWitness' x)


      Scope : Type‚ÇÄ
      Scope = Maybe HonestParticipantId

      ContextEntry = ContextEntry' {participantsWM}

      AType : ContextEntry ‚Üí Type‚ÇÄ
      AType ce = GTypeAgdaRep (ce .type)

      AhSet : ContextEntry ‚Üí hSet ‚Ñì-zero
      AhSet ce = GTypeAgdaRep (ce .type) , IsGlowTy.isSet-A (GTypeAgdaRep' (ce .type))

      ce-name : ContextEntry ‚Üí Identifier
      ce-name = ContextEntry'.name

      ce-scope : ContextEntry ‚Üí Scope 
      ce-scope = ContextEntry'.scope

      record Context : Type‚ÇÄ where
        pattern
        constructor con


        field
          entries : List ContextEntry

        field
          scope' : Scope



        IsDefinedVariableOfTy : GType ‚Üí Identifier ‚Üí DecPropŒ£
        IsDefinedVariableOfTy ty x =
          ExistFirstBy ((x ‚â°_) ‚àò name) 
             WitchIsAlso (Œª y ‚Üí ‚ü® scope' CanAccess (scope y) ‚ü© √ó (ty ‚â° type y) ) entries
           , Dec-ExistFirstBy_WitchIsAlso {{Dec-Pred-B' = dec-pred Œª y ‚Üí √ó-Dec {{proj‚ÇÅ (snd (scope' CanAccess (scope y)))}}}}
              , ExistFirstBy-WitchIsAlso-isProp _ (Œª x‚ÇÅ ‚Üí isSetIdentifier _ _)
                   Œª y _ _ ‚Üí √ó‚â° (proj‚ÇÇ (snd (scope' CanAccess (scope y))) _ _) (isSet-GType _ _ _ _)  

        IsNotShadowedParamOfTy : GType ‚Üí Identifier ‚Üí Type ‚Ñì-zero
        IsNotShadowedParamOfTy ty x =
           IsEmpty (ExistMemberAs ((x ‚â°_) ‚àò name) entries)
              √ó IsMemberOf (iwt x ty) parameters      


        IsDefinedSymbolOfTy : GType ‚Üí Identifier ‚Üí DecPropŒ£
        IsDefinedSymbolOfTy ty x = 
          ‚ü® IsDefinedVariableOfTy ty x ‚ü© ‚äé IsNotShadowedParamOfTy ty x ,
            ‚äé-Dec {{proj‚ÇÅ  (snd ((IsDefinedVariableOfTy ty x))) }} ,
              ‚äé-isProp (proj‚ÇÇ  (snd ((IsDefinedVariableOfTy ty x)))) 
                       (Œª x‚ÇÅ y ‚Üí √ó‚â° (isProp¬¨ _ _ _) (Is-Prop-ExistMemberAs _ _ (Œª x‚ÇÇ x‚ÇÉ y‚ÇÅ ‚Üí isSet-IdentifierWithType _ _ _ _) _ _))
                Œª x‚ÇÅ x‚ÇÇ ‚Üí proj‚ÇÅ x‚ÇÇ (ExistFirstByWitchIsAlso‚ÜíExistMemberAs _ x‚ÇÅ)


        data DefinedSymbolOfTy (Œ§ : GType) : Type ‚Ñì-zero where
          dsot : (name : Identifier) ‚Üí {isDefinedSymbolOfTy : PM ( IsDefinedSymbolOfTy Œ§ name ) } ‚Üí DefinedSymbolOfTy Œ§

        open DefinedSymbolOfTy public


        IsPrivateSymbolOf : HonestParticipantId ‚Üí Identifier ‚Üí DecPropŒ£
        IsPrivateSymbolOf p x = 
           ExistFirstBy ((x ‚â°_) ‚àò name)
              WitchIsAlso (Œª y ‚Üí recMaybe Empty (Œª p' ‚Üí (pId-nameHon p) ‚â° (pId-nameHon p')) (scope y)) entries
             , Dec-ExistFirstBy_WitchIsAlso {{Dec-Pred-B' = Dec-Pred-Maybe {f = scope}}}
               , ExistFirstBy-WitchIsAlso-isProp _ (Œª x‚ÇÅ ‚Üí isSetIdentifier _ _)
                  Œª y ‚Üí recMaybe-Empty-isProp ((Œª x‚ÇÅ ‚Üí isSetIdentifier _ _)) (scope y)

        data PrivateSymbolOf (p : HonestParticipantId) : Type ‚Ñì-zero where
          psof : (name : Identifier) ‚Üí {isDefinedSymbolOf : PM ( IsPrivateSymbolOf p name ) } ‚Üí PrivateSymbolOf p 

        psof-name : ‚àÄ {p} ‚Üí PrivateSymbolOf p ‚Üí Identifier
        psof-name (psof x) = x 

        psof-proof : ‚àÄ {p} ‚Üí (pso : PrivateSymbolOf p) ‚Üí PM ( IsPrivateSymbolOf p (psof-name pso) )
        psof-proof (psof x {y}) = y 



        open PrivateSymbolOf public



        IsConsensus : DecPropŒ£
        IsConsensus = caseMaybe (Unit , yes _ , Œª x y i ‚Üí tt ) (Empty , no (idfun _) , isProp‚ä•) scope'

        IsNotConsensus : DecPropŒ£
        IsNotConsensus = caseMaybe (Empty , no (idfun _) , isProp‚ä• ) (Unit , yes _ , Œª x y i ‚Üí tt)  scope'




      open Context public

      postulate isSet-Context : isSet Context
      -- isSet-Context (con entries‚ÇÅ scope'') (con entries‚ÇÅ* scope''*) p q i i‚ÇÅ =
      --    con (isOfHLevelList 0 {!!} _ _ (cong entries p) (cong entries q) i i‚ÇÅ )
      --        (isOfHLevelMaybe 0 {!!} _ _ (cong scope' p) (cong scope' q) i i‚ÇÅ)


      IsPrivateSymbolOf‚ÜíGType : (Œì : Context) ‚Üí ‚àÄ hp ‚Üí ‚àÄ nm
                         ‚Üí ‚ü® IsPrivateSymbolOf Œì hp nm ‚ü© ‚Üí GType
      IsPrivateSymbolOf‚ÜíGType (con (ice scope name type ‚à∑ entries‚ÇÅ) scope'') hp nm (inl x) = type
      IsPrivateSymbolOf‚ÜíGType (con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') hp nm (inr x) =
        IsPrivateSymbolOf‚ÜíGType (con (entries‚ÇÅ) scope'') hp nm (proj‚ÇÇ x)



      IsNotConsensus‚ÜíParticipant : ‚àÄ {Œì} ‚Üí PM (IsNotConsensus Œì) ‚Üí HonestParticipantId
      IsNotConsensus‚ÜíParticipant {con entries‚ÇÅ nothing} x = empty-elim (toWitness' x)
      IsNotConsensus‚ÜíParticipant {con entries‚ÇÅ (just x‚ÇÅ)} x = x‚ÇÅ


      -- context-< : Context ‚Üí ‚Ñï ‚Üí Type‚ÇÄ 
      -- context-< x x‚ÇÅ = {!!}

      emptyContext : Context
      emptyContext = con [] nothing

      prependContext : ContextEntry ‚Üí Context ‚Üí  Context
      prependContext x Œì = record Œì { entries =   Œì .entries ‚à∑ ≥ x } 

      addToContext : Context ‚Üí ContextEntry ‚Üí Context
      addToContext Œì x = record Œì { entries =  x ‚à∑ Œì .entries } 


      removeFromContext' : ‚àÄ (Œì : _) ‚Üí ‚àÄ s ‚Üí ‚àÄ Œ§ ‚Üí ‚ü® IsDefinedVariableOfTy Œì Œ§ s ‚ü© ‚Üí List ContextEntry
      removeFromContext' (con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') s Œ§ (inl x) = entries‚ÇÅ
      removeFromContext' (con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') s Œ§ (inr x) =  (x‚ÇÅ ‚à∑ removeFromContext' (con (entries‚ÇÅ) scope'') s Œ§ (proj‚ÇÇ x) )

      removeFromContext : ‚àÄ (Œì : _) ‚Üí ‚àÄ s ‚Üí ‚àÄ Œ§ ‚Üí ‚ü® IsDefinedVariableOfTy Œì Œ§ s ‚ü© ‚Üí Context
      removeFromContext Œì s Œ§ x = record Œì { entries =  removeFromContext' Œì s Œ§ x } 


      AllowedScopeNarrowing : (Œì : Context) ‚Üí Scope ‚Üí DecPropŒ£
      AllowedScopeNarrowing Œì = AllowedScopeNarrowing' (scope' Œì) 


      narrowScope : (Œì : Context) ‚Üí (s : Scope)  ‚Üí PM (AllowedScopeNarrowing Œì s) ‚Üí Scope
      narrowScope Œì s _ = caseMaybe s (scope' Œì) (Œì .scope') 

      narrow : (Œì : Context) ‚Üí (s : Scope)  ‚Üí (PM  (AllowedScopeNarrowing Œì s) ) ‚Üí Context
      narrow Œì a x = record Œì { scope' = narrowScope Œì a x }

      -- TODO : put type annotations in special additional , parametrized field
      module Unsafe where


        data Stmnt : Type‚ÇÄ

        data BStmnt : Type‚ÇÄ


        data NBStmnt : Type‚ÇÄ

        data NBStmnt+Expr : Type‚ÇÄ

        data Expr : Type‚ÇÄ

        data Arg : Type‚ÇÄ

        Args = List Arg


        record Body : Type‚ÇÄ where
          pattern
          inductive
          constructor bodyR
          field
            stmnts : List (Stmnt)
            expr : Expr

        open Body public

        data Arg where
          var-a : Identifier ‚Üí Arg
          lit-a : GlowValue ‚Üí Arg


        data Expr where
          var : GType ‚Üí Identifier ‚Üí Expr
          body : Body ‚Üí Expr
          lit : GlowValue ‚Üí Expr
          _$'_ : BuilitInsIndex ‚Üí Args ‚Üí Expr
          input : GType ‚Üí String ‚Üí Expr
          sign : Arg ‚Üí Expr 


          -- -- this is temporary solution, this constructors cannot apear in code, and are introduced on some passes, this distinction must be typesafe in the future! 
          receivePublished : GType ‚Üí DishonestParticipantId ‚Üí  Expr

          if_then_else_ : Expr ‚Üí Expr ‚Üí Expr ‚Üí Expr

        data Stmnt where
          -- -- not necessary binding, but rather context changing
          bindingS : BStmnt ‚Üí Stmnt
          nonBindingS : NBStmnt+Expr ‚Üí Stmnt

        data BStmnt where
          BS-let : Maybe HonestParticipantId ‚Üí Identifier ‚Üí GType ‚Üí Expr ‚Üí BStmnt    
          BS-publish! : HonestParticipantId ‚Üí GType ‚Üí Identifier ‚Üí  BStmnt

        data NBStmnt where
          NBS-require! : Expr ‚Üí NBStmnt
          NBS-deposit! : ParticipantId ‚Üí Expr ‚Üí NBStmnt
          NBS-withdraw! : ParticipantId ‚Üí Expr ‚Üí NBStmnt
          -- this is temporary solution, this constructors cannot apear in code, and are introduced on some passes, this distinction must be typesafe in the future!

          NBS-publishVal! : HonestParticipantId ‚Üí Identifier ‚Üí NBStmnt

        data NBStmnt+Expr where
          stmntNBS : NBStmnt ‚Üí NBStmnt+Expr
          exprNBS : Expr ‚Üí NBStmnt+Expr

        Œ§? : Expr ‚Üí GType
        Œ§? (var x x‚ÇÅ) = x
        Œ§? (body (bodyR _ e)) = Œ§? e
        Œ§? (lit record { gType = gType ; gValue = gValue }) = gType
        Œ§? (x $' x‚ÇÅ) = proj‚ÇÇ (fst (getBi x))
        Œ§? (input x x‚ÇÅ) = x
        Œ§? (sign x) = Signature
        Œ§? (receivePublished x x‚ÇÅ) = x
        Œ§? (if x then x‚ÇÅ else x‚ÇÇ) = Œ§? x‚ÇÅ

      data Stmnt (Œì : Context) : Type‚ÇÄ

      data BStmnt (Œì : Context) : Type‚ÇÄ


      data NBStmnt (Œì : Context) : Type‚ÇÄ

      data NBStmnt+Expr (Œì : Context) : Type‚ÇÄ

      data Expr (Œì : Context) (Œ§ : GType): Type‚ÇÄ

      data Arg (Œì : Context) (Œ§ : GType): Type‚ÇÄ

      Args : (Œì : Context) (Œ§s : List GType) ‚Üí Type‚ÇÄ


      bindingMechanics : {Œì : Context} ‚Üí BStmnt Œì ‚Üí List ContextEntry 

      bindingMechanics' : (Œì : Context) ‚Üí Stmnt Œì ‚Üí Context 


      record Body (Œì : _) (Œ§ : _ ) : Type‚ÇÄ where
        pattern
        inductive
        constructor bodyR
        field
          stmnts : Linked' bindingMechanics' Œì
          expr : Expr (foldLinked' stmnts) Œ§

      open Body public

      data Arg Œì Œ§ where
        var-a : DefinedSymbolOfTy Œì Œ§ ‚Üí Arg Œì Œ§
        lit-a : GTypeAgdaRep Œ§ ‚Üí Arg Œì Œ§


      data Expr Œì Œ§ where
        var : DefinedSymbolOfTy Œì Œ§ ‚Üí Expr Œì Œ§
        body : Body Œì Œ§ ‚Üí Expr Œì Œ§
        lit : GTypeAgdaRep Œ§ ‚Üí Expr Œì Œ§
        _$'_ : (x : BI Œ§) ‚Üí Args Œì (getBI-Dm x) ‚Üí Expr Œì Œ§
        input : String ‚Üí {_ : PM (IsNotConsensus Œì) } ‚Üí Expr Œì Œ§
        sign : Arg Œì Digest ‚Üí {_ : PM (IsNotConsensus Œì) } ‚Üí {_ : Signature PM‚â° Œ§} ‚Üí Expr Œì Œ§
        

        -- this is temporary solution, this constructors cannot apear in code, and are introduced on some passes, this distinction must be typesafe in the future! 
        receivePublished : DishonestParticipantId ‚Üí {_ : PM (IsConsensus Œì) } ‚Üí Expr Œì Œ§

        if_then_else_ : Expr Œì Bool ‚Üí Expr Œì Œ§ ‚Üí Expr Œì Œ§ ‚Üí Expr Œì Œ§

      data Stmnt Œì where
        -- not necessary binding, but rather context changing
        bindingS : BStmnt Œì ‚Üí Stmnt Œì
        nonBindingS : NBStmnt+Expr Œì ‚Üí Stmnt Œì

      data BStmnt Œì where
                      -- warning: scope in "ce" is interpreted in unusual way!
                      -- (TODO : consider speical type here)
        BS-let : (ce : ContextEntry) ‚Üí {asn : PM  (AllowedScopeNarrowing Œì (scope ce) )}
                    ‚Üí Expr (narrow Œì (scope ce) asn) (type ce) ‚Üí BStmnt Œì    
        BS-publish! : (p : HonestParticipantId) ‚Üí (PrivateSymbolOf Œì p)
                               ‚Üí {_ : PM ( IsConsensus Œì ) } ‚Üí  BStmnt Œì

      data NBStmnt Œì where
        NBS-require! : Expr Œì Bool ‚Üí NBStmnt Œì
        NBS-deposit! : ParticipantId ‚Üí Expr Œì Nat ‚Üí NBStmnt Œì
        NBS-withdraw! : ParticipantId ‚Üí Expr Œì Nat ‚Üí NBStmnt Œì
        -- this is temporary solution, this constructors cannot apear in code, and are introduced on some passes, this distinction must be typesafe in the future!
        
        NBS-publishVal! : HonestParticipantId ‚Üí Identifier ‚Üí NBStmnt Œì

      data NBStmnt+Expr Œì where
        stmntNBS : NBStmnt Œì ‚Üí {_ : PM ( IsConsensus Œì ) } ‚Üí  NBStmnt+Expr Œì
        exprNBS : ‚àÄ {Œ§} ‚Üí Expr Œì Œ§ ‚Üí NBStmnt+Expr Œì

      Args Œì [] = Unit
      Args Œì (x ‚à∑ []) = Arg Œì x
      Args Œì (x ‚à∑ x‚ÇÅ ‚à∑ Œ§s) = Arg Œì x √ó Args Œì (x‚ÇÅ ‚à∑ Œ§s)

      data CtxChange (Œì : _) : Type‚ÇÄ where
                      -- warning: scope in "ce" is interpreted in unusual way!
                      -- (TODO : consider speical type here)
        CC-extend : (ce : ContextEntry) ‚Üí (asn : PM  (AllowedScopeNarrowing Œì (scope ce) ))  ‚Üí CtxChange Œì    
        CC-makePublic : (p : HonestParticipantId) ‚Üí (PrivateSymbolOf Œì p)
                               ‚Üí (PM ( IsConsensus Œì ) ) ‚Üí CtxChange Œì 

      -- postulate ctxChange : ‚àÄ Œì ‚Üí CtxChange Œì ‚Üí Context
      -- ctxChange = {!!}

      bindingMechanics {Œì} (BS-let ce _) = ce ‚à∑ Œì .entries
      bindingMechanics {Œì} (BS-publish! p x) = 
        map-ExistingFirstBy _ WitchIsAlso _ (Œì .entries) (toWitness' (psof-proof _ x)) 
           Œª e _ _ ‚Üí record e { scope = nothing }  

      -- redefine to be triviialy indepontent on scope' field
      bindingMechanics' Œì (bindingS x) = record Œì { entries =  bindingMechanics x } 
      bindingMechanics' Œì (nonBindingS x) = Œì

      Statements : Context ‚Üí Type‚ÇÄ
      Statements Œì = Linked' bindingMechanics' Œì

      -- Expr-eq? : ‚àÄ Œì Œ§ ‚Üí (x y : Expr Œì Œ§) ‚Üí Dec (x ‚â° y) 
      -- Expr-eq? Œì Œ§ (var (dsot x {x'})) (var (dsot y {y'})) = 
      --   dec-rec (x ‚â° y)
      --     (Œª p ‚Üí   let q = True-Pa {A = Œª i‚ÇÅ ‚Üí (fst (IsDefinedSymbolOfTy Œì Œ§ (p i‚ÇÅ)))} {(Œª i‚ÇÅ ‚Üí (snd (IsDefinedSymbolOfTy Œì Œ§ (p i‚ÇÅ))))} {x'} {y'}
      --              in yes Œª i ‚Üí (var (dsot (p i) {{!!}})))
      --     {!!} 

      -- Expr-eq? Œì Œ§ (var x) (body x‚ÇÅ) = {!!}
      -- Expr-eq? Œì Œ§ (var x) (lit x‚ÇÅ) = {!!}
      -- Expr-eq? Œì Œ§ (body x) (var x‚ÇÅ) = {!!}
      -- Expr-eq? Œì Œ§ (body x) (body x‚ÇÅ) = {!!}
      -- Expr-eq? Œì Œ§ (body x) (lit x‚ÇÅ) = {!!}
      -- Expr-eq? Œì Œ§ (lit x) (var x‚ÇÅ) = {!!}
      -- Expr-eq? Œì Œ§ (lit x) (body x‚ÇÅ) = {!!}
      -- Expr-eq? Œì Œ§ (lit x) (lit x‚ÇÅ) = {!!}

      blankStmnt : ‚àÄ {Œì} ‚Üí Stmnt Œì
      blankStmnt = nonBindingS (exprNBS (lit tt))

      IsPureE : ‚àÄ {Œì Œ§} ‚Üí Expr Œì Œ§ ‚Üí DecPropŒ£ 

      IsPureS : ‚àÄ {Œì} ‚Üí Stmnt Œì ‚Üí DecPropŒ£

      IsPureStmnts : ‚àÄ {Œì} ‚Üí Statements Œì ‚Üí DecPropŒ£ 


      IsPureE (var x) = Unit-dp
      IsPureE (_$'_ _ _) = Unit-dp
      IsPureE (body (bodyR stmnts‚ÇÅ expr‚ÇÅ)) =
         (√ó-dp (IsPureStmnts stmnts‚ÇÅ) (IsPureE expr‚ÇÅ))
      IsPureE (lit x) = Unit-dp
      IsPureE (input x) = Empty-dp
      IsPureE (receivePublished _) = Empty-dp
      IsPureE (if x then x‚ÇÅ else x‚ÇÇ) = √ó-dp (IsPureE x) (√ó-dp (IsPureE x‚ÇÅ) (IsPureE x‚ÇÇ))
      IsPureE (sign q) = Unit-dp

      IsPureS (bindingS (BS-let ce x)) = (IsPureE x)
      IsPureS (bindingS (BS-publish! p x)) = Empty-dp
      IsPureS (nonBindingS (stmntNBS x)) = Empty-dp
      IsPureS (nonBindingS (exprNBS x)) = (IsPureE x)

      IsPureStmnts []L = Unit-dp
      IsPureStmnts (h ‚à∑L x) = √ó-dp (IsPureS h) (IsPureStmnts x)

      postulate isSet-Stmnt : (c : Context) ‚Üí isSet (Stmnt c)


      STMNTS : Category ‚Ñì-zero ‚Ñì-zero
      STMNTS = FreeCategory' bindingMechanics' isSet-Context isSet-Stmnt

      module ToUnsafe where
        module U = Unsafe

        exprF : ‚àÄ {Œì Œ§} ‚Üí Expr Œì Œ§ ‚Üí U.Expr
        bodyF : ‚àÄ {Œì Œ§} ‚Üí Body Œì Œ§ ‚Üí U.Body
        stmntF : ‚àÄ {Œì} ‚Üí Stmnt Œì ‚Üí U.Stmnt
        argsF : ‚àÄ {Œì S} ‚Üí Args Œì S ‚Üí U.Args
        argF : ‚àÄ {Œì Œ§} ‚Üí Arg Œì Œ§ ‚Üí U.Arg  
       

        exprF {Œ§ = Œ§} (var (dsot name‚ÇÅ)) = U.var Œ§ name‚ÇÅ
        exprF (body b) = (U.body (bodyF b))
        exprF (lit x) = U.lit (record { gType = _ ; gValue = x })
        exprF (bi' bIndex $' x‚ÇÅ) = bIndex U.$' argsF x‚ÇÅ
        exprF {Œ§ = Œ§} (input x) = U.input Œ§ x
        exprF (sign x) = U.sign (argF x)
        exprF {Œ§ = Œ§} (receivePublished p) = U.receivePublished Œ§ p
        exprF (if x then x‚ÇÅ else x‚ÇÇ) = U.if exprF x then exprF x‚ÇÅ else exprF x‚ÇÇ
        
        stmntF (bindingS (BS-let (ice scope‚ÇÅ name‚ÇÅ type‚ÇÅ) x)) = 
              U.bindingS (U.BS-let scope‚ÇÅ name‚ÇÅ type‚ÇÅ (exprF x))

        stmntF {Œì} (bindingS (BS-publish! p x@(psof name‚ÇÇ {y}))) = 
               U.bindingS (U.BS-publish! p (IsPrivateSymbolOf‚ÜíGType Œì p _ (toWitness' y) ) name‚ÇÇ) 
        stmntF (nonBindingS (stmntNBS x)) = (U.nonBindingS (U.stmntNBS (h x)))
           where
             h : NBStmnt _ ‚Üí U.NBStmnt
             h (NBS-require! x) = U.NBS-require! (exprF x)
             h (NBS-deposit! p x‚ÇÅ) = U.NBS-deposit! p (exprF x‚ÇÅ)
             h (NBS-withdraw! p x‚ÇÅ) = U.NBS-withdraw! p (exprF x‚ÇÅ)
             h (NBS-publishVal! p x‚ÇÅ) = U.NBS-publishVal! p x‚ÇÅ
             
        stmntF (nonBindingS (exprNBS x)) = (U.nonBindingS (U.exprNBS (exprF x)))

        bodyF (bodyR []L expr‚ÇÅ) = U.bodyR [] (exprF expr‚ÇÅ)
        bodyF (bodyR (h ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ) =
           let U.bodyR xs e = bodyF (bodyR (stmnts‚ÇÅ) expr‚ÇÅ)
           in  U.bodyR (stmntF h ‚à∑ xs) e 

        argF (var-a (dsot name‚ÇÅ)) = U.var-a name‚ÇÅ
        argF (lit-a x) = U.lit-a (record { gType = _ ; gValue = x })
        
        argsF {S = []} x = []
        argsF {S = _ ‚à∑ []} x = [ argF x ]
        argsF {S = _ ‚à∑ _ ‚à∑ _} x = argF (proj‚ÇÅ x) ‚à∑ argsF (proj‚ÇÇ x)

        stmntsF : ‚àÄ {Œì} ‚Üí Statements Œì ‚Üí List U.Stmnt
        stmntsF []L = []
        stmntsF (h ‚à∑L x) = stmntF h ‚à∑ stmntsF x

 
    toParamValue : ‚àÄ (l : List IdentifierWithType)  ‚Üí ParametersValue l ‚Üí
                   ‚àÄ Œ§ s ‚Üí 
                   IsMemberOf (iwt s Œ§) l ‚Üí
                   GTypeAgdaRep Œ§
    toParamValue (x‚ÇÇ ‚à∑ l) (x , xs) Œ§ s (inl p) = subst-GTypeAgdaRep (cong type (sym p)) x -- 
    toParamValue (x‚ÇÇ ‚à∑ l) (x , xs) Œ§ s (inr (_ , x‚ÇÅ)) = (toParamValue l xs Œ§ s x‚ÇÅ) --

    InteractionHead‚â° : {ih‚ÇÄ ih‚ÇÅ : InteractionHead}
                          ‚Üí InteractionHead.participantsWM ih‚ÇÄ ‚â° InteractionHead.participantsWM ih‚ÇÅ 
                          ‚Üí InteractionHead.parameters ih‚ÇÄ ‚â° InteractionHead.parameters ih‚ÇÅ
                          ‚Üí ih‚ÇÄ ‚â° ih‚ÇÅ
    InteractionHead.participantsWM (InteractionHead‚â° x x‚ÇÅ i) = x i
    InteractionHead.parameters (InteractionHead‚â° x x‚ÇÅ i) = x‚ÇÅ i
    InteractionHead.uniqueParams (InteractionHead‚â° {ih‚ÇÄ} {ih‚ÇÅ} x x‚ÇÅ i) =
       isOfHLevel‚ÜíisOfHLevelDep 1 (Œª _ ‚Üí isProp-PM) (InteractionHead.uniqueParams ih‚ÇÄ) (InteractionHead.uniqueParams ih‚ÇÅ) x‚ÇÅ i
    InteractionHead.uniquePtcpnts (InteractionHead‚â° {ih‚ÇÄ} {ih‚ÇÅ} x x‚ÇÅ i) =
       isOfHLevel‚ÜíisOfHLevelDep 1 (Œª _ ‚Üí isProp-PM) (InteractionHead.uniquePtcpnts ih‚ÇÄ) (InteractionHead.uniquePtcpnts ih‚ÇÅ) x i

    fixProofs : ‚àÄ {‚Ñì} {ih‚ÇÄ ih‚ÇÅ : InteractionHead}
                ‚Üí (A : InteractionHead ‚Üí Type ‚Ñì)
                ‚Üí _ ‚Üí _
                ‚Üí A ih‚ÇÄ ‚Üí A ih‚ÇÅ
    fixProofs A x y = subst A (InteractionHead‚â° x y)

    fixProofs' : ‚àÄ {‚Ñì} {ptps : _} {params : _} ‚Üí 
                       ‚àÄ {p‚ÇÄ p‚ÇÅ p‚ÇÇ p‚ÇÉ}
                ‚Üí (A : InteractionHead ‚Üí Type ‚Ñì)
                ‚Üí A (interactionHead ptps params {p‚ÇÄ} {p‚ÇÅ})
                ‚Üí A (interactionHead ptps params {p‚ÇÇ} {p‚ÇÉ})
    fixProofs' A = subst A (InteractionHead‚â° refl refl)


    record Interaction : Type‚ÇÄ where
      -- pattern
      constructor interaction
      field
        head : InteractionHead

      open InteractionHead head public

      field
        code : Linked' bindingMechanics' emptyContext 

    open InteractionHead public

    -- open Interaction public

    infixl 6 interaction‚ü®_,_‚ü©_
    infixr 50 _‚à∂_ 

    infixr 10 _Õæb_
    infixr 15 _Õæ_
    infix 17 _Õæ‚ÇÅ
    infixr 15 _Õæ'_

    infix 30 set_‚à∂_‚âî_
    infix 30 at_set_‚à∂_‚âî_


    infix 60 <_>

    infix 40 _$_


    pattern interaction‚ü®_,_‚ü©_ prts prms stmnts = interaction (interactionHead prts prms ) stmnts

    pattern _$_ x y =  bi' x $' y


    pattern _‚à∂_ x y = iwt x y 

    pattern _Õæ_ x y = _‚à∑L_ x y


    pattern _Õæ‚ÇÅ x = x Õæ []L  

    pattern _Õæ'_ x y = x Õæ y Õæ‚ÇÅ  

    pattern set_‚à∂_‚âî_ x y z =
      bindingS (BS-let (ice nothing x y) z)

    pattern at_set_‚à∂_‚âî_ p x y z =
      bindingS
         (BS-let (ice (just (pId p)) x y) z)

    pattern publish!_‚ü∂_ x y = bindingS (BS-publish! (pId x) (psof y))

    pattern deposit!_‚ü∂_ x y = nonBindingS (stmntNBS (NBS-deposit! (pId x) y))

    pattern withdraw!_‚üµ_ x y = nonBindingS (stmntNBS (NBS-withdraw! (pId x) y))

    pattern require!_ x = nonBindingS (stmntNBS (NBS-require! x))


    <_> : ‚àÄ {IH Œì} ‚Üí {A : Type‚ÇÄ} ‚Üí ‚¶É isGlowTy : IsGlowTy A ‚¶Ñ ‚Üí
             A ‚Üí  Expr IH Œì (IsGlowTy.glowRep isGlowTy)
    <_> {IH} {Œì} {A} ‚¶É isGlowTy ‚¶Ñ x = lit (IsGlowTy.cast isGlowTy x)

    pattern _Õæb_ x y = body (bodyR x y)  

    infixr 60 v_

    pattern v_ x = var (dsot x)
    pattern va_ x = var-a (dsot x)

  open AST

  toProofs : Interaction zero  ‚Üí
                Interaction one
  toProofs = transport (Œª i ‚Üí Interaction (seg i))

  toProofsE : ‚àÄ {Œ§} ‚Üí Œ£[ ih ‚àà InteractionHead zero ] Œ£[ Œì ‚àà _ ] Expr {prop-mode = zero} ih Œì Œ§
                    ‚Üí Œ£[ ih ‚àà InteractionHead one ] Œ£[ Œì ‚àà _ ] Expr {prop-mode = one} ih Œì Œ§ 
  toProofsE {Œ§} = transport (Œª i ‚Üí Œ£[ ih ‚àà InteractionHead (seg i) ] Œ£[ Œì ‚àà _ ] Expr {prop-mode = (seg i)} ih Œì Œ§)


  fromProofs : Interaction one  ‚Üí
                Interaction zero
  fromProofs = transport (Œª i ‚Üí Interaction (seg (~ i)))

  


    





