
{-# OPTIONS --cubical  #-}
module Glow.Simple.ContextMore where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum renaming (elim to sum-elim)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.DecEqMore

open import Glow.Simple.AST

module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}} where


  -- open AST Identifier

  module _ {ptps : List Identifier} where
  
    open AST.InteractionHead (AST.interactionHead ptps [])

    {-# TERMINATING #-}
    Subst' : List ContextEntry ‚Üí Type‚ÇÄ
    Subst' [] = Empty
    Subst' (x ‚à∑ x‚ÇÅ) = AType x ‚äé Subst' x‚ÇÅ 


    Subst : Context ‚Üí Type‚ÇÄ
    Subst = Subst' ‚àò entries 

    remSubst' : ‚àÄ l ‚Üí Subst' l ‚Üí List ContextEntry
    remSubst' (x‚ÇÅ ‚à∑ l) (inl x) = (fst (FilterOut (((ce-name x‚ÇÅ) ‚â°_) ‚àò ce-name) l))
    remSubst' (x‚ÇÅ ‚à∑ l) (inr x) = x‚ÇÅ ‚à∑ remSubst' l x

    remSubst : ‚àÄ Œì ‚Üí Subst Œì ‚Üí Context
    remSubst Œì x = record Œì { entries = remSubst' (Œì .entries) x }



    {-# TERMINATING #-}
    Rec' : List ContextEntry ‚Üí Type‚ÇÄ
    Rec' [] = Unit
    Rec' (x ‚à∑ x‚ÇÅ) = AType x √ó Rec' (fst (FilterOut (((ce-name x) ‚â°_) ‚àò ce-name) x‚ÇÅ))

    Rec : Context ‚Üí Type‚ÇÄ
    Rec = Rec' ‚àò entries 

    Statement* : ‚àÄ { B : Context ‚Üí Type‚ÇÄ } ‚Üí Œ£ Context B ‚Üí Type‚ÇÄ
    Statement* = Stmnt ‚àò fst

    -- data IOs : Type‚ÇÄ where
    --   inputBy : IOs
    --   timedOutInput

    -- toConsensusCodeStmnt : ‚àÄ {s} ‚Üí Stmnt (con [] s) ‚Üí Stmnt emptyContext
    -- toConsensusCodeStmnt {nothing} x = x
    -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.bindingS x) = {!!}
    -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! x))) = (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! {!!})))
    -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.nonBindingS (AST.exprNBS x)) = {!!}


    publish-substlemma : {c : Context} (r : Subst c)
                       (p : AST.ParticipantId (AST.interactionHead ptps parameters))
                       (x : AST.PrivateSymbolOf c p)
                       {z : True (snd (AST.IsConsensus c))} ‚Üí
                     Subst (bindingMechanics' c (bindingS (BS-publish! p x {z})))
    publish-substlemma {AST.con (AST.ice nothing name‚ÇÅ type ‚à∑ entries‚ÇÅ) nothing} r p (AST.psof name {q}) with toWitness
    publish-substlemma {AST.con (AST.ice (just x) name‚ÇÅ type ‚à∑ entries‚ÇÅ) nothing} r p (AST.psof name {q}) = {!!}
