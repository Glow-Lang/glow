
{-# OPTIONS --cubical  #-}
module Glow.Simple.ContextMore where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.DecEqMore

open import Glow.Simple.AST



module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}} where

  prop-mode = true
  
  -- open AST Identifier prop-mode

  open PropMode prop-mode 

  -- open AST Identifier

  module _ {ptps : List Identifier} where
  
    open AST.InteractionHead {prop-mode = prop-mode} (AST.interactionHead ptps []) 

    {-# TERMINATING #-}
    Subst' : List ContextEntry ‚Üí Type‚ÇÄ
    Subst' [] = Empty
    Subst' (x ‚à∑ x‚ÇÅ) = AType x ‚äé Subst' x‚ÇÅ 


    Subst : Context ‚Üí Type‚ÇÄ
    Subst = Subst' ‚àò entries 

    remSubst' : ‚àÄ l ‚Üí Subst' l ‚Üí List ContextEntry
    remSubst' (x‚ÇÅ ‚à∑ l) (inl x) = (fst (FilterOut (((ce-name x‚ÇÅ) ‚â°_) ‚àò ce-name) l))
    remSubst' (x‚ÇÅ ‚à∑ l) (inr x) = x‚ÇÅ ‚à∑ remSubst' l x

    remSubst : ‚àÄ Œì ‚Üí Subst Œì ‚Üí Context
    remSubst Œì x = record Œì { entries = remSubst' (Œì .entries) x }



    {-# TERMINATING #-}
    Rec' : List ContextEntry ‚Üí Type‚ÇÄ
    Rec' [] = Unit
    Rec' (x ‚à∑ x‚ÇÅ) = AType x √ó Rec' (fst (FilterOut (((ce-name x) ‚â°_) ‚àò ce-name) x‚ÇÅ))

    Rec : Context ‚Üí Type‚ÇÄ
    Rec = Rec' ‚àò entries 

    Statement* : ‚àÄ { B : Context ‚Üí Type‚ÇÄ } ‚Üí Œ£ Context B ‚Üí Type‚ÇÄ
    Statement* = Stmnt ‚àò fst

    -- data IOs : Type‚ÇÄ where
    --   inputBy : IOs
    --   timedOutInput

    -- toConsensusCodeStmnt : ‚àÄ {s} ‚Üí Stmnt (con [] s) ‚Üí Stmnt emptyContext
    -- toConsensusCodeStmnt {nothing} x = x
    -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.bindingS x) = {!!}
    -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! x))) = (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! {!!})))
    -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.nonBindingS (AST.exprNBS x)) = {!!}

    map-ExistingFirstBy-lemma : {cs : List ContextEntry}
                       (B : ContextEntry ‚Üí Type‚ÇÄ) (B' : ContextEntry ‚Üí Type‚ÇÄ)
                       
                       (z : ExistFirstBy B WitchIsAlso B' cs) ‚Üí
                       (f : ContextEntry ‚Üí Scope)
                       (r : Subst' cs) ‚Üí Subst' (map-ExistingFirstBy B WitchIsAlso B' cs z Œª x x‚ÇÅ x‚ÇÇ ‚Üí record x { scope = f x })
    map-ExistingFirstBy-lemma {x ‚à∑ cs} B B' (inl x‚ÇÅ) f = idfun _
    map-ExistingFirstBy-lemma {x ‚à∑ cs} B B' (inr x‚ÇÅ) f = map-sum (idfun _) (map-ExistingFirstBy-lemma {cs} B B' (proj‚ÇÇ x‚ÇÅ) f)


    publish-substlemma : {c : Context} (r : Subst c)
                       (p : AST.ParticipantId (AST.interactionHead ptps parameters))
                       (x : AST.PrivateSymbolOf c p)
                       (z : ‚ü® AST.IsConsensus c ‚ü©) ‚Üí
                     Subst (bindingMechanics' c (bindingS (BS-publish! p x {z})))
    publish-substlemma r p x _ = map-ExistingFirstBy-lemma (Œª x‚ÇÅ ‚Üí psof-name _ x ‚â° AST.name x‚ÇÅ) (Œª y ‚Üí
                                                                                                  recMaybe Empty (Œª p' ‚Üí AST.pId-name _ _ p ‚â° AST.pId-name _ _ p')
                                                                                                  (AST.scope y))  (psof-proof _ x) (Œª _ ‚Üí nothing) r


    ExistFirstBy-WitchIsAlso-remSubs-lemm : {nm : Identifier} {p : ParticipantId} (l : List ContextEntry) ‚Üí (r : Subst' l)  ‚Üí
                                                      ExistFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso
                                                        ((Œª y ‚Üí recMaybe Empty (Œª p' ‚Üí (AST.pId-name _ _ p) ‚â° (AST.pId-name _ _ p')) (ce-scope y))) l ‚Üí
                                                      ((ExistFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso
                                                         ((Œª y ‚Üí recMaybe Empty (Œª p' ‚Üí (AST.pId-name _ _ p) ‚â° (AST.pId-name _ _ p')) (ce-scope y)))
                                                         (remSubst' l r)) ‚äé Unit)
    ExistFirstBy-WitchIsAlso-remSubs-lemm (x‚ÇÅ ‚à∑ l) (inl x) (inl x‚ÇÇ) = inr tt
    ExistFirstBy-WitchIsAlso-remSubs-lemm (x‚ÇÅ ‚à∑ l) (inl x) (inr x‚ÇÇ) = inl (ExistFirstBy-WitchIsAlso-FilterOut-lemma _ (Œª a x‚ÇÉ y ‚Üí proj‚ÇÅ x‚ÇÇ (x‚ÇÉ ‚àô sym y)) (proj‚ÇÇ x‚ÇÇ))
    ExistFirstBy-WitchIsAlso-remSubs-lemm (x‚ÇÅ ‚à∑ l) (inr x) (inl x‚ÇÇ) = inl (inl x‚ÇÇ)
    ExistFirstBy-WitchIsAlso-remSubs-lemm {nm} {p} (x‚ÇÅ ‚à∑ l) (inr x) (inr x‚ÇÇ) = map-sum
          (inr ‚àò (proj‚ÇÅ x‚ÇÇ ,_))
          (Œª _ ‚Üí tt)
          (ExistFirstBy-WitchIsAlso-remSubs-lemm {nm} {p} l x (proj‚ÇÇ x‚ÇÇ))
