{-# OPTIONS --cubical  #-}
module Glow.Simple.Lurk.Glow where




open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Fin
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool renaming (Bool to ùüö ; _‚âü_ to _‚âüB_)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )

import Glow.Simple.Lurk.Lurk as Lurk

open import Glow.Simple.AST


module Abstract where

  module LA = Lurk.Abstract 

  record Precompiled : Type‚ÇÄ where
    field     
      maxStateId : ‚Ñï
      participants : ‚Ñï
      reachable : Fin maxStateId ‚Üí LA.Program 






module Concrete where

  Map : Type‚ÇÄ ‚Üí Type‚ÇÄ ‚Üí Type‚ÇÄ
  Map a b = a ‚Üí b 

  module LC = Lurk.Concrete

  StateId = ‚Ñï
  ParticipantId = ‚Ñï

  data Action : Type‚ÇÄ where
    depositA : ‚Ñï ‚Üí Action
    withdrawA : ‚Ñï ‚Üí Action
    publishA : GlowValue ‚Üí Action 


  record OnChainState : Type‚ÇÄ where
    field
      balances : Map ParticipantId ‚Ñï
      currentSate : StateId
      published : List GlowValue
      

  record CompiledContract : Type‚ÇÄ where
    field
      stateTransitionsVerifier : LC.Verifier

  record InteractionCall : Type‚ÇÄ where
    constructor iC
    field
      caller : ParticipantId
      desiredState : StateId
      action : Action

  open InteractionCall
  open OnChainState


  advanceState : OnChainState ‚Üí InteractionCall ‚Üí OnChainState
  advanceState s ic@(iC c dS a) = h a
    where
      h : Action ‚Üí _
      h (depositA x) = {!!}
      h (withdrawA x) = {!!}
      h (publishA x) = record s { published =  x ‚à∑ s .published  }


  record UniversalHostContract : Type‚ÇÄ where
    field
      makeArguments : OnChainState ‚Üí InteractionCall ‚Üí LC.Arguments      

    record Deployment : Type‚ÇÄ where
      field
        compiledContract : CompiledContract

      open CompiledContract compiledContract


      interact : OnChainState ‚Üí (InteractionCall √ó LC.Proof) ‚Üí OnChainState
      interact s‚ÇÄ (ic , proof) =
        if (LC.verify stateTransitionsVerifier (makeArguments s‚ÇÄ ic) proof)   
        then (advanceState s‚ÇÄ ic)
        else s‚ÇÄ



 
  







