{-# OPTIONS --cubical  #-}
module Glow.Simple.Lurk.Glow where




open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Fin
open import Cubical.Data.Int renaming (_+_ to _+‚Ñ§_)
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool renaming (Bool to ùüö ; _‚âü_ to _‚âüB_)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )

open import Glow.HaskellMock

import Glow.Simple.Lurk.Lurk as Lurk

open import Glow.Simple.AST


module Safe where

  module L = Lurk.Safe 

  data Action : Type‚ÇÄ where
    depositA : ‚Ñï ‚Üí Action
    withdrawA : ‚Ñï ‚Üí Action
    publishA : GlowValue ‚Üí Action 

  module _ (statesNumber participantsNumber : ‚Ñï) where 

    StateId = Fin statesNumber
    ParticipantId = Fin participantsNumber

    

    record OnChainState : Type‚ÇÄ where
      field
        balances : ParticipantId ‚Üí ‚Ñï
        currentSate : StateId
        published : List GlowValue


    open OnChainState


    record CompiledContract : Type‚ÇÄ where
      field
        stateTransitionsProgram : L.Program
        stateTransitionsVerifier : L.Verifier stateTransitionsProgram

      record InteractionCall : Type‚ÇÄ where
        pattern
        constructor iC
        field
          caller : ParticipantId
          desiredState : StateId
          action : Action

      open InteractionCall public
      
     
      advanceState : OnChainState ‚Üí InteractionCall ‚Üí OnChainState
      advanceState s ic@(iC c dS a) = h a
        where
          h : Action ‚Üí _
          h (depositA x) = record s { balances =  {!!} }
          h (withdrawA x) = record s { balances = {!!} }
          h (publishA x) = record s { published =  x ‚à∑ s .published  }


    record UniversalHostContract : Type‚ÇÄ where
      field
        makeArguments : ‚àÄ {cc} ‚Üí OnChainState ‚Üí CompiledContract.InteractionCall cc ‚Üí L.Arguments (cc .CompiledContract.stateTransitionsProgram)      

      record Deployment : Type‚ÇÄ where
        field
          compiledContract : CompiledContract

        open CompiledContract compiledContract

        record SignedInteractionCall (onChainState : OnChainState) : Type‚ÇÄ where
          pattern
          constructor siC
          field
            payload : InteractionCall
            proof : L.Proof stateTransitionsProgram (makeArguments onChainState payload ) 
            

module Unsafe where

  module L = Lurk.Unsafe

  StateId = ‚Ñï
  ParticipantId = ‚Ñï

  data Action : Type‚ÇÄ where
    depositA : ‚Ñï ‚Üí Action
    withdrawA : ‚Ñï ‚Üí Action
    publishA : GlowValue ‚Üí Action


  record OnChainState : Type‚ÇÄ where
    field
      balances : M.Map ParticipantId ‚Ñï
      currentSate : StateId
      published : List GlowValue
      

  record CompiledContract : Type‚ÇÄ where
    field
      stateTransitionsVerifier : L.Verifier

  record InteractionCall : Type‚ÇÄ where
    constructor iC
    field
      caller : ParticipantId
      desiredState : StateId
      action : Action

  open InteractionCall
  open OnChainState


  advanceState : OnChainState ‚Üí InteractionCall ‚Üí OnChainState
  advanceState s ic@(iC c dS a) = h a
    where
      h : Action ‚Üí _
      h (depositA x) = record s { balances =  M.adjust (_+ x) c (s .balances) }
      h (withdrawA x) = record s { balances = M.adjust (_‚à∏ x) c (s .balances) }
      h (publishA x) = record s { published =  x ‚à∑ s .published  }
    

  record UniversalHostContract : Type‚ÇÄ where
    field
      makeArguments : OnChainState ‚Üí InteractionCall ‚Üí L.Arguments      

    record Deployment : Type‚ÇÄ where
      field
        compiledContract : CompiledContract

      open CompiledContract compiledContract


      interact : OnChainState ‚Üí (InteractionCall √ó L.Proof) ‚Üí OnChainState
      interact s‚ÇÄ (ic , proof) =
        if (L.verify stateTransitionsVerifier (makeArguments s‚ÇÄ ic) proof)   
        then (advanceState s‚ÇÄ ic)
        else s‚ÇÄ


