{-# OPTIONS --cubical  #-}
module Glow.Simple.Lurk.HaskellInterface where

open import Agda.Builtin.String
open import Agda.Builtin.Char
import Agda.Builtin.List as L

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Fin
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum renaming (elim to sum-elim ; rec to sum-rec ; map to sum-map)


open import Cubical.Data.Maybe renaming (rec to recMaybe)
open import Cubical.Data.Bool hiding (if_then_else_)  renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

data BinOp : Type‚ÇÄ
data UnaryOp : Type‚ÇÄ

data BinOp where
  BOpCons BOpPlus BOpMinus BOpTimes BOpDiv BOpNumEq  BOpPtrEq : BinOp


data UnaryOp where
  UOpCar UOpCdr UOpEmit : UnaryOp


module LurkAST (List' : Type‚ÇÄ ‚Üí Type‚ÇÄ) (SymbolIdentifier : Type‚ÇÄ)  (a : Type‚ÇÄ) where

  open import Cubical.Data.List renaming (map to map-List)


  data Expr : Type‚ÇÄ

  record Let : Type‚ÇÄ
  record Binding : Type‚ÇÄ
  record Symbol : Type‚ÇÄ

  data Expr where
     ExNil : a ‚Üí Expr
     ExT : a ‚Üí Expr
     ExIf : a ‚Üí Expr ‚Üí Expr ‚Üí Expr ‚Üí Expr
     ExLambda : a ‚Üí List' Symbol ‚Üí Expr ‚Üí Expr
     ExLet : a ‚Üí Let ‚Üí Expr
     ExLetRec : a ‚Üí Let ‚Üí Expr
     ExBinary : a ‚Üí BinOp ‚Üí Expr ‚Üí Expr ‚Üí Expr
     ExUnary : a ‚Üí UnaryOp ‚Üí Expr ‚Üí Expr
     ExBegin : a ‚Üí List' Expr ‚Üí Expr ‚Üí Expr
     ExCurrentEnv : a ‚Üí Expr
     ExFieldElem : a ‚Üí ‚Ñï ‚Üí Expr
     ExEval : a ‚Üí Expr ‚Üí (Maybe Expr) ‚Üí Expr
     ExSymbol : a ‚Üí Symbol ‚Üí Expr
     ExApply : a ‚Üí Expr ‚Üí  List' Expr ‚Üí Expr
     ExQuotedName : a ‚Üí String ‚Üí Expr
     -- ExQuote : a ‚Üí String ‚Üí Expr 

  {-# NO_POSITIVITY_CHECK #-}
  record Let where
    constructor LetC
    inductive
    field
      letBindings : List' Binding
      letBody : Expr

  record Binding where
    constructor BindingC
    inductive
    field
      bInfo : a
      bKey : Symbol
      bVal : Expr

  record Symbol where
    constructor SymbolC
    inductive
    field
      name : SymbolIdentifier





module LurkASTchangeListImp {SymbolIdentifier : Type‚ÇÄ} {a : Type‚ÇÄ}  (List‚ÇÄ List‚ÇÅ : Type‚ÇÄ ‚Üí Type‚ÇÄ)
                               (lmap : ‚àÄ {X Y} ‚Üí (X ‚Üí Y) ‚Üí List‚ÇÄ X ‚Üí List‚ÇÄ Y)
                               (to‚ÇÅ : ‚àÄ {X} ‚Üí List‚ÇÄ X ‚Üí List‚ÇÅ X) where

  module L‚ÇÄ = LurkAST List‚ÇÄ SymbolIdentifier a
  module L‚ÇÅ = LurkAST List‚ÇÅ SymbolIdentifier a

  {-# TERMINATING #-}
  mapLiImp : L‚ÇÄ.Expr ‚Üí L‚ÇÅ.Expr 
  mapLiImp (LurkAST.ExNil x) = (LurkAST.ExNil x)
  mapLiImp (LurkAST.ExT x) = (LurkAST.ExT x)
  mapLiImp (LurkAST.ExIf x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = (LurkAST.ExIf x (mapLiImp x‚ÇÅ) (mapLiImp x‚ÇÇ) (mapLiImp x‚ÇÉ))
  mapLiImp (LurkAST.ExLambda x x‚ÇÅ x‚ÇÇ) =
     (LurkAST.ExLambda x (to‚ÇÅ (lmap (Œª x‚ÇÉ ‚Üí LurkAST.SymbolC (L‚ÇÄ.Symbol.name x‚ÇÉ)) x‚ÇÅ)) (mapLiImp x‚ÇÇ))
  mapLiImp (LurkAST.ExLet x (w)) = 
      (LurkAST.ExLet x (LurkAST.LetC (to‚ÇÅ (lmap (Œª x‚ÇÅ ‚Üí LurkAST.BindingC (bInfo x‚ÇÅ) (LurkAST.SymbolC (L‚ÇÄ.Symbol.name (bKey x‚ÇÅ))) (mapLiImp (bVal x‚ÇÅ))) letBindings))
          (mapLiImp letBody)))
      where
        open L‚ÇÄ.Let w
        open L‚ÇÄ.Binding
        
  mapLiImp (LurkAST.ExLetRec x w) =
       (LurkAST.ExLetRec x (LurkAST.LetC (to‚ÇÅ (lmap (Œª x‚ÇÅ ‚Üí LurkAST.BindingC (bInfo x‚ÇÅ) (LurkAST.SymbolC (L‚ÇÄ.Symbol.name (bKey x‚ÇÅ))) (mapLiImp (bVal x‚ÇÅ))) letBindings))
          (mapLiImp letBody)))
      where
        open L‚ÇÄ.Let w
        open L‚ÇÄ.Binding

  mapLiImp (LurkAST.ExBinary x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = (LurkAST.ExBinary x x‚ÇÅ (mapLiImp x‚ÇÇ) (mapLiImp x‚ÇÉ))
  mapLiImp (LurkAST.ExUnary x x‚ÇÅ x‚ÇÇ) = (LurkAST.ExUnary x x‚ÇÅ (mapLiImp x‚ÇÇ))
  mapLiImp (LurkAST.ExBegin x x‚ÇÅ x‚ÇÇ) = (LurkAST.ExBegin x (to‚ÇÅ (lmap mapLiImp x‚ÇÅ)) (mapLiImp x‚ÇÇ))
  mapLiImp (LurkAST.ExCurrentEnv x) = (LurkAST.ExCurrentEnv x)
  mapLiImp (LurkAST.ExFieldElem x x‚ÇÅ) = (LurkAST.ExFieldElem x x‚ÇÅ)
  mapLiImp (LurkAST.ExEval x x‚ÇÅ nothing) = (LurkAST.ExEval x (mapLiImp x‚ÇÅ) nothing)
  mapLiImp (LurkAST.ExEval x x‚ÇÅ (just x‚ÇÇ)) = (LurkAST.ExEval x (mapLiImp x‚ÇÅ) (just (mapLiImp x‚ÇÇ)))
  mapLiImp (LurkAST.ExSymbol x (LurkAST.SymbolC name)) = (LurkAST.ExSymbol x (LurkAST.SymbolC name))
  mapLiImp (LurkAST.ExApply x x‚ÇÅ x‚ÇÇ) = (LurkAST.ExApply x (mapLiImp x‚ÇÅ) (to‚ÇÅ (lmap mapLiImp x‚ÇÇ)))
  mapLiImp (LurkAST.ExQuotedName x x‚ÇÅ) = (LurkAST.ExQuotedName x x‚ÇÅ)
  -- mapLiImp (LurkAST.ExQuote x x‚ÇÅ) = (LurkAST.ExQuote x x‚ÇÅ)


data AList {‚Ñì} (b : Type ‚Ñì) : Type ‚Ñì where
   ALn : AList b
   ALc : b ‚Üí (AList b) ‚Üí AList b



fromAList : ‚àÄ {‚Ñì} {b : Type ‚Ñì} ‚Üí AList b ‚Üí L.List b 
fromAList ALn = L.[]
fromAList {b = b} (ALc x x‚ÇÅ) = x L.‚à∑ (fromAList {b = b} x‚ÇÅ) 

toAList : ‚àÄ {‚Ñì} {b : Type ‚Ñì} ‚Üí L.List b ‚Üí AList b 
toAList L.[] = ALn
toAList {b = b} (x L.‚à∑ x‚ÇÅ) = ALc x (toAList {b = b} x‚ÇÅ)


-- module LurkASTnoRecords {‚Ñì} (SymbolIdentifier : Type‚ÇÄ) (a : Type ‚Ñì) where



--   import Cubical.Data.List as L renaming (map to map-List)

--   data Expr : Type ‚Ñì
--   data BinOp : Type ‚Ñì
--   data UnaryOp : Type ‚Ñì
--   data Let : Type ‚Ñì
--   data Binding : Type ‚Ñì
--   data Symbol : Type‚ÇÄ 

--   data Expr where
--      ExNil : a ‚Üí Expr
--      ExT : a ‚Üí Expr
--      ExIf : a ‚Üí Expr ‚Üí Expr ‚Üí Expr ‚Üí Expr
--      ExLambda : a ‚Üí List Symbol ‚Üí Expr ‚Üí Expr
--      ExLet : a ‚Üí Let ‚Üí Expr
--      ExLetRec : a ‚Üí Let ‚Üí Expr
--      ExBinary : a ‚Üí BinOp ‚Üí Expr ‚Üí Expr ‚Üí Expr
--      ExUnary : a ‚Üí UnaryOp ‚Üí Expr ‚Üí Expr
--      ExBegin : a ‚Üí List Expr ‚Üí Expr ‚Üí Expr
--      ExCurrentEnv : a ‚Üí Expr

--      ExEval : a ‚Üí Expr ‚Üí (Maybe Expr) ‚Üí Expr
--      ExSymbol : a ‚Üí Symbol ‚Üí Expr
--      ExApply : a ‚Üí Expr ‚Üí  List Expr ‚Üí Expr
--      ExQuotedName : a ‚Üí String ‚Üí Expr
--      -- ExQuote : a SExpr : 

--   data BinOp where
--     BOpCons BOpPlus BOpMinus BOpTimes BOpDiv BOpNumEq  BOpPtrEq : BinOp


--   data UnaryOp where
--     UOpCar UOpCdr UOpEmit : UnaryOp

--   data Let where
--     LetC : List Binding ‚Üí Expr ‚Üí Let


--   data Binding where
--     BindingC : a ‚Üí Symbol ‚Üí Expr ‚Üí Binding

--   data Symbol where
--     SymbolC : SymbolIdentifier ‚Üí Symbol 



