
{-# OPTIONS --cubical  #-}
module Glow.Simple.Example where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_) renaming (Bool to ùüö ; _‚âü_ to _‚âüB_)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )

open import Cubical.HITs.Interval

-- open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary renaming (¬¨_ to IsEmpty)
open import Cubical.Relation.Binary

open import Glow.Linked

open import Glow.DecEqMore

open import Glow.Simple.AST


module Test where 
  open AST String {{String-Discrete-postulated}} zero

  someInteraction : Interaction
  someInteraction =  
     interaction‚ü®   "A" ‚à∑ "B" ‚à∑ [] ,  "pI1" ‚à∂ Nat ‚à∑ "b2" ‚à∂ Bool ‚à∑ "b1" ‚à∂ Bool ‚à∑ [] ‚ü© (
          set "x" ‚à∂ Bool ‚âî < true > Õæ
          at "B" set "y" ‚à∂ Bool ‚âî v "b1" Õæ
          at "A" set "xx" ‚à∂ Bool ‚âî
           ( if v "b1"
             then
                (
                set "z" ‚à∂ Bool ‚âî input "enter choice 1" Õæ‚ÇÅ Õæb
                v "z"
              )
             else (
              require! v "b2" Õæ'
              -- publish! "B" ‚ü∂ "y" Õæ
              -- withdraw! "B" ‚üµ < 3 > Õæ
              -- deposit! "B" ‚ü∂ < 2 > Õæ
              set "z" ‚à∂ Bool ‚âî < false > Õæb
              < true >
              )) Õæ
          deposit! "B" ‚ü∂ < 2 > Õæ
          at "A" set "yq" ‚à∂ Bool ‚âî input "enter choice 2" Õæ
          withdraw! "B" ‚üµ < 3 > Õæ
          publish! "A" ‚ü∂ "xx" Õæ        

          publish! "B" ‚ü∂ "y" Õæ'        
          set "yy" ‚à∂ Bool ‚âî v "y" )


someInteraction = toProofs {{String-Discrete-postulated}} Test.someInteraction


-- module Test' where
--   open AST String {{String-Discrete-postulated}}

--   trnsprt : Interaction zero  ‚Üí
--                 Interaction one
--   trnsprt = transport Œª i ‚Üí Interaction (seg i)


--   trsnprtTest = trnsprt Test.someInteraction

--   trsnprtTest' : Maybe GType
--   trsnprtTest' = map-Maybe ContextEntry'.type  ( (safeHead (Context.entries (foldLinked' (Interaction.code trsnprtTest)))))

--   trsnprtTest'' : (("pI1" ‚â° "b2") ‚äé
--                      (("pI1" ‚â° "b2" ‚Üí Empty) √ó
--                       (("pI1" ‚â° "b1") ‚äé (("pI1" ‚â° "b1" ‚Üí Empty) √ó Lift Empty))) ‚Üí
--                      Empty)
--                     √ó
--                     (("b2" ‚â° "b1") ‚äé (("b2" ‚â° "b1" ‚Üí Empty) √ó Lift Empty) ‚Üí Empty) √ó
--                     (Lift Empty ‚Üí Empty) √ó Lift Unit
--   trsnprtTest'' = InteractionHead.uniqueParams (Interaction.head trsnprtTest)

--   trsnprtTest''* : {!!} 
--   trsnprtTest''* = InteractionHead.uniqueParams (Interaction.head Test.someInteraction)

--   -- trsnprtTest''' = {!!}


-- module Test‚Ñï where 
--   open AST ‚Ñï zero

--   someInteraction : Interaction
--   someInteraction =  
--      interaction‚ü®   1 ‚à∑ 2 ‚à∑ [] ,  3 ‚à∂ Nat ‚à∑ 4 ‚à∂ Bool ‚à∑ 5 ‚à∂ Bool ‚à∑ [] ‚ü© (
--           set 6 ‚à∂ Bool ‚âî < true > Õæ
--           at 2 set 7 ‚à∂ Bool ‚âî v 5 Õæ
--           at 1 set 8 ‚à∂ Bool ‚âî (
--               require! v 4 Õæ'
--               -- publish! "B" ‚ü∂ "y" Õæ
--               -- withdraw! "B" ‚üµ < 3 > Õæ
--               -- deposit! "B" ‚ü∂ < 2 > Õæ
--               set 9 ‚à∂ Bool ‚âî < false > Õæb
--               < true >
--               )Õæ
--           deposit! 2 ‚ü∂ < 2 > Õæ
--           withdraw! 2 ‚üµ < 3 > Õæ
--           publish! 2 ‚ü∂ 7 Õæ'        
--           set 10 ‚à∂ Bool ‚âî v 7 )


-- module Test‚Ñï' where
--   open AST ‚Ñï

--   trnsprt : Interaction zero  ‚Üí
--                 Interaction one
--   trnsprt = transport Œª i ‚Üí Interaction (seg i)


--   trsnprtTest = trnsprt Test‚Ñï.someInteraction

--   trsnprtTest' : Maybe GType
--   trsnprtTest' = map-Maybe ContextEntry'.type  ( (safeHead (Context.entries (foldLinked' (Interaction.code trsnprtTest)))))

--   trsnprtTest'' : PropMode.PM one
--                     (UniqueBy
--                      (Œª x x‚ÇÅ ‚Üí
--                         AST.IdentifierWithType.name x ‚â° AST.IdentifierWithType.name x‚ÇÅ)
--                      (AST.parameters (AST.Interaction.head trsnprtTest))
--                      ,
--                      (UniqueByDec‚â° AST.IdentifierWithType.name
--                       (AST.parameters (AST.Interaction.head trsnprtTest))
--                       ,
--                       isProp-UniqueBy
--                       (Œª x x‚ÇÅ ‚Üí
--                          AST.IdentifierWithType.name x ‚â° AST.IdentifierWithType.name x‚ÇÅ)
--                       (AST.parameters (AST.Interaction.head trsnprtTest))))
--   trsnprtTest'' = InteractionHead.uniqueParams (Interaction.head trsnprtTest)


--   -- trsnprtTest''' : {!!}
--   -- trsnprtTest''' = (Œª { (inl p)
--   --                           ‚Üí transp
--   --                             (Œª i ‚Üí caseNat ‚Ñï Empty (pred‚Ñï (pred‚Ñï (pred‚Ñï (proj‚ÇÅ p i))))) i0 0
--   --                       ; (inr q)
--   --                           ‚Üí Cubical.Data.Sum.Base..extendedlambda0
--   --                             (no
--   --                              (Œª x ‚Üí
--   --                                 transp (Œª i ‚Üí caseNat ‚Ñï Empty (pred‚Ñï (pred‚Ñï (pred‚Ñï (proj‚ÇÅ x i)))))
--   --                                 i0 0))
--   --                             (no (Œª x ‚Üí lower (proj‚ÇÇ x)))
--   --                             (Œª x ‚Üí
--   --                                transp (Œª i ‚Üí caseNat ‚Ñï Empty (pred‚Ñï (pred‚Ñï (pred‚Ñï (proj‚ÇÅ x i)))))
--   --                                i0 0)
--   --                             (Œª x ‚Üí lower (proj‚ÇÇ x)) (proj‚ÇÇ q)
--   --                       })
--   --                    ,
--   --                    ((Œª { (inl p)
--   --                            ‚Üí transp
--   --                              (Œª i ‚Üí caseNat ‚Ñï Empty (pred‚Ñï (pred‚Ñï (pred‚Ñï (pred‚Ñï (proj‚ÇÅ p i))))))
--   --                              i0 0
--   --                        ; (inr q) ‚Üí lower (proj‚ÇÇ q)
--   --                        })
--   --                     , (lower , tt*))

--   xtx : PropMode.PM one
--                     (UniqueBy
--                      (Œª x x‚ÇÅ ‚Üí
--                         AST.IdentifierWithType.name x ‚â° AST.IdentifierWithType.name x‚ÇÅ)
--                      (AST.parameters (AST.Interaction.head trsnprtTest))
--                      ,
--                      (UniqueByDec‚â° AST.IdentifierWithType.name
--                       (AST.parameters (AST.Interaction.head trsnprtTest))
--                       ,
--                       isProp-UniqueBy
--                       (Œª x x‚ÇÅ ‚Üí
--                          AST.IdentifierWithType.name x ‚â° AST.IdentifierWithType.name x‚ÇÅ)
--                       (AST.parameters (AST.Interaction.head trsnprtTest))))
--   xtx = {!!} , ({!!} , ({!!} , {!tt*!}))
