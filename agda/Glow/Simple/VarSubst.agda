
{-# OPTIONS --cubical  #-}
module Glow.Simple.VarSubst where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum renaming (elim to sum-elim ; rec to sum-rec ; map to sum-map)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_)  renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.Simple.AST

open import Glow.DecEqMore

open import Glow.Simple.ContextMore

module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}} where


  -- open AST Identifier

  -- module AlwaysCanPrepend {ptps : List Identifier} (ce : AST.ContextEntry (AST.interactionHead ptps []) ) where

  --   open AST.InteractionHead {prop-mode = true} (AST.interactionHead ptps []) 


    
  --   -- TODO : remove unsafe pragma by stratification on nesting depth
  --   {-# TERMINATING #-}
  --   prependCtxStmnts : ‚àÄ {Œì : _} ‚Üí Statements Œì ‚Üí Statements (prependContext ce Œì) 



  --   prependCtxStmnts = map-Linked'-map _ h hh
  --     where



  --       h : {Œì : Context}
  --              ‚Üí (b : Stmnt Œì) ‚Üí Stmnt (prependContext ce Œì)


  --       h-expr : {Œì : Context} ‚Üí ‚àÄ {Œ§}
  --              ‚Üí (b : Expr Œì Œ§) ‚Üí Expr (prependContext ce Œì) Œ§


  --       h  (bindingS x) = bindingS (BS-lemma x)
  --          where
  --               BS-lemma : {Œì : Context} ‚Üí  BStmnt Œì -> BStmnt (prependContext ce Œì)
  --               BS-lemma (BS-let x {asn} y) = (BS-let x {asn} (h-expr y))  
  --               BS-lemma (BS-publish! p (psof name‚ÇÅ {w}) {y}) = 
  --                 (BS-publish! p (psof name‚ÇÅ {(ExistFirstBy-WitchIsAlso-preppend-lemma _ _ w)}) {y})


  --       h (nonBindingS x) = nonBindingS (z x)
  --          where

  --            zz : NBStmnt _ ‚Üí NBStmnt _ 
  --            zz (NBS-require! x) = NBS-require! (h-expr x)
  --            zz (NBS-deposit! p {y} x) = NBS-deposit! p {y} (h-expr x)
  --            zz (NBS-withdraw! p {y} x) = NBS-withdraw! p {y} (h-expr x)

  --            z : NBStmnt+Expr _ ‚Üí NBStmnt+Expr _
  --            z (stmntNBS x) =  stmntNBS (zz x)
  --            z (exprNBS x) = exprNBS (h-expr x)

  --       h-expr (var (dsot x {y})) = var (dsot x { (
  --           sum-elim (Œª a ‚Üí (inl ((ExistFirstBy-WitchIsAlso-preppend-lemma _ _ a))))
  --            -- TODO : figure it out -- (Œª a ‚Üí var (dsot x {transport (Œª i ‚Üí {!True (ExistFirstBy-WitchIsAlso-preppend-lemma ? ? (fromWitness y) i)!}) y}))
  --            (Œª b ‚Üí empty-elim (lower (proj‚ÇÇ b)))
  --             y)})

  --             --(var (dsot name‚ÇÅ {transport {!!} y }))
  --       h-expr (stmnts‚ÇÅ AST.Õæb x) =
  --           prependCtxStmnts stmnts‚ÇÅ AST.Õæb subst (Œª x‚ÇÅ ‚Üí Expr x‚ÇÅ _)
  --            -- TODO : improve evaluation performance by introducing specialized "subst"
  --            -- specialisation should be not only on Expr, but also on map-Linked'-map-fold
  --         (map-Linked'-map-fold ((prependContext ce)) _ _ stmnts‚ÇÅ ) (h-expr x)
  --       h-expr (lit x) = (AST.lit x)
  --       h-expr (input msg {y}) = input msg {y}
  --       h-expr (if b then t else f) = if (h-expr b) then (h-expr t) else (h-expr f)

  --       hh : (Œì : Context) (x : Stmnt Œì) ‚Üí
  --                          prependContext ce (bindingMechanics' Œì x) ‚â°
  --                          bindingMechanics'
  --                          (prependContext ce Œì) (h x)
  --       hh _ (bindingS (BS-let _ _)) = refl 
  --       hh _ (AST.bindingS (AST.BS-publish! _ _)) = {!!}
  --       hh _ (nonBindingS _) = refl


  -- TODO : provide alternative implementation, substituting multiple variables in one pass, compare performance
  module SubstOne {ptps : List Identifier} where

    open AST.InteractionHead  {prop-mode = true} (AST.interactionHead ptps [])

    bindingMechanics'* : (c : Œ£ Context Subst) ‚Üí Statement* c ‚Üí Œ£ Context Subst

    bindingMechanics'-Subst : {c : Context} ‚Üí Subst c ‚Üí (x : Stmnt c) ‚Üí Subst (bindingMechanics' c x)


    Statements* : Œ£ Context Subst ‚Üí Type‚ÇÄ
    Statements* = Linked' {A = Statement*} bindingMechanics'* 


    bindingMechanics'-Subst r (AST.bindingS (AST.BS-let ce x)) = inr r
    bindingMechanics'-Subst r (AST.bindingS (AST.BS-publish! p x {z})) = publish-substlemma r p x z   
       


    bindingMechanics'-Subst r (AST.nonBindingS x) = r

    -- move as more general property to Glow.Linked' module
    mkStatements* : ‚àÄ {Œì r} ‚Üí Statements Œì ‚Üí Statements* (Œì , r)
    mkStatements* []L = []L
    mkStatements* (h ‚à∑L x) = h ‚à∑L mkStatements*  x


    fold*-lemma : ‚àÄ {Œì : Context}
                    (stmnts‚ÇÅ : Statements Œì) ‚Üí ‚àÄ (r) ‚Üí                   
                   fst (foldLinked' (mkStatements* {_} {r} stmnts‚ÇÅ)) ‚â° foldLinked' stmnts‚ÇÅ
    fold*-lemma []L r = refl
    fold*-lemma (h ‚à∑L stmnts‚ÇÅ) x = fold*-lemma  (stmnts‚ÇÅ) (bindingMechanics'-Subst x h) 

    -- fold*-lemma' : ‚àÄ {Œì : Context}
    --                 (stmnts‚ÇÅ : Statements Œì) ‚Üí ‚àÄ (r) ‚Üí
    --                  PathP (Œª x ‚Üí Subst (fold*-lemma stmnts‚ÇÅ r x)) 
    --                  (snd (foldLinked' (mkStatements* {_} {r} stmnts‚ÇÅ)))
    --                  (
    --                 (subst (Subst) (fold*-lemma stmnts‚ÇÅ r)
    --                            (snd (foldLinked' (mkStatements* stmnts‚ÇÅ)))))
    -- fold*-lemma' {AST.con (AST.ice scope name type ‚à∑ entries‚ÇÅ) scope''} []L r = {!subst-filler _ _ _!}
    -- fold*-lemma' (h ‚à∑L stmnts‚ÇÅ) r = {!!}


    -- TODO : remove unsafe pragma by stratification on nesting depth
    {-# TERMINATING #-}
    substOneStmnts : ‚àÄ {Œì} ‚Üí (r : Subst Œì) ‚Üí Statements* (Œì , r) ‚Üí Statements (remSubst Œì r) 

    substOneStmnt : ‚àÄ {Œì} ‚Üí (r : Subst Œì) ‚Üí Stmnt Œì ‚Üí Stmnt (remSubst Œì r)

    substOneExpr : ‚àÄ {Œì Œ§} ‚Üí (r : Subst Œì) ‚Üí Expr Œì Œ§ ‚Üí Expr (remSubst Œì r) Œ§

    substOneStmnts-coh :  ‚àÄ Œì ‚Üí (r : Subst Œì) ‚Üí (x : Stmnt Œì) ‚Üí
                                                    remSubst (fst (bindingMechanics'* (Œì , r) x))
                                                      (snd (bindingMechanics'* (Œì , r) x))
                                                      ‚â° bindingMechanics' (remSubst Œì r) (substOneStmnt r x)

-- lit (subst GTypeAgdaRep {!proj‚ÇÇ x!} x‚ÇÇ)
    evalVar' : ‚àÄ (Œì) ‚Üí ‚àÄ {Œ§} ‚Üí ‚àÄ nm ‚Üí ‚ü® IsDefinedSymbolOfTy Œì Œ§ nm ‚ü© ‚Üí (r : Subst Œì) ‚Üí ‚ü® IsDefinedSymbolOfTy (remSubst Œì r) Œ§ nm ‚ü© ‚äé GTypeAgdaRep Œ§ 
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inl x)) (inl x‚ÇÇ) = inr (subst‚Åª GTypeAgdaRep (proj‚ÇÇ (proj‚ÇÇ x)) x‚ÇÇ)
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inr x)) (inl x‚ÇÇ) =
       inl (inl (ExistFirstBy-WitchIsAlso-FilterOut-lemma entries‚ÇÅ (Œª a x‚ÇÉ y ‚Üí proj‚ÇÅ x (x‚ÇÉ ‚àô sym y)) (proj‚ÇÇ x)))
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inl x)) (inr x‚ÇÇ) = inl (inl (inl x))
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inr x)) (inr x‚ÇÇ) =
      let z = evalVar' (AST.con (entries‚ÇÅ) scope'') nm (inl (proj‚ÇÇ x)) x‚ÇÇ
      in sum-map (sum-map (inr ‚àò (proj‚ÇÅ x ,_)) Œª x‚ÇÉ ‚Üí empty-elim (lower (proj‚ÇÇ x‚ÇÉ))) (idfun _) z
    evalVar' Œì nm (inr (x , ())) r
  
    bindingMechanics'* c x = 
       (bindingMechanics' (fst c) x) ,
         bindingMechanics'-Subst (snd c) x


    substOneStmnts r = 
       map-Linked'-map _
          (Œª {ŒìRec} ‚Üí substOneStmnt (snd ŒìRec))
          Œª ŒìRec ‚Üí  substOneStmnts-coh (fst ŒìRec) (snd ŒìRec)


    substOneStmnt r (AST.bindingS (AST.BS-let ce {y} x )) =
       let x' = substOneExpr r x
       in (AST.bindingS (AST.BS-let ce {y} x' ))

    substOneStmnt r (AST.bindingS (AST.BS-publish! p (AST.psof name {w}) {y})) =
      sum-elim
         (Œª w ‚Üí (AST.bindingS (AST.BS-publish! p (AST.psof name {w}) {y})))
         (Œª _ ‚Üí blankStmnt)
        (ExistFirstBy-WitchIsAlso-remSubs-lemm {p = p} _ r w) 

   
    
    substOneStmnt r (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! x))) =
                      (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! (substOneExpr r x))))
    substOneStmnt r (AST.nonBindingS (AST.stmntNBS (AST.NBS-deposit! x {z} x‚ÇÅ ))) =
                     (AST.nonBindingS (AST.stmntNBS (AST.NBS-deposit! x {z} (substOneExpr r x‚ÇÅ))))
    substOneStmnt r (AST.nonBindingS (AST.stmntNBS (AST.NBS-withdraw! x {z} x‚ÇÅ))) =
                    (AST.nonBindingS (AST.stmntNBS (AST.NBS-withdraw! x {z} (substOneExpr r x‚ÇÅ))))
    
    substOneStmnt r (AST.nonBindingS (AST.exprNBS x)) = (AST.nonBindingS (AST.exprNBS (substOneExpr r x))) 

    substOneExpr r (AST.var (AST.dsot name {y})) =
      sum-elim
        (Œª y ‚Üí (AST.var (AST.dsot name {y})))
        lit
        (evalVar' _ name y r)
    
    substOneExpr r (AST.body (AST.bodyR stmnts‚ÇÅ expr‚ÇÅ)) =
       let q = foldLinked' (mkStatements* {_} {r} stmnts‚ÇÅ)
           e' = substOneExpr (subst (Subst) (fold*-lemma stmnts‚ÇÅ r) (snd q)) expr‚ÇÅ
           stmnts' = substOneStmnts r (mkStatements* stmnts‚ÇÅ)
           p = map-Linked'-map-fold _ _
                         (Œª ŒìRec ‚Üí  substOneStmnts-coh (fst ŒìRec) (snd ŒìRec)) (mkStatements* {_} {r} stmnts‚ÇÅ)
 
        in stmnts' AST.Õæb subst‚Åª (Œª x‚ÇÅ ‚Üí Expr x‚ÇÅ _) ( sym p ‚àô
            Œª i ‚Üí remSubst ((fold*-lemma stmnts‚ÇÅ r) i) (subst-filler Subst (fold*-lemma stmnts‚ÇÅ r) ((snd (foldLinked' (mkStatements* stmnts‚ÇÅ)))) i)           
           ) e'
    substOneExpr r (AST.lit x) = (AST.lit x)
    substOneExpr r (AST.input x {y}) = (AST.input x {y})
    substOneExpr r (AST.if x then x‚ÇÅ else x‚ÇÇ) = (AST.if (substOneExpr r x) then (substOneExpr r x‚ÇÅ) else (substOneExpr r x‚ÇÇ))

    substOneStmnts-coh Œì r (AST.bindingS (AST.BS-let ce x)) = refl
    substOneStmnts-coh (AST.con (x ‚à∑ entries‚ÇÅ) scope'') r (AST.bindingS (AST.BS-publish! p (AST.psof name {w}))) = {!!}
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! x))) = refl
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.stmntNBS (AST.NBS-deposit! x x‚ÇÅ))) = refl
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.stmntNBS (AST.NBS-withdraw! x x‚ÇÅ))) = refl
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.exprNBS x)) = refl


  module SubstAll {ptps : List Identifier} where

    open AST.InteractionHead  {prop-mode = true} (AST.interactionHead ptps [])

    {-# TERMINATING #-}
    substAllStmnts : ‚àÄ {Œì} ‚Üí (r : Rec Œì) ‚Üí Statements Œì ‚Üí Statements (record Œì {entries = []}) 
    substAllStmnts {AST.con [] scope''} r x = x
    substAllStmnts {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
      substAllStmnts  r' (SubstOne.substOneStmnts (inl y) (SubstOne.mkStatements* x))

    {-# TERMINATING #-}
    substAllStmnt : ‚àÄ {Œì} ‚Üí (r : Rec Œì) ‚Üí Stmnt Œì ‚Üí Stmnt (record Œì {entries = []}) 
    substAllStmnt {AST.con [] scope''} r x = x
    substAllStmnt {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
      substAllStmnt  r' (SubstOne.substOneStmnt (inl y) x)

    {-# TERMINATING #-}
    substAllExpr : ‚àÄ {Œì Œ§} ‚Üí (r : Rec Œì) ‚Üí Expr Œì Œ§ ‚Üí Expr (record Œì {entries = []}) Œ§ 
    substAllExpr {AST.con [] scope''} r x = x
    substAllExpr {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
      substAllExpr  r' (SubstOne.substOneExpr (inl y) x)



  -- module SubstAll {ptps : List Identifier} where

  --   open AST.InteractionHead (AST.interactionHead ptps [])

  --   bindingMechanics'* : (c : Œ£ Context Rec) ‚Üí Statement* c ‚Üí Œ£ Context Rec

  --   bindingMechanics'-Rec : {c : Context} ‚Üí Rec c ‚Üí (x : Stmnt c) ‚Üí Rec (bindingMechanics' c x)

  --   Statements* : Œ£ Context Rec ‚Üí Type‚ÇÄ
  --   Statements* = Linked' {A = Statement*} bindingMechanics'* 


    
  --   -- TODO : remove unsafe pragma by stratification on nesting depth
  --   {-# TERMINATING #-}
  --   substAllStmnts : ‚àÄ {Œì} ‚Üí (r : Rec Œì) ‚Üí Statements* (Œì , r) ‚Üí Statements* (emptyContext , _) 

  --   substAllStmnt : ‚àÄ {Œì} ‚Üí Rec Œì ‚Üí Stmnt Œì ‚Üí Stmnt emptyContext 

  --   substAllExpr : ‚àÄ {Œì Œ§} ‚Üí Rec Œì ‚Üí Expr Œì Œ§ ‚Üí Expr Œì Œ§

  --   substAllStmnts-coh : ‚àÄ Œì ‚Üí (r : Rec Œì) ‚Üí (x : Stmnt Œì) ‚Üí
  --                                              (emptyContext , uniqueParams) ‚â°
  --                                              bindingMechanics'* (emptyContext , uniqueParams)
  --                                              (substAllStmnt r x)


  --   bindingMechanics'* c x =
  --      (bindingMechanics' (fst c) x) ,
  --        bindingMechanics'-Rec (snd c) x

  --   bindingMechanics'-Rec r (AST.bindingS (AST.BS-let ce x)) = {!!} , {!r!}
  --   bindingMechanics'-Rec r (AST.bindingS (AST.BS-publish! p x)) = {!!}
  --   bindingMechanics'-Rec r (AST.nonBindingS x) = r


  --   substAllStmnts r =
  --      map-Linked'-map _
  --         (Œª {ŒìRec} ‚Üí substAllStmnt (snd ŒìRec))
  --         Œª ŒìRec ‚Üí  substAllStmnts-coh (fst ŒìRec) (snd ŒìRec)


  --   substAllStmnt = {!!}

  --   substAllExpr = {!!}

  --   substAllStmnts-coh =  {!!} --map-Linked'-map _ h hh


      -- where



      --   h : {Œì : Context}
      --          ‚Üí (b : Stmnt Œì) ‚Üí Stmnt (prependContext ce Œì)


      --   h-expr : {Œì : Context} ‚Üí ‚àÄ {Œ§}
      --          ‚Üí (b : Expr Œì Œ§) ‚Üí Expr (prependContext ce Œì) Œ§


      --   h  (bindingS x) = bindingS (BS-lemma x)
      --      where
      --           BS-lemma : {Œì : Context} ‚Üí  BStmnt Œì -> BStmnt (prependContext ce Œì)
      --           BS-lemma (BS-let x {asn} y) = (BS-let x {asn} (h-expr y))  
      --           BS-lemma (BS-publish! p (psof name‚ÇÅ {w}) {y}) = 
      --             (BS-publish! p (psof name‚ÇÅ {fromWitness (ExistFirstBy-WitchIsAlso-preppend-lemma _ _  (toWitness w))}) {y})


      --   h (nonBindingS x) = nonBindingS (z x)
      --      where

      --        zz : NBStmnt _ ‚Üí NBStmnt _ 
      --        zz (NBS-require! x) = NBS-require! (h-expr x)
      --        zz (NBS-deposit! p {y} x) = NBS-deposit! p {y} (h-expr x)
      --        zz (NBS-withdraw! p {y} x) = NBS-withdraw! p {y} (h-expr x)

      --        z : NBStmnt+Expr _ ‚Üí NBStmnt+Expr _
      --        z (stmntNBS x) =  stmntNBS (zz x)
      --        z (exprNBS x) = exprNBS (h-expr x)

      --   h-expr (var (dsot x {y})) = var (dsot x {fromWitness (
      --       sum-elim (Œª a ‚Üí (inl ((ExistFirstBy-WitchIsAlso-preppend-lemma _ _ a))))
      --        -- TODO : figure it out -- (Œª a ‚Üí var (dsot x {transport (Œª i ‚Üí {!True (ExistFirstBy-WitchIsAlso-preppend-lemma ? ? (fromWitness y) i)!}) y}))
      --        (Œª b ‚Üí empty-elim (lower (proj‚ÇÇ b)))
      --         (toWitness y))})

      --         --(var (dsot name‚ÇÅ {transport {!!} y }))
      --   h-expr (stmnts‚ÇÅ AST.Õæb x) =
      --       prependCtxStmnts stmnts‚ÇÅ AST.Õæb subst (Œª x‚ÇÅ ‚Üí Expr x‚ÇÅ _)
      --        -- TODO : improve evaluation performance by introducing specialized "subst"
      --        -- specialisation should be not only on Expr, but also on map-Linked'-map-fold
      --     (map-Linked'-map-fold ((prependContext ce)) _ _ stmnts‚ÇÅ ) (h-expr x)
      --   h-expr (lit x) = (AST.lit x)

      --   hh : (Œì : Context) (x : Stmnt Œì) ‚Üí
      --      prependContext ce (bindingMechanics' Œì x) ‚â°
      --      bindingMechanics'
      --      (prependContext ce Œì) (h x)
      --   hh _ (bindingS (BS-let _ _)) = refl 
      --   hh _ (AST.bindingS (AST.BS-publish! _ _)) = {!!}
      --   hh _ (nonBindingS _) = refl





-- -- -- module _ (ptps : List IdentifierTy) where

-- -- --   ih = interactionHead ptps [] 

-- -- --   open InteractionHead ih



-- -- --   substVar : (Œì : Context) ‚Üí (ce : ContextEntry) ‚Üí
-- -- --                  Statements (prependContext ce Œì) ‚Üí GTypeAgdaRep (ce .type) ‚Üí Statements Œì
-- -- --   substVar Œì ce x x‚ÇÅ = map-Linked'-map {!prependContext ce!} {!!} {!!} x

  
-- -- -- module ExprEval  (ptps : List IdentifierTy) where

-- -- --   ih = interactionHead ptps [] 

-- -- --   open InteractionHead ih

-- -- --   evalStmnts : (ce : ContextEntry) ‚Üí (vv : GTypeAgdaRep (ce .type)) ‚Üí ‚àÄ scp ‚Üí Statements (InteractionHead.con [ ce ] scp) ‚Üí Statements emptyContext
-- -- --   evalStmnts = {!!}


-- -- --   evalExpr : (ce : ContextEntry) ‚Üí (vv : GTypeAgdaRep (ce .type)) ‚Üí ‚àÄ scp ‚Üí ‚àÄ Œ§ ‚Üí Expr (InteractionHead.con [ ce ] scp) Œ§  ‚Üí Expr emptyContext Œ§
-- -- --   evalExpr ce vv scp Œ§ (v name‚ÇÅ) = lit {!!}
-- -- --   evalExpr ce vv scp Œ§ ([]L Õæb expr‚ÇÅ) = evalExpr ce vv scp Œ§ expr‚ÇÅ
  
-- -- --   evalExpr ce vv scp Œ§ (bindingS (BS-let ce‚ÇÅ {y} x) Õæ stmnts‚ÇÅ Õæb expr‚ÇÅ) =
-- -- --     let x' = evalExpr ce vv (con [ ce ] (narrowScope (con [ ce ] scp) (scope ce‚ÇÅ) y) .scope') (ce‚ÇÅ .type) x
-- -- --     in {!x'!}
-- -- --   evalExpr ce vv scp Œ§ (bindingS (BS-publish! p x) Õæ stmnts‚ÇÅ Õæb expr‚ÇÅ) = {!!}
  
-- -- --   evalExpr ce vv scp Œ§ (nonBindingS _ Õæ stmnts‚ÇÅ Õæb expr‚ÇÅ) = evalExpr ce vv scp Œ§ (stmnts‚ÇÅ Õæb expr‚ÇÅ)
    
-- -- --   evalExpr ce vv scp Œ§ (lit x) = lit x



-- -- module ExprEval  (ptps : List IdentifierTy) where

-- --   ih = interactionHead ptps [] 

-- --   open InteractionHead ih

  



-- --   {-# TERMINATING #-}
-- --   sbstVarStmnts : (Œì : Context) ‚Üí (ce : ContextEntry) ‚Üí AType ce ‚Üí
-- --                              Statements (addToContext Œì ce) ‚Üí Statements Œì

-- --   sbstVarStmnt : (ce : ContextEntry) ‚Üí AType ce ‚Üí {Œì : Context}  ‚Üí
-- --                              Stmnt (addToContext Œì ce) ‚Üí Stmnt Œì

-- --   sbstVarNBStmnt : (ce : ContextEntry) ‚Üí AType ce ‚Üí {Œì : Context}  ‚Üí
-- --                              NBStmnt+Expr (addToContext Œì ce) ‚Üí NBStmnt+Expr Œì

-- --   sbstVarBStmnt : (ce : ContextEntry) ‚Üí AType ce ‚Üí {Œì : Context}  ‚Üí
-- --                              BStmnt (addToContext Œì ce) ‚Üí BStmnt Œì

-- --   sbstVarExpr : (ce : ContextEntry) ‚Üí AType ce ‚Üí {Œì : Context}  ‚Üí ‚àÄ Œ§ ‚Üí 
-- --                               Expr (addToContext Œì ce) Œ§ ‚Üí Expr Œì Œ§


-- --   sbstVarStmnt-coh : (ce : ContextEntry) ‚Üí (vv : AType ce) ‚Üí {Œì : Context} {x : Stmnt (addToContext Œì ce)} ‚Üí
-- --                             bindingMechanics' (addToContext Œì ce) x
-- --                             ‚â° addToContext (bindingMechanics'  Œì (sbstVarStmnt ce vv x)) ce


-- --   sbstVarStmnts-coh : (ce : ContextEntry) ‚Üí (vv : AType ce) ‚Üí {Œì : Context} (x : Statements (addToContext Œì ce)) ‚Üí
-- --                             foldLinked' x
-- --                             ‚â°
-- --                             addToContext (foldLinked' (sbstVarStmnts Œì ce vv x)) ce


-- --   sbstVarStmnt ce vv {Œì} (bindingS x) = bindingS (sbstVarBStmnt ce vv {Œì} x)
-- --   sbstVarStmnt ce vv {Œì} (nonBindingS x) = nonBindingS (sbstVarNBStmnt ce vv {Œì} x)
    

  
-- --   sbstVarStmnts Œì ce vv = 
-- --      map-Linked'-map-bck
-- --         (Œª x ‚Üí addToContext x ce)
-- --         (sbstVarStmnt ce vv) (sbstVarStmnt-coh ce vv)


-- --   sbstVarNBStmnt ce vv {Œì} (stmntNBS (NBS-require! x)) =  stmntNBS (NBS-require! (sbstVarExpr ce vv {Œì} _ x))
-- --   sbstVarNBStmnt ce vv {Œì} (stmntNBS (NBS-deposit! x {y} x‚ÇÅ)) = stmntNBS (NBS-deposit! x {y} (sbstVarExpr ce vv {Œì} _ x‚ÇÅ))
-- --   sbstVarNBStmnt ce vv {Œì} (stmntNBS (NBS-withdraw! x {y} x‚ÇÅ)) = stmntNBS (NBS-withdraw! x {y} (sbstVarExpr ce vv {Œì} _ x‚ÇÅ))
  
-- --   sbstVarNBStmnt ce vv {Œì} (exprNBS x) = exprNBS (sbstVarExpr ce vv {Œì} _ x)

-- --   sbstVarBStmnt ce vv {Œì} (BS-let ce‚ÇÅ {asn} x) = BS-let ce‚ÇÅ {asn} (sbstVarExpr ce vv _ x) 
-- --   sbstVarBStmnt ce vv {Œì} (BS-publish! p (psof name‚ÇÅ {z}) {y}) = {!!}
-- --                                -- BS-publish! p (sbstVarPrivateSymbolOf ce vv p x ) {y}

-- --   sbstVarExpr ce vv {Œì} Œ§ (var x) = {!!}
  
-- --   sbstVarExpr ce vv {Œì} Œ§ (stmnts‚ÇÅ Õæb expr‚ÇÅ) = 
-- --       sbstVarStmnts Œì ce vv stmnts‚ÇÅ
-- --             Õæb sbstVarExpr ce vv Œ§ (subst (Œª x ‚Üí Expr x Œ§) (sbstVarStmnts-coh ce vv stmnts‚ÇÅ) expr‚ÇÅ) 
         
         
-- --   sbstVarExpr ce vv {Œì} Œ§ (lit x) = lit x


-- --   sbstVarStmnt-coh ce vv {x = bindingS (BS-let ce‚ÇÅ x)} = {!refl!}
-- --   sbstVarStmnt-coh ce vv {x = bindingS (BS-publish! p x)} = {!!}
-- --   sbstVarStmnt-coh ce vv {x = nonBindingS x} = refl

-- --   sbstVarStmnts-coh ce vv =
-- --     map-Linked'-map-fold-bck
-- --         (Œª x ‚Üí addToContext x ce)
-- --         (sbstVarStmnt ce vv) (sbstVarStmnt-coh ce vv)










-- -- -- module EvalFwd (ptps : List IdentifierTy) where

-- -- --   ih = interactionHead ptps [] 

-- -- --   open InteractionHead ih

   

-- -- --   preppend-narrow-comm : (Œì : Context) ‚Üí (ce : ContextEntry) ‚Üí ‚àÄ scp ‚Üí ‚àÄ narrowOk ‚Üí ‚àÄ  narrowOk' ‚Üí 
-- -- --                                    prependContext ce (narrow Œì scp narrowOk) ‚â°
-- -- --                                         narrow (prependContext ce Œì) scp narrowOk'
-- -- --   preppend-narrow-comm = {!!}

-- -- --   {-# TERMINATING #-}
-- -- --   prependContextStmnts : (Œì : Context) ‚Üí (ce : ContextEntry) ‚Üí
-- -- --                              Statements Œì ‚Üí Statements (prependContext ce Œì)

-- -- --   prependContextStmnt : (ce : ContextEntry) ‚Üí {Œì : Context}  ‚Üí
-- -- --                              Stmnt Œì ‚Üí Stmnt (prependContext ce Œì)

-- -- --   prependContextNBStmnt : (ce : ContextEntry) ‚Üí {Œì : Context}  ‚Üí
-- -- --                              NBStmnt+Expr Œì ‚Üí NBStmnt+Expr (prependContext ce Œì)

-- -- --   prependContextBStmnt : (ce : ContextEntry) ‚Üí {Œì : Context}  ‚Üí
-- -- --                              BStmnt Œì ‚Üí BStmnt (prependContext ce Œì)

-- -- --   prependContextExpr : (ce : ContextEntry) ‚Üí {Œì : Context}  ‚Üí ‚àÄ Œ§ ‚Üí 
-- -- --                               Expr Œì Œ§ ‚Üí Expr (prependContext ce Œì) Œ§

-- -- --   prependContextPrivateSymbolOf : (ce : ContextEntry) ‚Üí {Œì : Context}  ‚Üí ‚àÄ p ‚Üí 
-- -- --                               PrivateSymbolOf Œì p ‚Üí PrivateSymbolOf (prependContext ce Œì) p

-- -- --   prependContextIsDefinedSymbolOfTy : (ce : ContextEntry) ‚Üí {Œì : Context}  ‚Üí ‚àÄ {Œ§} ‚Üí ‚àÄ s ‚Üí 
-- -- --                               ‚ü® IsDefinedSymbolOfTy Œì Œ§ s ‚ü© ‚Üí ‚ü® IsDefinedSymbolOfTy (prependContext ce Œì) Œ§ s ‚ü© 


-- -- --   postulate prependContextStmnt-coh : (ce : ContextEntry) {Œì : Context} {x : Stmnt Œì} ‚Üí
-- -- --                             prependContext ce (bindingMechanics'  Œì x)
-- -- --                             ‚â°
-- -- --                             bindingMechanics' (prependContext ce Œì) (prependContextStmnt ce x)


-- -- --   prependContextStmnts-coh : (ce : ContextEntry) {Œì : Context} (x : Statements Œì) ‚Üí
-- -- --                             prependContext ce (foldLinked' x)
-- -- --                             ‚â°
-- -- --                             foldLinked' (prependContextStmnts Œì ce x)


-- -- --   prependContextStmnt ce {Œì} (bindingS x) = bindingS (prependContextBStmnt ce {Œì} x)
-- -- --   prependContextStmnt ce {Œì} (nonBindingS x) = nonBindingS (prependContextNBStmnt ce {Œì} x)

-- -- --   prependContextPrivateSymbolOf ce {con ents scope''} p x =
-- -- --     psof (x .name) {  subst (Œª fbe ‚Üí fst
-- -- --                               (Bool‚ÜíType'
-- -- --                                (recMaybe false
-- -- --                                 (Œª y ‚Üí
-- -- --                                    recMaybe false (Œª p' ‚Üí primStringEquality (name p) (name p'))
-- -- --                                    (scope y))
-- -- --                                 fbe ))) (findBy-preppend  _ ents ce ((lemma-mb-rec _ (x .isDefinedSymbolOf)))) (x .isDefinedSymbolOf)}

-- -- --   prependContextIsDefinedSymbolOfTy ce {con ents scope''} {Œ§} s x =
-- -- --     subst (Œª v ‚Üí fst (Bool‚ÜíType'
-- -- --        (recMaybe false
-- -- --         (Œª y ‚Üí
-- -- --            (con ents scope'' InteractionHead.canAccessTest scope'') (scope y)
-- -- --            and GTy== (type y) Œ§)
-- -- --         v))) (findBy-preppend  _ ents ce ((lemma-mb-rec _ x))) x

-- -- --   prependContextStmnts Œì ce =
-- -- --      map-Linked'-map
-- -- --         (prependContext ce)
-- -- --         (prependContextStmnt ce) (prependContextStmnt-coh ce)


-- -- --   prependContextNBStmnt ce {Œì} (stmntNBS (NBS-require! x)) =  stmntNBS (NBS-require! (prependContextExpr ce {Œì} _ x))
-- -- --   prependContextNBStmnt ce {Œì} (stmntNBS (NBS-deposit! x {y} x‚ÇÅ)) = stmntNBS (NBS-deposit! x {y} (prependContextExpr ce {Œì} _ x‚ÇÅ))
-- -- --   prependContextNBStmnt ce {Œì} (stmntNBS (NBS-withdraw! x {y} x‚ÇÅ)) = stmntNBS (NBS-withdraw! x {y} (prependContextExpr ce {Œì} _ x‚ÇÅ))
  
-- -- --   prependContextNBStmnt ce {Œì} (exprNBS x) = exprNBS (prependContextExpr ce {Œì} _ x)

-- -- --   prependContextBStmnt ce {Œì} (BS-let ce‚ÇÅ {asn} x) =
-- -- --                                let (asn' , x') = maybe-elim
-- -- --                                            {B = Œª scope* ‚Üí
-- -- --                                                 Œ£ ‚ü® AllowedScopeNarrowing Œì scope* ‚ü© (Œª asn ‚Üí Expr (narrow Œì scope* asn) (type ce‚ÇÅ))
-- -- --                                                       ‚Üí Œ£ ‚ü® AllowedScopeNarrowing (prependContext ce Œì) scope* ‚ü©
-- -- --                                                              (Œª asn ‚Üí Expr (narrow (prependContext ce Œì) scope* asn) (type ce‚ÇÅ))}
-- -- --                                            (Œª x ‚Üí tt* , subst (Œª y ‚Üí Expr y (type ce‚ÇÅ)) (preppend-narrow-comm Œì _ _ _ _) (prependContextExpr ce _ (snd x)))
-- -- --                                            (Œª _ x ‚Üí fst x , subst (Œª y ‚Üí Expr y (type ce‚ÇÅ)) (preppend-narrow-comm Œì _ _ (fst x) (fst x)) (prependContextExpr ce _ (snd x)) )
-- -- --                                            (ce‚ÇÅ .scope) (asn , x)
-- -- --                                in BS-let ce‚ÇÅ {asn'} x'
-- -- --   prependContextBStmnt ce {Œì} (BS-publish! p x {y}) =
-- -- --                                BS-publish! p (prependContextPrivateSymbolOf ce p x ) {y}

-- -- --   prependContextExpr ce {Œì} Œ§ (var x) = var (dsot (x .name) {prependContextIsDefinedSymbolOfTy ce {Œì} {Œ§} (x .name) (x .isDefinedSymbolOfTy)})
-- -- --   prependContextExpr ce {Œì} Œ§ (stmnts‚ÇÅ Õæb expr‚ÇÅ) =
-- -- --       let expr* = prependContextExpr ce Œ§ expr‚ÇÅ
-- -- --       in prependContextStmnts Œì ce stmnts‚ÇÅ Õæb
-- -- --            subst (Œª y ‚Üí Expr y Œ§) (prependContextStmnts-coh ce stmnts‚ÇÅ) expr*
         
-- -- --   prependContextExpr ce {Œì} Œ§ (lit x) = lit x


-- -- --   -- prependContextStmnt-coh = {!!}

-- -- --   prependContextStmnts-coh ce = map-Linked'-map-fold _ _ _
