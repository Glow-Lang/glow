
{-# OPTIONS --cubical  #-}
module Glow.Simple.VarSubst where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum renaming (elim to sum-elim ; rec to sum-rec ; map to sum-map)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_)  renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.Simple.AST

open import Glow.DecEqMore

open import Glow.Simple.ContextMore

open import Cubical.HITs.Interval

module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}} where



  module AlwaysCanPrepend {ptps : List Identifier} (ce : AST.ContextEntry (AST.interactionHead ptps []) ) where

    open AST.InteractionHead {prop-mode = one} (AST.interactionHead ptps []) 


    
    -- TODO : remove unsafe pragma by stratification on nesting depth
    {-# TERMINATING #-}
    prependCtxStmnts : ‚àÄ {Œì : _} ‚Üí Statements Œì ‚Üí Statements (prependContext ce Œì) 



    prependCtxStmnts = map-Linked'-map _ h  hh
      where



        h : {Œì : Context}
               ‚Üí (b : Stmnt Œì) ‚Üí Stmnt (prependContext ce Œì)


        h-expr : {Œì : Context} ‚Üí ‚àÄ {Œ§}
               ‚Üí (b : Expr Œì Œ§) ‚Üí Expr (prependContext ce Œì) Œ§


        h  (bindingS x) = bindingS (BS-lemma x)
           where
                BS-lemma : {Œì : Context} ‚Üí  BStmnt Œì -> BStmnt (prependContext ce Œì)
                BS-lemma (BS-let x {asn} y) = (BS-let x {asn} (h-expr y))  
                BS-lemma (BS-publish! p (psof name‚ÇÅ {w}) {y}) = 
                  (BS-publish! p (psof name‚ÇÅ {(ExistFirstBy-WitchIsAlso-preppend-lemma _ _ w)}) {y})


        h (nonBindingS x) = nonBindingS (z x)
           where

             zz : NBStmnt _ ‚Üí NBStmnt _ 
             zz (NBS-require! x) = NBS-require! (h-expr x)
             zz (NBS-deposit! p {y} x) = NBS-deposit! p {y} (h-expr x)
             zz (NBS-withdraw! p {y} x) = NBS-withdraw! p {y} (h-expr x)

             z : NBStmnt+Expr _ ‚Üí NBStmnt+Expr _
             z (stmntNBS x) =  stmntNBS (zz x)
             z (exprNBS x) = exprNBS (h-expr x)

        h-expr (var (dsot x {y})) = var (dsot x { (
            sum-elim (Œª a ‚Üí (inl ((ExistFirstBy-WitchIsAlso-preppend-lemma _ _ a))))
             -- TODO : figure it out -- (Œª a ‚Üí var (dsot x {transport (Œª i ‚Üí {!True (ExistFirstBy-WitchIsAlso-preppend-lemma ? ? (fromWitness y) i)!}) y}))
             (Œª b ‚Üí empty-elim (lower (proj‚ÇÇ b)))
              y)})

              --(var (dsot name‚ÇÅ {transport {!!} y }))
        h-expr (stmnts‚ÇÅ AST.Õæb x) =
            prependCtxStmnts stmnts‚ÇÅ AST.Õæb subst (Œª x‚ÇÅ ‚Üí Expr x‚ÇÅ _)
             -- TODO : improve evaluation performance by introducing specialized "subst"
             -- specialisation should be not only on Expr, but also on map-Linked'-map-fold
          (map-Linked'-map-fold ((prependContext ce)) _ _ stmnts‚ÇÅ ) (h-expr x)
        h-expr (lit x) = (AST.lit x)
        h-expr (input msg {y}) = input msg {y}
        h-expr (if b then t else f) = if (h-expr b) then (h-expr t) else (h-expr f)

        postulate hh : (Œì : Context) (x : Stmnt Œì) ‚Üí
                           prependContext ce (bindingMechanics' Œì x) ‚â°
                           bindingMechanics'
                           (prependContext ce Œì) (h x)
        -- hh _ (bindingS (BS-let _ _)) = refl 
        -- hh _ (AST.bindingS (AST.BS-publish! _ _)) = {!!}
        -- hh _ (nonBindingS _) = refl


  -- TODO : provide alternative implementation, substituting multiple variables in one pass, compare performance
  module SubstOne {ptps : List Identifier} where

    open AST.InteractionHead  {prop-mode = one} (AST.interactionHead ptps [])




    bindingMechanics'* : (c : Œ£ Context Subst) ‚Üí Statement* c ‚Üí Œ£ Context Subst

    bindingMechanics'-Subst : {c : Context} ‚Üí Subst c ‚Üí (x : Stmnt c) ‚Üí Subst (bindingMechanics' c x)


    Statements* : Œ£ Context Subst ‚Üí Type‚ÇÄ
    Statements* = Linked' {A = Statement*} bindingMechanics'* 


    bindingMechanics'-Subst r (AST.bindingS (AST.BS-let ce x)) = inr r
    bindingMechanics'-Subst r (AST.bindingS (AST.BS-publish! p x {z})) = publish-substlemma r p x z   
       


    bindingMechanics'-Subst r (AST.nonBindingS x) = r

    -- move as more general property to Glow.Linked' module
    mkStatements* : ‚àÄ {Œì r} ‚Üí Statements Œì ‚Üí Statements* (Œì , r)
    mkStatements* []L = []L
    mkStatements* (h ‚à∑L x) = h ‚à∑L mkStatements*  x


    fold*-lemma : ‚àÄ {Œì : Context}
                    (stmnts‚ÇÅ : Statements Œì) ‚Üí ‚àÄ (r) ‚Üí                   
                   fst (foldLinked' (mkStatements* {_} {r} stmnts‚ÇÅ)) ‚â° foldLinked' stmnts‚ÇÅ
    fold*-lemma []L r = refl
    fold*-lemma (h ‚à∑L stmnts‚ÇÅ) x = fold*-lemma  (stmnts‚ÇÅ) (bindingMechanics'-Subst x h) 


    -- TODO : remove unsafe pragma by stratification on nesting depth
    {-# TERMINATING #-}
    substOneStmnts : ‚àÄ {Œì} ‚Üí (r : Subst Œì) ‚Üí Statements* (Œì , r) ‚Üí Statements (remSubst Œì r) 

    substOneStmnt : ‚àÄ {Œì} ‚Üí (r : Subst Œì) ‚Üí Stmnt Œì ‚Üí Stmnt (remSubst Œì r)

    substOneExpr : ‚àÄ {Œì Œ§} ‚Üí (r : Subst Œì) ‚Üí Expr Œì Œ§ ‚Üí Expr (remSubst Œì r) Œ§

    substOneStmnts-coh :  ‚àÄ Œì ‚Üí (r : Subst Œì) ‚Üí (x : Stmnt Œì) ‚Üí
                                                    remSubst (fst (bindingMechanics'* (Œì , r) x))
                                                      (snd (bindingMechanics'* (Œì , r) x))
                                                      ‚â° bindingMechanics' (remSubst Œì r) (substOneStmnt r x)


    evalVar' : ‚àÄ (Œì) ‚Üí ‚àÄ {Œ§} ‚Üí ‚àÄ nm ‚Üí ‚ü® IsDefinedSymbolOfTy Œì Œ§ nm ‚ü© ‚Üí (r : Subst Œì) ‚Üí ‚ü® IsDefinedSymbolOfTy (remSubst Œì r) Œ§ nm ‚ü© ‚äé GTypeAgdaRep Œ§ 
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inl x)) (inl x‚ÇÇ) = inr (subst‚Åª GTypeAgdaRep (proj‚ÇÇ (proj‚ÇÇ x)) x‚ÇÇ)
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inr x)) (inl x‚ÇÇ) =
       inl (inl (ExistFirstBy-WitchIsAlso-FilterOut-lemma entries‚ÇÅ (Œª a x‚ÇÉ y ‚Üí proj‚ÇÅ x (x‚ÇÉ ‚àô sym y)) (proj‚ÇÇ x)))
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inl x)) (inr x‚ÇÇ) = inl (inl (inl x))
    evalVar' (AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'') nm (inl (inr x)) (inr x‚ÇÇ) =
      let z = evalVar' (AST.con (entries‚ÇÅ) scope'') nm (inl (proj‚ÇÇ x)) x‚ÇÇ
      in sum-map (sum-map (inr ‚àò (proj‚ÇÅ x ,_)) Œª x‚ÇÉ ‚Üí empty-elim (lower (proj‚ÇÇ x‚ÇÉ))) (idfun _) z
    evalVar' Œì nm (inr (x , ())) r
  
    bindingMechanics'* c x = 
       (bindingMechanics' (fst c) x) ,
         bindingMechanics'-Subst (snd c) x


    substOneStmnts r = 
       map-Linked'-map _
          (Œª {ŒìRec} ‚Üí substOneStmnt (snd ŒìRec))
          Œª ŒìRec ‚Üí  substOneStmnts-coh (fst ŒìRec) (snd ŒìRec)


    substOneStmnt r (AST.bindingS (AST.BS-let ce {y} x )) =
       let x' = substOneExpr r x
       in (AST.bindingS (AST.BS-let ce {y} x' ))

    substOneStmnt r (AST.bindingS (AST.BS-publish! p (AST.psof name {w}) {y})) =
      sum-elim
         (Œª w ‚Üí (AST.bindingS (AST.BS-publish! p (AST.psof name {proj‚ÇÇ w}) {y})))
         (Œª _ ‚Üí blankStmnt)
        (ExistFirstBy-WitchIsAlso-remSubs-lemm {p = p} _ r w) 

   
    
    substOneStmnt r (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! x))) =
                      (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! (substOneExpr r x))))
    substOneStmnt r (AST.nonBindingS (AST.stmntNBS (AST.NBS-deposit! x {z} x‚ÇÅ ))) =
                     (AST.nonBindingS (AST.stmntNBS (AST.NBS-deposit! x {z} (substOneExpr r x‚ÇÅ))))
    substOneStmnt r (AST.nonBindingS (AST.stmntNBS (AST.NBS-withdraw! x {z} x‚ÇÅ))) =
                    (AST.nonBindingS (AST.stmntNBS (AST.NBS-withdraw! x {z} (substOneExpr r x‚ÇÅ))))
    
    substOneStmnt r (AST.nonBindingS (AST.exprNBS x)) = (AST.nonBindingS (AST.exprNBS (substOneExpr r x))) 

    substOneExpr r (AST.var (AST.dsot name {y})) =
      sum-elim
        (Œª y ‚Üí (AST.var (AST.dsot name {y})))
        lit
        (evalVar' _ name y r)
    
    substOneExpr r (AST.body (AST.bodyR stmnts‚ÇÅ expr‚ÇÅ)) =
       let q = foldLinked' (mkStatements* {_} {r} stmnts‚ÇÅ)
           e' = substOneExpr (subst (Subst) (fold*-lemma stmnts‚ÇÅ r) (snd q)) expr‚ÇÅ
           stmnts' = substOneStmnts r (mkStatements* stmnts‚ÇÅ)
           p = map-Linked'-map-fold _ _
                         (Œª ŒìRec ‚Üí  substOneStmnts-coh (fst ŒìRec) (snd ŒìRec)) (mkStatements* {_} {r} stmnts‚ÇÅ)
 
        in stmnts' AST.Õæb subst‚Åª (Œª x‚ÇÅ ‚Üí Expr x‚ÇÅ _) ( sym p ‚àô
            Œª i ‚Üí remSubst ((fold*-lemma stmnts‚ÇÅ r) i) (subst-filler Subst (fold*-lemma stmnts‚ÇÅ r) ((snd (foldLinked' (mkStatements* stmnts‚ÇÅ)))) i)           
           ) e'
    substOneExpr r (AST.lit x) = (AST.lit x)
    substOneExpr r (AST.input x {y}) = (AST.input x {y})
    substOneExpr r (AST.if x then x‚ÇÅ else x‚ÇÇ) = (AST.if (substOneExpr r x) then (substOneExpr r x‚ÇÅ) else (substOneExpr r x‚ÇÇ))


    publish-subst-lemma : ‚àÄ {Œì} ‚Üí (r : Subst Œì) ‚Üí ‚àÄ p ‚Üí ‚àÄ nm ‚Üí ‚àÄ w ‚Üí ‚àÄ q ‚Üí 
                           remSubst
                               (fst
                                (bindingMechanics'* (Œì , r)
                                 (bindingS (BS-publish! p (psof nm {w}) {q}))))
                               (snd
                                (bindingMechanics'* (Œì , r)
                                 (bindingS (BS-publish! p (psof nm {w}) {q}))))
                               ‚â°
                               bindingMechanics' (remSubst Œì r)
                               (substOneStmnt r (bindingS (BS-publish! p (psof nm {w}) {q})))
    publish-subst-lemma {AST.con entries‚ÇÅ scope''} r p nm w q with (ExistFirstBy-WitchIsAlso-remSubs-lemm {p = p} (entries‚ÇÅ) r w) 
    ... | inl x‚ÇÅ = cong (Œª xx ‚Üí con xx scope'') (map-ExistingFirstBy-lemma3 {cs = entries‚ÇÅ} _ _ _ _ (proj‚ÇÅ x‚ÇÅ) (proj‚ÇÇ x‚ÇÅ))
    ... | inr x‚ÇÅ = cong (Œª xx ‚Üí con xx scope'') (map-ExistingFirstBy-lemma2 {cs = entries‚ÇÅ} _ _ _ _ (proj‚ÇÅ x‚ÇÅ))
    
    substOneStmnts-coh Œì r (AST.bindingS (AST.BS-let ce x)) = refl
    substOneStmnts-coh Œì r (AST.bindingS (AST.BS-publish! p (AST.psof name {w}) {q})) = publish-subst-lemma {Œì} r p name w q
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! x))) = refl
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.stmntNBS (AST.NBS-deposit! x x‚ÇÅ))) = refl
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.stmntNBS (AST.NBS-withdraw! x x‚ÇÅ))) = refl
    substOneStmnts-coh Œì r (AST.nonBindingS (AST.exprNBS x)) = refl


  module SubstAll {ptps : List Identifier} where

    open AST.InteractionHead  {prop-mode = one} (AST.interactionHead ptps [])

    {-# TERMINATING #-}
    substAllStmnts : ‚àÄ {Œì} ‚Üí (r : Rec Œì) ‚Üí Statements Œì ‚Üí Statements (record Œì {entries = []}) 
    substAllStmnts {AST.con [] scope''} r x = x
    substAllStmnts {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
      substAllStmnts  r' (SubstOne.substOneStmnts (inl y) (SubstOne.mkStatements* x))

    {-# TERMINATING #-}
    substAllStmnt : ‚àÄ {Œì} ‚Üí (r : Rec Œì) ‚Üí Stmnt Œì ‚Üí Stmnt (record Œì {entries = []}) 
    substAllStmnt {AST.con [] scope''} r x = x
    substAllStmnt {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
      substAllStmnt  r' (SubstOne.substOneStmnt (inl y) x)

    {-# TERMINATING #-}
    substAllExpr : ‚àÄ {Œì Œ§} ‚Üí (r : Rec Œì) ‚Üí Expr Œì Œ§ ‚Üí Expr (record Œì {entries = []}) Œ§ 
    substAllExpr {AST.con [] scope''} r x = x
    substAllExpr {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
      substAllExpr  r' (SubstOne.substOneExpr (inl y) x)



module Test where

  open SubstOne {String} {{String-Discrete-postulated}} {"A" ‚à∑ "B" ‚à∑ []}

  -- open AST.InteractionHead  {prop-mode = true} (AST.interactionHead ptps [])

  -- test-stmnts : {!Statements ?!}
  -- test-stmnts = {!!}
