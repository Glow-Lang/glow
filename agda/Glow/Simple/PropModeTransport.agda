
{-# OPTIONS --cubical  #-}
module Glow.Simple.PropModeTransport where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.DecEqMore

open import Glow.Simple.AST



module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}} where

  
  open AST Identifier {{IsDiscrete-Identifier = IsDiscrete-Identifier}}

  pmtIdentifierWithType : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí IdentifierWithType b‚ÇÅ ‚Üí IdentifierWithType b‚ÇÇ
  pmtIdentifierWithType (name‚ÇÅ ‚à∂ type‚ÇÅ) = name‚ÇÅ ‚à∂ type‚ÇÅ



-- AST.interactionHead ( x .participants) (map-List pmtIdentifierWithType (x .parameters)) {{!x .uniqueParams!}}
  {-# TERMINATING #-}
  pmtIh : ‚àÄ {b‚ÇÅ b‚ÇÇ} ‚Üí InteractionHead b‚ÇÅ ‚Üí InteractionHead b‚ÇÇ
  pmtIh {b‚ÇÇ = b‚ÇÇ} (AST.interactionHead participants‚ÇÅ []) = AST.interactionHead participants‚ÇÅ [] {PropMode.fromWitness' b‚ÇÇ _ }
  pmtIh {b‚ÇÅ} {b‚ÇÇ} (AST.interactionHead participants‚ÇÅ (name‚ÇÅ ‚à∂ type‚ÇÅ ‚à∑ parameters‚ÇÅ) {yy}) = 
     let z = (pmtIh (AST.interactionHead participants‚ÇÅ (parameters‚ÇÅ) {PropMode.fromWitness' b‚ÇÅ (proj‚ÇÇ (PropMode.toWitness' b‚ÇÅ yy)) }))
     in  record z { parameters = (name‚ÇÅ ‚à∂ type‚ÇÅ) ‚à∑ (z .parameters)
                  ; uniqueParams = PropMode.fromWitness' b‚ÇÇ ( {! (proj‚ÇÅ (PropMode.toWitness' b‚ÇÅ yy))!} , PropMode.toWitness' b‚ÇÇ (z .uniqueParams))
                  }

  
