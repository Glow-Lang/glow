
{-# OPTIONS --cubical  #-}
module Glow.Simple.ContextMoreGT where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.DecEqMore

open import Glow.Simple.AST

open import Cubical.HITs.Interval


module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}}
            {BuilitInsIndex : Type‚ÇÄ} {{IsDiscrete-BuilitInsIndex : IsDiscrete BuilitInsIndex}}
              {builtIns : BuiltIns' BuilitInsIndex {{IsDiscrete-BuilitInsIndex}}} where

  -- prop-mode = one
  
  -- open AST Identifier prop-mode

  open PropMode one 

  -- open AST Identifier

  module _ {ptps : List Identifier} where
  
    -- module AST* = AST Identifier builtIns one

    open AST.InteractionHead {Identifier} {builtIns = builtIns} {one} (AST.interactionHead ptps []) 

     
    Subst' : List ContextEntry ‚Üí Type‚ÇÄ
    Subst' [] = Empty
    Subst' (x ‚à∑ x‚ÇÅ) = AType x ‚äé Subst' x‚ÇÅ 


    Subst : Context ‚Üí Type‚ÇÄ
    Subst = Subst' ‚àò entries 

    remSubst' : ‚àÄ l ‚Üí Subst' l ‚Üí List ContextEntry
    remSubst' (x‚ÇÅ ‚à∑ l) (inl x) = (fst (FilterOut (((ce-name x‚ÇÅ) ‚â°_) ‚àò ce-name) l))
    remSubst' (x‚ÇÅ ‚à∑ l) (inr x) = x‚ÇÅ ‚à∑ remSubst' l x

    -- remSubst : ‚àÄ Œì ‚Üí Subst Œì ‚Üí Context
    -- remSubst Œì x = record Œì { entries = remSubst' (Œì .entries) x }



    -- {-# TERMINATING #-}
    -- Rec' : List ContextEntry ‚Üí Type‚ÇÄ
    -- Rec' [] = Unit
    -- Rec' (x ‚à∑ x‚ÇÅ) = AType x √ó Rec' (fst (FilterOut (((ce-name x) ‚â°_) ‚àò ce-name) x‚ÇÅ))

    -- Rec : Context ‚Üí Type‚ÇÄ
    -- Rec = Rec' ‚àò entries 

    -- Statement* : ‚àÄ { B : Context ‚Üí Type‚ÇÄ } ‚Üí Œ£ Context B ‚Üí Type‚ÇÄ
    -- Statement* = Stmnt ‚àò fst

    -- -- data IOs : Type‚ÇÄ where
    -- --   inputBy : IOs
    -- --   timedOutInput

    -- -- toConsensusCodeStmnt : ‚àÄ {s} ‚Üí Stmnt (con [] s) ‚Üí Stmnt emptyContext
    -- -- toConsensusCodeStmnt {nothing} x = x
    -- -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.bindingS x) = {!!}
    -- -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! x))) = (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! {!!})))
    -- -- toConsensusCodeStmnt {just x‚ÇÅ} (AST.nonBindingS (AST.exprNBS x)) = {!!}

    -- map-ExistingFirstBy-lemma : {cs : List ContextEntry}
    --                    (B : ContextEntry ‚Üí Type‚ÇÄ) (B' : ContextEntry ‚Üí Type‚ÇÄ)
                       
    --                    (z : ExistFirstBy B WitchIsAlso B' cs) ‚Üí
    --                    (f : ContextEntry ‚Üí Scope)
    --                    (r : Subst' cs) ‚Üí Subst' (map-ExistingFirstBy B WitchIsAlso B' cs z Œª x x‚ÇÅ x‚ÇÇ ‚Üí record x { scope = f x })
    -- map-ExistingFirstBy-lemma {x ‚à∑ cs} B B' (inl x‚ÇÅ) f = idfun _
    -- map-ExistingFirstBy-lemma {x ‚à∑ cs} B B' (inr x‚ÇÅ) f = map-sum (idfun _) (map-ExistingFirstBy-lemma {cs} B B' (proj‚ÇÇ x‚ÇÅ) f)


    -- publish-substlemma : {c : Context} (r : Subst c)
    --                    (p : AST.ParticipantId (AST.interactionHead ptps parameters))
    --                    (x : AST.PrivateSymbolOf c p)
    --                    (z : ‚ü® AST.IsConsensus c ‚ü©) ‚Üí
    --                  Subst (bindingMechanics' c (bindingS (BS-publish! p x {z})))
    -- publish-substlemma r p x _ = map-ExistingFirstBy-lemma (Œª x‚ÇÅ ‚Üí psof-name _ x ‚â° AST.name x‚ÇÅ) (Œª y ‚Üí
    --                                                                                               recMaybe Empty (Œª p' ‚Üí AST.pId-name _ _ _ p ‚â° AST.pId-name _ _ _ p')
    --                                                                                               (AST.scope y))  (psof-proof _ x) (Œª _ ‚Üí nothing) r


    -- SubstMatchEntry : ‚àÄ {‚Ñì} (B' : ContextEntry ‚Üí Type ‚Ñì) ‚Üí (l : List ContextEntry) ‚Üí (nm : Identifier)
    --                  ‚Üí (r : Subst' l)
    --                  ‚Üí ExistFirstBy ((nm ‚â°_) ‚àò ce-name)
    --                      WitchIsAlso B' l
    --                        ‚Üí Type‚ÇÄ
    -- SubstMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inl x) (inl x‚ÇÇ) = Unit
    -- SubstMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inl x) (inr x‚ÇÇ) = Empty
    -- SubstMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inr x) (inl x‚ÇÇ) = Empty
    -- SubstMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inr x) (inr x‚ÇÇ) = SubstMatchEntry B' (l) nm (x) (proj‚ÇÇ x‚ÇÇ)

    -- SubstNotMatchEntry : ‚àÄ {‚Ñì} (B' : ContextEntry ‚Üí Type ‚Ñì) ‚Üí (l : List ContextEntry) ‚Üí (nm : Identifier)
    --                  ‚Üí (r : Subst' l)
    --                  ‚Üí ExistFirstBy ((nm ‚â°_) ‚àò ce-name)
    --                      WitchIsAlso B' l
    --                        ‚Üí Type‚ÇÄ
    -- SubstNotMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inl x) (inl x‚ÇÇ) = Empty
    -- SubstNotMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inl x) (inr x‚ÇÇ) = Unit
    -- SubstNotMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inr x) (inl x‚ÇÇ) = Unit
    -- SubstNotMatchEntry B' (x‚ÇÅ ‚à∑ l) nm (inr x) (inr x‚ÇÇ) = SubstNotMatchEntry B' (l) nm (x) (proj‚ÇÇ x‚ÇÇ)


    -- SubstMatchEntry? : ‚àÄ {‚Ñì} (B' : ContextEntry ‚Üí Type ‚Ñì) ‚Üí (l : List ContextEntry) ‚Üí (nm : Identifier)
    --                  ‚Üí (r : Subst' l)
    --                  ‚Üí (y : ExistFirstBy ((nm ‚â°_) ‚àò ce-name)
    --                      WitchIsAlso B' l)
    --                        ‚Üí SubstNotMatchEntry _ _ _ r y ‚äé SubstMatchEntry _ _ _ r y
    -- SubstMatchEntry? B' (x ‚à∑ l) nm (inl x‚ÇÅ) (inl x‚ÇÇ) = inr tt
    -- SubstMatchEntry? B' (x ‚à∑ l) nm (inl x‚ÇÅ) (inr x‚ÇÇ) = inl tt
    -- SubstMatchEntry? B' (x ‚à∑ l) nm (inr x‚ÇÅ) (inl x‚ÇÇ) = inl tt
    -- SubstMatchEntry? B' (x ‚à∑ l) nm (inr x‚ÇÅ) (inr x‚ÇÇ) = SubstMatchEntry? B' l nm x‚ÇÅ (proj‚ÇÇ x‚ÇÇ) 

    -- SubstMatch-Extract : ‚àÄ {‚Ñì} (B' : ContextEntry ‚Üí Type ‚Ñì) ‚Üí (l : List ContextEntry) ‚Üí (nm : Identifier)
    --                  ‚Üí (r : Subst' l)
    --                  ‚Üí (y : ExistFirstBy ((nm ‚â°_) ‚àò ce-name)
    --                      WitchIsAlso B' l)
    --                        ‚Üí SubstMatchEntry _ _ _ r y ‚Üí Œ£ _ GTypeAgdaRep
    -- SubstMatch-Extract B' (AST.ice scope name type ‚à∑ l) nm (inl x‚ÇÇ) (inl x‚ÇÉ) x = type , x‚ÇÇ
    -- SubstMatch-Extract B' (x‚ÇÅ ‚à∑ l) nm (inr x‚ÇÇ) (inr x‚ÇÉ) x = SubstMatch-Extract B' l nm x‚ÇÇ (proj‚ÇÇ x‚ÇÉ) x 

    -- ExistFirstBy-WitchIsAlso-remSubs-lemm : {nm : Identifier} {p : ParticipantId} (l : List ContextEntry) ‚Üí (r : Subst' l)  ‚Üí
    --                                                   (z : ExistFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso
    --                                                     ((Œª y ‚Üí recMaybe Empty (Œª p' ‚Üí (AST.pId-name _ _ _ p) ‚â° (AST.pId-name _ _ _ p')) (ce-scope y))) l) ‚Üí
                                                        
    --                                                   ((SubstNotMatchEntry _ _ _ r z √ó ExistFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso
    --                                                      ((Œª y ‚Üí recMaybe Empty (Œª p' ‚Üí (AST.pId-name _ _ _ p) ‚â° (AST.pId-name _ _ _ p')) (ce-scope y)))
    --                                                      (remSubst' l r))
    --                                                    ‚äé (SubstMatchEntry _ _ _ r z  √ó IsEmpty (ExistMemberAs ((nm ‚â°_) ‚àò ce-name) (remSubst' l r))))
    -- ExistFirstBy-WitchIsAlso-remSubs-lemm (x‚ÇÅ ‚à∑ l) (inl x) (inl x‚ÇÇ) =  
    --     inr (_ , ((snd (FilterOut (((ce-name x‚ÇÅ) ‚â°_) ‚àò ce-name) l))
    --      ‚àò subst (Œª z ‚Üí ExistMemberAs (Œª x‚ÇÉ ‚Üí z ‚â° AST.name x‚ÇÉ)
    --                      (fst (FilterOut (Œª x‚ÇÉ ‚Üí AST.name x‚ÇÅ ‚â° AST.name x‚ÇÉ) l))) (proj‚ÇÅ x‚ÇÇ)))
    -- ExistFirstBy-WitchIsAlso-remSubs-lemm (x‚ÇÅ ‚à∑ l) (inl x) (inr x‚ÇÇ) =
    --      inl (_ , (ExistFirstBy-WitchIsAlso-FilterOut-lemma _ (Œª a x‚ÇÉ y ‚Üí proj‚ÇÅ x‚ÇÇ (x‚ÇÉ ‚àô sym y)) (proj‚ÇÇ x‚ÇÇ)))
    -- ExistFirstBy-WitchIsAlso-remSubs-lemm (x‚ÇÅ ‚à∑ l) (inr x) (inl x‚ÇÇ) = inl (tt , (inl x‚ÇÇ))
    -- ExistFirstBy-WitchIsAlso-remSubs-lemm {nm} {p} (x‚ÇÅ ‚à∑ l) (inr x) (inr x‚ÇÇ) = map-sum
    --       (map-prod (idfun _)  (inr ‚àò (proj‚ÇÅ x‚ÇÇ ,_)))
    --       (map-prod (idfun _) Œª b ‚Üí sum-elim (proj‚ÇÅ x‚ÇÇ) (b ‚àò proj‚ÇÇ))
    --        (ExistFirstBy-WitchIsAlso-remSubs-lemm {nm} {p} l x (proj‚ÇÇ x‚ÇÇ))



    -- map-ExistingFirstBy-lemma2 : {cs : List ContextEntry} {nm : Identifier} 
    --                    (B' : ContextEntry ‚Üí Type‚ÇÄ)
    --                    (z : ExistFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso B' cs) ‚Üí
    --                    (f : ContextEntry ‚Üí Scope)
    --                    (r : Subst' cs) ‚Üí
    --                    (SubstMatchEntry _ _ _ r z) ‚Üí 
    --                    remSubst' _ (map-ExistingFirstBy-lemma ((nm ‚â°_) ‚àò ce-name) B' z f r) ‚â° remSubst' cs r
    -- map-ExistingFirstBy-lemma2 {x‚ÇÅ ‚à∑ cs} B' (inl x) f (inl x‚ÇÇ) (x‚ÇÉ) = refl
    -- map-ExistingFirstBy-lemma2 {x‚ÇÅ ‚à∑ cs} B' (inr x) f (inr x‚ÇÇ) (x‚ÇÉ) = cong (x‚ÇÅ ‚à∑_) (map-ExistingFirstBy-lemma2 {cs} _ _ _ _ x‚ÇÉ)


    -- -- TODO : turn into more general version, with assumption of propositionality of predicates
    -- ExistFirstBy-WitchIsAlso-FilterOut-lemma2 : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì*} ‚Üí {A : Type ‚Ñì} ‚Üí {B : A ‚Üí Type ‚Ñì'} ‚Üí {B' : A ‚Üí Type ‚Ñì''}
    --                                                -- ‚Üí { ‚àÄ x ‚Üí isProp (B x)} ‚Üí { ‚àÄ x ‚Üí isProp (B' x)}
    --                                              ‚Üí {B* : A ‚Üí Type ‚Ñì*} ‚Üí  
    --                                               {{Dec-Pred-B : Dec-Pred B}} {{Dec-Pred-B* : Dec-Pred B*}}  ‚Üí 
    --                                                  (l : List A) ‚Üí (f : (x : A) ‚Üí A) ‚Üí -- (f : (x : A) ‚Üí B x ‚Üí B' x ‚Üí A) ‚Üí
    --                                                   ((‚àÄ a ‚Üí B a ‚Üí IsEmpty (B* a)))
    --                                                  ‚Üí (‚àÄ x ‚Üí B* (f x) ‚Üí B* x)
    --                                                  ‚Üí (z : ExistFirstBy B WitchIsAlso B' l)
    --                                                  ‚Üí (z' : ExistFirstBy B WitchIsAlso B' (fst (FilterOut B* l))) ‚Üí 

    --                                                  (fst (FilterOut B*
    --                                                     (map-ExistingFirstBy B WitchIsAlso B'
    --                                                        l
    --                                                          z Œª x x‚ÇÅ x‚ÇÇ ‚Üí f x)))
    --                                                    ‚â°
    --                                                   (map-ExistingFirstBy B WitchIsAlso B'
    --                                                      (fst (FilterOut B* l)) z' Œª x x‚ÇÅ x‚ÇÇ ‚Üí f x)                                                         
    -- ExistFirstBy-WitchIsAlso-FilterOut-lemma2 {B = B} {B' = B'} {B* = B*}  {{Dec-Pred-B* = Dec-Pred-B* }}  (x‚ÇÅ ‚à∑ l) f x g (inl x‚ÇÇ) with (Dec-Pred.decide Dec-Pred-B* (f x‚ÇÅ)) | (Dec-Pred.decide Dec-Pred-B* x‚ÇÅ)
    -- ... | _ | yes p‚ÇÅ = empty-elim (x _ (proj‚ÇÅ x‚ÇÇ) p‚ÇÅ)
    -- ... | yes p | no ¬¨p = empty-rec (¬¨p (g x‚ÇÅ p)) 
    -- ... | no ¬¨p | no ¬¨p‚ÇÅ =
    --    sum-elim {C = Œª (z'
    --            : (B x‚ÇÅ √ó B' x‚ÇÅ) ‚äé
    --              ((B x‚ÇÅ ‚Üí Empty) √ó
    --               ExistFirstBy B WitchIsAlso B' (fst (FilterOut B* l)))) ‚Üí
    --           f x‚ÇÅ  ‚à∑ fst (FilterOut B* l) ‚â°
    --           map-ExistingFirstBy B WitchIsAlso B' (x‚ÇÅ ‚à∑ fst (FilterOut B* l)) z'
    --           Œª x‚ÇÉ x‚ÇÑ x‚ÇÖ ‚Üí f x‚ÇÉ} (Œª a ‚Üí refl)
    --             --(Œª a ‚Üí cong (_‚à∑ fst (FilterOut B* l)) Œª i ‚Üí f x‚ÇÅ (B-prop x‚ÇÅ (proj‚ÇÅ x‚ÇÇ) (proj‚ÇÅ a) i) (B'-prop x‚ÇÅ (proj‚ÇÇ x‚ÇÇ) (proj‚ÇÇ a)  i))
    --             Œª b ‚Üí empty-rec (proj‚ÇÅ b (proj‚ÇÅ x‚ÇÇ)) 



    -- ExistFirstBy-WitchIsAlso-FilterOut-lemma2 {B = B} {B' = B'} {B* = B*} ‚¶É Dec-Pred-B* = Dec-Pred-B* ‚¶Ñ (x‚ÇÅ ‚à∑ l) f x g (inr x‚ÇÇ) = 
      
    --   dec-elim
    --     (Œª xx ‚Üí
    --          (z'
    --                 : ExistFirstBy B WitchIsAlso B'
    --                   (fst
    --                    (dec-rec' (B* x‚ÇÅ) (Œª _ ‚Üí FilterOut B* l)
    --                     (Œª y ‚Üí
    --                        x‚ÇÅ ‚à∑ fst (FilterOut B* l) , sum-elim y ((snd (FilterOut B* l)) ‚àò proj‚ÇÇ))
    --                     xx))) ‚Üí
    --                fst
    --                (dec-rec' (B* x‚ÇÅ)
    --                 (Œª _ ‚Üí
    --                    FilterOut B* (map-ExistingFirstBy B WitchIsAlso B' l (proj‚ÇÇ x‚ÇÇ) Œª v v‚ÇÅ v‚ÇÇ ‚Üí f v))
    --                 (Œª y ‚Üí
    --                    x‚ÇÅ ‚à∑
    --                    fst
    --                    (FilterOut B*
    --                     (map-ExistingFirstBy B WitchIsAlso B' l (proj‚ÇÇ x‚ÇÇ) Œª v v‚ÇÅ v‚ÇÇ ‚Üí f v))
    --                    ,
    --                    sum-elim y                         
    --                     (snd (FilterOut B* (map-ExistingFirstBy B WitchIsAlso B' l (proj‚ÇÇ x‚ÇÇ) (Œª v v‚ÇÅ v‚ÇÇ ‚Üí f v))) ‚àò proj‚ÇÇ )

    --                      )
    --                 xx)
    --                ‚â°
    --                map-ExistingFirstBy B WitchIsAlso B'
    --                (fst
    --                 (dec-rec' (B* x‚ÇÅ) (Œª _ ‚Üí FilterOut B* l)
    --                  (Œª y ‚Üí
    --                     x‚ÇÅ ‚à∑ fst (FilterOut B* l) , sum-elim y
    --                       ((snd (FilterOut B* l)) ‚àò proj‚ÇÇ)
    --                     )
    --                  xx))
    --                z' Œª v v‚ÇÅ v‚ÇÇ ‚Üí f v
    --          )
    --      (Œª x‚ÇÉ ‚Üí ExistFirstBy-WitchIsAlso-FilterOut-lemma2 {B = B} {B' = B'} l f x g (proj‚ÇÇ x‚ÇÇ))
    --      (Œª x‚ÇÉ ‚Üí sum-elim
    --         {C = Œª z* ‚Üí x‚ÇÅ ‚à∑
    --                    fst
    --                    (FilterOut B*
    --                     (map-ExistingFirstBy B WitchIsAlso B' l (proj‚ÇÇ x‚ÇÇ) Œª v v‚ÇÅ v‚ÇÇ ‚Üí f v))
    --                    ‚â°
    --                    map-ExistingFirstBy B WitchIsAlso B' (x‚ÇÅ ‚à∑ fst (FilterOut B* l)) z*
    --                    Œª v v‚ÇÅ v‚ÇÇ ‚Üí f v}
    --          (Œª a ‚Üí empty-rec (proj‚ÇÅ x‚ÇÇ (proj‚ÇÅ a)))
    --          Œª b ‚Üí cong (x‚ÇÅ ‚à∑_) (ExistFirstBy-WitchIsAlso-FilterOut-lemma2 {B = B} {B' = B'} l f x g (proj‚ÇÇ x‚ÇÇ) (proj‚ÇÇ b)))
    --      ((Dec-Pred.decide Dec-Pred-B* x‚ÇÅ)) 


    -- map-ExistingFirstBy-lemma3 : {cs : List ContextEntry} {nm : Identifier} 
    --                    (B' : ContextEntry ‚Üí Type‚ÇÄ) -- ‚Üí (B'-prop : ‚àÄ x ‚Üí isProp)
    --                    (z : ExistFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso B' cs) ‚Üí
    --                    (f : ContextEntry ‚Üí Scope)
    --                    (r : Subst' cs) ‚Üí                       
    --                    (SubstNotMatchEntry _ _ _ r z) ‚Üí
    --                    (ex' : ExistFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso B' (remSubst' cs r)) ‚Üí 
    --                    remSubst' _ (map-ExistingFirstBy-lemma ((nm ‚â°_) ‚àò ce-name) B' z f r) ‚â°
    --                        map-ExistingFirstBy ((nm ‚â°_) ‚àò ce-name) WitchIsAlso B' (remSubst' cs r)
    --                          ex' Œª x x‚ÇÅ x‚ÇÇ ‚Üí record x { scope = f x }
    -- map-ExistingFirstBy-lemma3 {x‚ÇÅ ‚à∑ cs} B' (inl x‚ÇÇ) f (inr x‚ÇÉ) x (inl x‚ÇÑ) = refl
    -- map-ExistingFirstBy-lemma3 {x‚ÇÅ ‚à∑ cs} B' (inl x‚ÇÇ) f (inr x‚ÇÉ) x (inr x‚ÇÑ) = empty-rec (proj‚ÇÅ x‚ÇÑ (proj‚ÇÅ x‚ÇÇ))
    -- map-ExistingFirstBy-lemma3 {x‚ÇÅ ‚à∑ cs} {nm} B' (inr x‚ÇÇ) f (inl x‚ÇÉ) x =
    --    ExistFirstBy-WitchIsAlso-FilterOut-lemma2 {B = Œª v ‚Üí (_‚â°_ nm ‚àò ce-name) v} {_}
    --      -- {Œª x‚ÇÑ ‚Üí Discrete‚ÜíisSet (IsDiscrete.eqTest IsDiscrete-Identifier) _ _}
    --      -- {Œª x‚ÇÑ ‚Üí {!!}}
    --       {B* = _‚â°_ (ce-name x‚ÇÅ) ‚àò ce-name}
    --          {{Dec-Pred-Disc {{IsDiscrete-Identifier}}}} {{Dec-Pred-Disc {{IsDiscrete-Identifier}}}}
    --                (cs) (Œª x‚ÇÑ ‚Üí record x‚ÇÑ { scope = f x‚ÇÑ }) (Œª a x‚ÇÑ x‚ÇÖ ‚Üí proj‚ÇÅ x‚ÇÇ (x‚ÇÑ ‚àô (sym x‚ÇÖ))) (Œª x‚ÇÑ x‚ÇÖ ‚Üí x‚ÇÖ) (proj‚ÇÇ x‚ÇÇ) 
      
    -- map-ExistingFirstBy-lemma3 {x‚ÇÅ ‚à∑ cs} B' (inr x‚ÇÇ) f (inr x‚ÇÉ) x (inl x‚ÇÑ) = empty-rec (proj‚ÇÅ x‚ÇÇ (proj‚ÇÅ x‚ÇÑ))
    -- map-ExistingFirstBy-lemma3 {x‚ÇÅ ‚à∑ cs} B' (inr x‚ÇÇ) f (inr x‚ÇÉ) x (inr x‚ÇÑ) = 
    --   cong (x‚ÇÅ ‚à∑_) (map-ExistingFirstBy-lemma3 B' (proj‚ÇÇ x‚ÇÇ) f (x‚ÇÉ) x (proj‚ÇÇ x‚ÇÑ))
