
{-# OPTIONS --cubical  #-}
module Glow.Simple.TraceNiceTest where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to map-prod)
open import Cubical.Data.Sum renaming (elim to sum-elim ; map to map-sum)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_) renaming (Bool to ùüö ; _‚âü_ to _‚âüB_)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )

open import Cubical.HITs.Interval

-- open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary renaming (¬¨_ to IsEmpty)
open import Cubical.Relation.Binary

open import Glow.Linked

open import Glow.DecEqMore

open import Glow.Simple.AST
open import Glow.Simple.ASTDef

open import Glow.Simple.Example

open import Glow.Simple.TraceNice

module TestTraceNice where 
  -- open AST String {{String-Discrete-postulated}} one


  open TraceNice {String} {String} {Basic-BuiltIns} {ptps =  "A" ‚à∑ "B" ‚à∑ []}

  traceTestTy : EState ‚Üí Type‚ÇÄ
  traceTestTy = (Trace nothing (someCode))

  -- tyEvalTest : Type‚ÇÄ
  -- tyEvalTest = traceTestTy (2 , (false , (true , tt)))

  tyEvalTest : EState ‚Üí Type‚ÇÄ
    -- traceTestTy (x , (x‚ÇÅ , (x‚ÇÇ , tt)))
  tyEvalTest es = Œ£M (Input "B" Bool)
                    (Œª x ‚Üí
                       √óM (Publish "B" "y")
                       (Œ£M
                        (Œª es ‚Üí
                           Branch (Input "A" Bool es) (Require true es)
                           (ok-input-elim "B" Bool x))
                        (Œª x‚ÇÅ ‚Üí
                           √óM (Deposit "B" 2)
                           (Œ£M (Input "A" Bool)
                            (Œª x‚ÇÇ ‚Üí
                               √óM (Withdraw "A" 3) (√óM (Deposit "A" 3) (Publish "A" "xx")))))))
                    es

  -- -- -- -- -- traceTestCases : traceTestTy (2 , (false , (true , tt))) ‚Üí ùüö 
  -- -- -- -- -- traceTestCases (false , snd‚ÇÅ) = {!snd‚ÇÅ!}
  -- -- -- -- -- traceTestCases (true , snd‚ÇÅ) = {!!}

  someTrace :  Œ£ _ (tyEvalTest)
  someTrace = 
      ok ,   "B" inp true
            ‚Ü¶ p! "B" ‚§á "y"
            ‚Ü¶ br-F {!!} {!!}
                  -- ("A" inp false)
            ‚Ü¶ d! "B" ‚§á 2
            ‚Ü¶ "A" inp false
            ‚Ü¶ w! "A" ‚§Ü 3
            ‚Ü¶ d! "A" ‚§á 3
            ‚Ü¶ p! "A" ‚§á "xx"

  -- -- -- -- traceTestCases : ‚àÄ x y z ‚Üí tyEvalTest x y z ok ‚Üí ùüö
  -- -- -- -- traceTestCases x y z w = {!!}


  -- -- -- -- traceTestCasesF : ‚àÄ x y z ‚Üí tyEvalTest x y z fail ‚Üí ùüö
  -- -- -- -- traceTestCasesF x y z w = {!!}


  -- traceTestCases : tyEvalTest ok ‚Üí Unit 
  -- traceTestCases ((."B" inp x‚ÇÅ) ‚Ü¶ (p! ."B" ‚§á ."y") ‚Ü¶ br-T prf-T (."A" inp x) ‚Ü¶ (d! ."B" ‚§á .2) ‚Ü¶ (."A" inp x‚ÇÉ) ‚Ü¶ (w! ."A" ‚§Ü .3) ‚Ü¶ (d! ."A" ‚§á .3) ‚Ü¶ (p! ."A" ‚§á ."xx")) = {!!}
  -- traceTestCases ((."B" inp x‚ÇÅ) ‚Ü¶ (p! ."B" ‚§á ."y") ‚Ü¶ br-F prf-F (r! .true) ‚Ü¶ (d! ."B" ‚§á .2) ‚Ü¶ (."A" inp x‚ÇÇ) ‚Ü¶ (w! ."A" ‚§Ü .3) ‚Ü¶ (d! ."A" ‚§á .3) ‚Ü¶ (p! ."A" ‚§á ."xx")) = {!!}

