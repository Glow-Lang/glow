
{-# OPTIONS --cubical  #-}
module Glow.Simple.ParamsSubst where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum renaming (elim to sum-elim)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_) renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.Simple.AST

open import Glow.DecEqMore

open import Cubical.HITs.Interval

module ParamsSubst {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}}
              {BuilitInsIndex : Type‚ÇÄ} {{IsDiscrete-BuilitInsIndex : IsDiscrete BuilitInsIndex}}
              {builtIns : BuiltIns' BuilitInsIndex {{IsDiscrete-BuilitInsIndex}}} where

  prop-mode = one
  
  open AST Identifier builtIns prop-mode

  open PropMode prop-mode 

  -- open InteractionHead

  stripParamsHead : InteractionHead ‚Üí InteractionHead 
  stripParamsHead ih = interactionHead (participantsWM ih) [] {_} {uniquePtcpnts ih}


  stripParamsCtx : ‚àÄ {ih : _} ‚Üí Context ih ‚Üí Context (stripParamsHead ih)
  stripParamsCtx Œì = con (Œì .entries) (Œì .scope')

  -- TODO : remove unsafe pragma by stratification on nesting depth
  {-# TERMINATING #-}
  paramSubst : ‚àÄ {ih : _} ‚Üí ParametersValue (parameters ih) ‚Üí 
                   ‚àÄ {Œì : _} ‚Üí  Statements _ Œì ‚Üí Statements _ (stripParamsCtx Œì) 



  paramSubst {ih}  vv = map-Linked'-map _ h hh
    where



      h : {Œì : Context ih}
             ‚Üí (b : Stmnt ih Œì) ‚Üí Stmnt _ (stripParamsCtx Œì)

      h-expr : {Œì : Context ih} ‚Üí ‚àÄ {Œ§}
             ‚Üí (b : Expr ih Œì Œ§) ‚Üí Expr _ (stripParamsCtx Œì) Œ§

      h-arg : ‚àÄ {Œì Œ§} ‚Üí Arg ih Œì Œ§ ‚Üí Arg _ (stripParamsCtx Œì) Œ§
      h-arg (AST.var-a (AST.dsot x {y})) =
          sum-elim
           (Œª a ‚Üí var-a (dsot x {inl a}))
           (lit-a ‚àò (lookup-ParametersValue (ih .parameters) vv (iwt x _)) ‚àò proj‚ÇÇ)
            y
      h-arg (AST.lit-a x) = (AST.lit-a x)


      h-args : ‚àÄ {Œì Œ§s}  ‚Üí Args ih Œì Œ§s ‚Üí Args _ (stripParamsCtx Œì) Œ§s
      h-args {Œ§s = []} x = tt
      h-args {Œ§s = x‚ÇÅ ‚à∑ []} x = h-arg x
      h-args {Œ§s = x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ Œ§s} (x , x‚ÇÉ) = h-arg x , h-args  x‚ÇÉ 
      

      h  (bindingS x) = bindingS (BS-lemma x)
         where
              BS-lemma : {Œì : Context ih} ‚Üí  BStmnt ih Œì -> BStmnt _ (stripParamsCtx Œì)
              BS-lemma (BS-let x {asn} y) = (BS-let x {asn} (h-expr y))  
              BS-lemma (BS-publish! p (psof name‚ÇÅ {w}) {y}) = (BS-publish! p (psof name‚ÇÅ {w}) {y})


      h (nonBindingS x) = nonBindingS (z x)
         where

           zz : NBStmnt _ _ ‚Üí NBStmnt _ _ 
           zz (NBS-require! x) = NBS-require! (h-expr x)
           zz (NBS-deposit! p x) = NBS-deposit! p (h-expr x)
           zz (NBS-withdraw! p x) = NBS-withdraw! p (h-expr x)
           zz (NBS-publishVal! x y) = NBS-publishVal! x y

           z : NBStmnt+Expr ih _ ‚Üí NBStmnt+Expr (stripParamsHead ih) _
           z (stmntNBS x {q}) =  stmntNBS (zz x) {q}
           z (exprNBS x) = exprNBS (h-expr x)

      h-expr (var (dsot x {y})) =
         sum-elim
           (Œª a ‚Üí var (dsot x {inl a}))
           (lit ‚àò (lookup-ParametersValue (ih .parameters) vv (iwt x _)) ‚àò proj‚ÇÇ)
            y



      h-expr (stmnts‚ÇÅ Õæb x) =
         paramSubst {ih = ih} vv stmnts‚ÇÅ Õæb subst (Œª x‚ÇÅ ‚Üí Expr _ x‚ÇÅ _)
             -- TODO : improve evaluation performance by introducing specialized "subst"
             -- specialisation should be not only on Expr, but also on map-Linked'-map-fold
        (map-Linked'-map-fold (stripParamsCtx {ih}) _ _ stmnts‚ÇÅ ) (h-expr x)
      h-expr (lit x) = lit x
      h-expr (_$'_ f xs) = _$'_ f (h-args xs)

      h-expr (input msg {y}) = input msg {y}
      -- h-expr (receivePublished x {y}) = publishVal x {y}
      h-expr (if b then t else f) = if (h-expr b) then (h-expr t) else (h-expr f)
      h-expr (AST.sign q {y} {w}) = (AST.sign (h-arg q) {y} {w})
      h-expr (AST.receivePublished x {y}) = AST.receivePublished x {y}

      hh : (Œì : Context ih) (x : Stmnt _ Œì) ‚Üí
         stripParamsCtx (bindingMechanics' _ Œì x) ‚â°
         bindingMechanics' (interactionHead (participantsWM ih) [])
         (stripParamsCtx Œì) (h x)
      hh _ (bindingS (BS-let _ _)) = refl 
      hh _ (AST.bindingS (AST.BS-publish! _ (AST.psof name‚ÇÅ))) = refl
      hh _ (nonBindingS _) = refl

      -- h-args = ?

-- module Test-String where
--   open AST String {{String-Discrete-postulated}} zero

--   module ParamsSubstS = ParamsSubst {{String-Discrete-postulated}}

--   someInteraction : Interaction 
--   someInteraction =  
--        interaction‚ü®   "A" ‚à∑ "B" ‚à∑ [] ,  "pI1" ‚à∂ Nat ‚à∑ "b2" ‚à∂ Bool ‚à∑ "b1" ‚à∂ Bool ‚à∑ [] ‚ü© (
--             set "x" ‚à∂ Bool ‚âî < true > Õæ
--             at "B" set "y" ‚à∂ Bool ‚âî v "b1" Õæ
--             at "A" set "xx" ‚à∂ Bool ‚âî
--              ( if v "b1"
--                then
--                   (
--                   set "z" ‚à∂ Bool ‚âî input "enter choice 1" Õæ‚ÇÅ Õæb
--                   v "z"
--                 )
--                else (
--                 require! v "b2" Õæ'
--                 -- publish! "B" ‚ü∂ "y" Õæ
--                 -- withdraw! "B" ‚üµ < 3 > Õæ
--                 -- deposit! "B" ‚ü∂ < 2 > Õæ
--                 set "z" ‚à∂ Bool ‚âî < false > Õæb
--                 < true >
--                 )) Õæ
--             deposit! "B" ‚ü∂ < 2 > Õæ
--             at "A" set "yq" ‚à∂ Bool ‚âî input "enter choice 2" Õæ
--             withdraw! "B" ‚üµ < 3 > Õæ
--             publish! "A" ‚ü∂ "xx" Õæ        

--             publish! "B" ‚ü∂ "y" Õæ'        
--             set "yy" ‚à∂ Bool ‚âî v "y" )


--   param-sub-test : ‚Ñï √ó ùüö √ó ùüö √ó Unit ‚Üí Linked'
--                                         (bindingMechanics'
--                                          (ParamsSubstS.stripParamsHead
--                                           (interactionHead ("A" ‚à∑ "B" ‚à∑ [])
--                                            ("pI1" ‚à∂ Nat ‚à∑ "b2" ‚à∂ Bool ‚à∑ "b1" ‚à∂ Bool ‚à∑ []))))
--                                         (ParamsSubstS.stripParamsCtx (Interaction.emptyContext someInteraction))
--   param-sub-test vv = ParamsSubstS.paramSubst vv (Interaction.code someInteraction)
--       -- {!ParamsSubstS.paramSubst vv (Interaction.code someInteraction)!}


--   zzz :
--     let q : ‚Ñï √ó ùüö √ó ùüö √ó Unit
--         q = 3 , false , true , _
--         bT : Statements _ _
--         bT = (
--           set "x" ‚à∂ Bool ‚âî < true > Õæ
--           at "B" set "y" ‚à∂ Bool ‚âî < true > Õæ
--           at "A" set "xx" ‚à∂ Bool ‚âî (
--               require! < false > Õæ'
--               -- publish! "B" ‚ü∂ "y" Õæ
--               -- withdraw! "B" ‚üµ < 3 > Õæ
--               -- deposit! "B" ‚ü∂ < 2 > Õæ
--               set "z" ‚à∂ Bool ‚âî < false > Õæb
--               < true >
--               )Õæ
--           deposit! "B" ‚ü∂ < 2 > Õæ
--           withdraw! "B" ‚üµ < 3 > Õæ
--           publish! "B" ‚ü∂ "y" Õæ'        
--           set "yy" ‚à∂ Bool ‚âî v "y"
--           )
--     in bT ‚â° param-sub-test q 

--   zzz = refl



-- module Test-‚Ñï where
--   open AST ‚Ñï 

--   module ParamsSubstS = ParamsSubst {‚Ñï}

--   someInteraction : Interaction
--   someInteraction =  
--      interaction‚ü®   1 ‚à∑ 2 ‚à∑ [] ,  3 ‚à∂ Nat ‚à∑ 4 ‚à∂ Bool ‚à∑ 5 ‚à∂ Bool ‚à∑ [] ‚ü© (
--           set 6 ‚à∂ Bool ‚âî < true > Õæ
--           at 2 set 7 ‚à∂ Bool ‚âî v 5 Õæ
--           at 1 set 8 ‚à∂ Bool ‚âî (
--               require! v 4 Õæ'
--               -- publish! "B" ‚ü∂ "y" Õæ
--               -- withdraw! "B" ‚üµ < 3 > Õæ
--               -- deposit! "B" ‚ü∂ < 2 > Õæ
--               set 9 ‚à∂ Bool ‚âî < false > Õæb
--               < true >
--               )Õæ
--           deposit! 2 ‚ü∂ < 2 > Õæ
--           withdraw! 2 ‚üµ < 3 > Õæ
--           publish! 2 ‚ü∂ 7 Õæ'        
--           set 10 ‚à∂ Bool ‚âî v 7 )


--   param-sub-test : ‚Ñï √ó ùüö √ó ùüö √ó Unit ‚Üí Linked'
--                                         (bindingMechanics'
--                                          (ParamsSubstS.stripParamsHead
--                                           (interactionHead (1 ‚à∑ 2 ‚à∑ [])
--                                            (3 ‚à∂ Nat ‚à∑ 4 ‚à∂ Bool ‚à∑ 5 ‚à∂ Bool ‚à∑ []))))
--                                         (ParamsSubstS.stripParamsCtx (Interaction.emptyContext someInteraction))
--   param-sub-test vv = ParamsSubstS.paramSubst vv (Interaction.code someInteraction)

--   zzz-0 : Linked'
--             (bindingMechanics'
--              (ParamsSubstS.stripParamsHead
--               (interactionHead (1 ‚à∑ 2 ‚à∑ [])
--                (3 ‚à∂ Nat ‚à∑ 4 ‚à∂ Bool ‚à∑ 5 ‚à∂ Bool ‚à∑ []))))
--             (ParamsSubst.stripParamsCtx
--              (Interaction.emptyContext someInteraction))
              
--   zzz-0 = param-sub-test (3 , false , true , _)
--            -- bindingS
--             -- (BS-let (AST.ice nothing 6 Bool) {_}
--             --  (lit true))
--             -- ‚à∑L
--             -- (bindingS
--             --  (BS-let
--             --   (transp {Œª i ‚Üí ‚Ñì-zero}
--             --    (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --    (AST.ice (just (AST.pId 2 {_})) 7 Bool))
--             --   {_} (lit true))
--             --  ‚à∑L
--             --  (bindingS
--             --   (BS-let
--             --    (transp {Œª i ‚Üí ‚Ñì-zero}
--             --     (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --     (transp {Œª i ‚Üí ‚Ñì-zero}
--             --      (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --      (AST.ice (just (AST.pId 1 {_})) 8 Bool)))
--             --    {_}
--             --    (body
--             --     (transp {Œª i ‚Üí ‚Ñì-zero}
--             --      (Œª i ‚Üí
--             --         AST.Body {‚Ñï} ‚¶É ‚Ñï-Discrete ‚¶Ñ
--             --         (AST.interactionHead (1 ‚à∑ 2 ‚à∑ []) [] {_})
--             --         (record
--             --          { entries =
--             --              transp {Œª i‚ÇÅ ‚Üí ‚Ñì-zero}
--             --              (Œª i‚ÇÅ ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) (~ i)
--             --              (AST.ice (just (AST.pId 2 {_})) 7 Bool)
--             --              ‚à∑ AST.ice nothing 6 Bool ‚à∑ []
--             --          ; scope' = just (AST.pId 1 {_})
--             --          })
--             --         Bool)
--             --      i0
--             --      (transp {Œª i ‚Üí ‚Ñì-zero}
--             --       (Œª i ‚Üí
--             --          AST.Body {‚Ñï} ‚¶É ‚Ñï-Discrete ‚¶Ñ
--             --          (AST.interactionHead (1 ‚à∑ 2 ‚à∑ []) [] {_})
--             --          (record
--             --           { entries =
--             --               AST.ice (just (AST.pId 2 {_})) 7 Bool ‚à∑ AST.ice nothing 6 Bool ‚à∑ []
--             --           ; scope' = just (AST.pId 1 {_})
--             --           })
--             --          Bool)
--             --       i0
--             --       (bodyR
--             --        (nonBindingS
--             --         (stmntNBS
--             --          (NBS-require! (lit false)))
--             --         ‚à∑L
--             --         (bindingS
--             --          (BS-let
--             --           (transp {Œª i ‚Üí ‚Ñì-zero}
--             --            (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --            (AST.ice nothing 9 Bool))
--             --           {_} (lit false))
--             --          ‚à∑L []L))
--             --        (lit true))))))
--             --   ‚à∑L
--             --   (nonBindingS
--             --    (stmntNBS
--             --     (NBS-deposit! (AST.pId 2 {_}) {_}
--             --      (lit 2)))
--             --    ‚à∑L
--             --    (nonBindingS
--             --     (stmntNBS
--             --      (NBS-withdraw! (AST.pId 2 {_}) {_}
--             --       (lit 3)))
--             --     ‚à∑L
--             --     (bindingS
--             --      (BS-publish! (AST.pId 2 {_})
--             --       (psof 7 {_}) {_})
--             --      ‚à∑L
--             --      (bindingS
--             --       (BS-let
--             --        (transp {Œª i ‚Üí ‚Ñì-zero}
--             --         (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --         (transp {Œª i ‚Üí ‚Ñì-zero}
--             --          (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --          (transp {Œª i ‚Üí ‚Ñì-zero}
--             --           (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --           (transp {Œª i ‚Üí ‚Ñì-zero}
--             --            (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --            (transp {Œª i ‚Üí ‚Ñì-zero}
--             --             (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --             (transp {Œª i ‚Üí ‚Ñì-zero}
--             --              (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
--             --              (AST.ice nothing 10 Bool)))))))
--             --        {_} (var (dsot 7 {_})))
--             --       ‚à∑L []L))))))

--   zzz :
--     let q : ‚Ñï √ó ùüö √ó ùüö √ó Unit
--         q = 3 , false , true , _
--     in (
--           set 6 ‚à∂ Bool ‚âî < true > Õæ
--           at 2 set 7 ‚à∂ Bool ‚âî < true > Õæ
--           at 1 set 8 ‚à∂ Bool ‚âî (
--               require! < false > Õæ'
--               -- publish! "B" ‚ü∂ "y" Õæ
--               -- withdraw! "B" ‚üµ < 3 > Õæ
--               -- deposit! "B" ‚ü∂ < 2 > Õæ
--               set 9 ‚à∂ Bool ‚âî < false > Õæb
--               < true >
--               )Õæ
--           deposit! 2 ‚ü∂ < 2 > Õæ
--           withdraw! 2 ‚üµ < 3 > Õæ
--           publish! 2 ‚ü∂ 7 Õæ'        
--           set 10 ‚à∂ Bool ‚âî v 7 ) ‚â° param-sub-test q

--   zzz = refl
