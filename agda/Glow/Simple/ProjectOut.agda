
{-# OPTIONS --cubical  #-}
module Glow.Simple.ProjectOut where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum renaming (elim to sum-elim ; rec to sum-rec ; map to sum-map)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_)  renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.Simple.AST

open import Glow.DecEqMore

open import Glow.Simple.ContextMore

open import Glow.Simple.Postulates


open import Cubical.HITs.Interval


module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}}
            {BuilitInsIndex : Type‚ÇÄ} {{IsDiscrete-BuilitInsIndex : IsDiscrete BuilitInsIndex}}
              {builtIns : BuiltIns' BuilitInsIndex {{IsDiscrete-BuilitInsIndex}}} where

  -- prop-mode = one
  
  -- open AST Identifier prop-mode

  open PropMode one 

  -- open AST Identifier



  -- TODO : provide alternative implementation, substituting multiple variables in one pass, compare performance
  module ProjectOut {ptps : List Identifier} (pid : AST.ParticipantId' Identifier builtIns one {ptps} ) where
  
    -- module AST* = AST Identifier builtIns one

    open AST.InteractionHead {Identifier} {builtIns = builtIns} {one} (AST.interactionHead ptps [])
                                                                      

    projectOutStmnts : ‚àÄ {Œì} ‚Üí Statements Œì ‚Üí Statements Œì
    projectOutStmnts = {!!}

    projectOutExpr : ‚àÄ {Œì Œ§} ‚Üí Expr Œì Œ§ ‚Üí Expr Œì Œ§
    projectOutExpr = {!!}



  -- module SubstAll {ptps : List Identifier} where

  --   open AST.InteractionHead {Identifier} {builtIns = builtIns} {one} (AST.interactionHead ptps []) 


  --   {-# TERMINATING #-}
  --   substAllStmnts : ‚àÄ {Œì} ‚Üí (r : Rec Œì) ‚Üí Statements Œì ‚Üí Statements (record Œì {entries = []}) 
  --   substAllStmnts {AST.con [] scope''} r x = x
  --   substAllStmnts {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
  --     substAllStmnts  r' (SubstOne.substOneStmnts (inl y) (SubstOne.mkStatements* x))

  --   {-# TERMINATING #-}
  --   substAllStmnt : ‚àÄ {Œì} ‚Üí (r : Rec Œì) ‚Üí Stmnt Œì ‚Üí Stmnt (record Œì {entries = []}) 
  --   substAllStmnt {AST.con [] scope''} r x = x
  --   substAllStmnt {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
  --     substAllStmnt  r' (SubstOne.substOneStmnt (inl y) x)

  --   {-# TERMINATING #-}
  --   substAllExpr : ‚àÄ {Œì Œ§} ‚Üí (r : Rec Œì) ‚Üí Expr Œì Œ§ ‚Üí Expr (record Œì {entries = []}) Œ§ 
  --   substAllExpr {AST.con [] scope''} r x = x
  --   substAllExpr {Œì@(AST.con (x‚ÇÅ ‚à∑ entries‚ÇÅ) scope'')} (y , r') x = 
  --     substAllExpr  r' (SubstOne.substOneExpr (inl y) x)

  --   evalPureArg : ‚àÄ {sc Œ§} ‚Üí (e : Arg (con [] sc) Œ§) ‚Üí GTypeAgdaRep Œ§ 
  --   evalPureArg (AST.var-a (AST.dsot name {inr (x , ())}))
  --   evalPureArg (AST.lit-a x) = x


  --   evalArgs : ‚àÄ {Œ§s sc} ‚Üí Args (con [] sc) Œ§s ‚Üí argsV Œ§s
  --   evalArgs {[]} x = tt
  --   evalArgs {x‚ÇÅ ‚à∑ []} x = (evalPureArg x) , _
  --   evalArgs {x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ Œ§s} (x , x‚ÇÉ) = evalPureArg x , evalArgs x‚ÇÉ
    

  --   {-# TERMINATING #-}
  --   evalPureExpr : ‚àÄ {sc Œ§} ‚Üí (e : Expr (con [] sc) Œ§) ‚Üí ‚ü® IsPureE e ‚ü© ‚Üí GTypeAgdaRep Œ§ 
  --   evalPureExpr (AST.var (AST.dsot name {inr (x‚ÇÅ , ())})) x
    
  --   evalPureExpr (AST.body (AST.bodyR []L e)) x = evalPureExpr e (proj‚ÇÇ x)
  --   evalPureExpr (AST.body (AST.bodyR (AST.bindingS (AST.BS-let ce x‚ÇÅ) ‚à∑L stmnts‚ÇÅ) e)) x =
  --      let x‚ÇÅ' = evalPureExpr x‚ÇÅ (proj‚ÇÅ (proj‚ÇÅ x))
  --          e' = SubstOne.substOneExpr (inl x‚ÇÅ')
  --                 ((AST.body (AST.bodyR (stmnts‚ÇÅ) e))) 
  --      in dec-rec ‚ü® IsPureE e' ‚ü© {{proj‚ÇÅ (snd (IsPureE e'))}}
  --         (Œª x‚ÇÇ ‚Üí evalPureExpr e' x‚ÇÇ)
  --         subst-preserver-pure 

  --     where
  --       postulate subst-preserver-pure : _
        
  --   evalPureExpr (AST.body (AST.bodyR (AST.bindingS (AST.BS-publish! p x‚ÇÅ) ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ)) ((() , x‚ÇÉ) , x‚ÇÇ)
       
  --   evalPureExpr (AST.body (AST.bodyR (AST.nonBindingS _ ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ)) x =
  --      evalPureExpr (AST.body (AST.bodyR (stmnts‚ÇÅ) expr‚ÇÅ)) ((proj‚ÇÇ (proj‚ÇÅ x)) , (proj‚ÇÇ x))

    
  --   evalPureExpr (AST.lit x‚ÇÅ) x = x‚ÇÅ
  --   evalPureExpr (AST.if e then e‚ÇÅ else e‚ÇÇ) x =
  --      Cubical.Data.Bool.if evalPureExpr e (proj‚ÇÅ x)
  --         then evalPureExpr e‚ÇÅ (proj‚ÇÅ (proj‚ÇÇ x))
  --         else evalPureExpr e‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ x))
  --   evalPureExpr (AST._$'_ f xs) x =
  --      let z = BuiltIn'.impl (snd (BuiltIns'.getBi builtIns (AST.BI.bIndex f)))
  --          q = appV z (evalArgs xs) 
  --      in subst-GTypeAgdaRep (sym (AST.BI.cdm‚â° f)) q
  --        --(transport‚Åª (cong GTypeAgdaRep (AST.BI.cdm‚â° f)) q)
  --   evalPureExpr (AST.var (AST.dsot name {inl ()})) tt
  --   evalPureExpr {sc = sc} (AST.sign q {z} {p}) w =
  --       subst-GTypeAgdaRep p (signPrim (AST.pId-name _ _ _ (IsNotConsensus‚ÜíParticipant
  --          {con [] sc}
  --            z)) (evalPureArg q))
