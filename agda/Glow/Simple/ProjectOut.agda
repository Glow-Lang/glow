
{-# OPTIONS --cubical  #-}
module Glow.Simple.ProjectOut where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Foundations.CartesianKanOps

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod renaming (map to prod-map)
open import Cubical.Data.Sum renaming (elim to sum-elim ; rec to sum-rec ; map to sum-map)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe )
open import Cubical.Data.Bool hiding (if_then_else_ ; _‚âü_) renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive hiding (_‚âü_)
import Cubical.Functions.Logic as Lo

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.Simple.AST

open import Glow.DecEqMore

open import Cubical.HITs.Interval

open import Glow.ListDecProps

open import Glow.Simple.ContextMore

module ProjectOut {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}}
              {BuilitInsIndex : Type‚ÇÄ} {{IsDiscrete-BuilitInsIndex : IsDiscrete BuilitInsIndex}}
              {builtIns : BuiltIns' BuilitInsIndex {{IsDiscrete-BuilitInsIndex}}} where

  prop-mode = one
  
  open AST Identifier builtIns prop-mode

  open PropMode prop-mode 

  -- open InteractionHead

  makeDishonest' : (ps : List (Identifier √ó ParticipantModality))
                   ‚Üí PM (_ , UniqueByDec‚â° proj‚ÇÅ ps , isProp-UniqueBy _ _ )
                   ‚Üí ‚àÄ nm ‚Üí PM ( IsHonestParticipantId {ps} nm )  
                           ‚Üí  Œ£ (List (Identifier √ó ParticipantModality))
                                  Œª ps ‚Üí PM ( IsDishonestParticipantId {ps} nm )
                                    √ó PM (_ , UniqueByDec‚â° proj‚ÇÅ ps , isProp-UniqueBy _ _ )
  makeDishonest' l x nm w =
    ExistMemberAs-mapExisting-help {{eqTest (IsDiscrete-Identifier)}}
     l x w (Œª x‚ÇÅ q ‚Üí (proj‚ÇÅ x‚ÇÅ , dishonest) , proj‚ÇÅ q , refl)
       (Œª a _ ‚Üí refl)
       (Œª a a' x‚ÇÅ x‚ÇÇ ‚Üí sym (proj‚ÇÅ x‚ÇÅ) ‚àô proj‚ÇÅ x‚ÇÇ)
       Œª a a' x‚ÇÅ x‚ÇÇ x‚ÇÉ ‚Üí proj‚ÇÅ x‚ÇÅ ‚àô x‚ÇÇ ,
         sum-rec (Œª a‚ÇÅ ‚Üí empty-elim (x‚ÇÉ (proj‚ÇÅ x‚ÇÅ ‚àô x‚ÇÇ , (sym a‚ÇÅ)))) (sym) (dichotomyBool (proj‚ÇÇ a))  

  makeDishonestŒ£ : (ih : InteractionHead) ‚Üí HonestParticipantId ih 
                           ‚Üí  Œ£ InteractionHead DishonestParticipantId 
  AST.participantsWM (fst (makeDishonestŒ£ ih hp)) =
     (fst (makeDishonest' (AST.participantsWM ih) (AST.uniquePtcpnts ih) (pId-nameHon hp) (pId-isInHon hp)))
  AST.parameters (fst (makeDishonestŒ£ ih hp)) = AST.parameters ih
  AST.uniqueParams (fst (makeDishonestŒ£ ih hp)) = AST.uniqueParams ih
  AST.uniquePtcpnts (fst (makeDishonestŒ£ ih hp)) = 
     proj‚ÇÇ (snd (makeDishonest' (AST.participantsWM ih) (AST.uniquePtcpnts ih) (pId-nameHon hp) (pId-isInHon hp)))
  snd (makeDishonestŒ£ ih hp) =
    AST.pId ((pId-nameHon hp))
       {proj‚ÇÅ (snd (makeDishonest' (AST.participantsWM ih) (AST.uniquePtcpnts ih) (pId-nameHon hp) (pId-isInHon hp)))}

  makeDishonest : (ih : InteractionHead) ‚Üí HonestParticipantId ih ‚Üí InteractionHead   
  makeDishonest ih = fst ‚àò makeDishonestŒ£ ih

-- makeDishonest' l x nm w
 
  makeDishonest'-ParticipantId : ‚àÄ pp ‚Üí ‚àÄ nm ‚Üí ‚àÄ x nm' w 
           ‚Üí ‚ü® IsParticipantId {map-List proj‚ÇÅ pp} nm ‚ü©
           ‚Üí ‚ü® IsParticipantId {map-List proj‚ÇÅ (fst (makeDishonest' pp x nm' w))} nm ‚ü©  
  makeDishonest'-ParticipantId (x‚ÇÇ ‚à∑ pp) nm x nm' (inl x‚ÇÉ) xx = xx
  makeDishonest'-ParticipantId (x‚ÇÇ ‚à∑ pp) nm (x , x‚ÇÑ) nm' (inr x‚ÇÉ) (inl x‚ÇÅ) = inl x‚ÇÅ
  makeDishonest'-ParticipantId (x‚ÇÇ ‚à∑ pp) nm (x , x‚ÇÑ) nm' (inr x‚ÇÉ) (inr x‚ÇÅ) =
     inr (proj‚ÇÅ x‚ÇÅ , (makeDishonest'-ParticipantId pp nm x‚ÇÑ nm' (proj‚ÇÇ x‚ÇÉ) (proj‚ÇÇ x‚ÇÅ)))

  makeDishonest'-DishonestParticipantId : ‚àÄ pp ‚Üí ‚àÄ nm ‚Üí ‚àÄ x nm' w 
           ‚Üí ‚ü® IsDishonestParticipantId {pp} nm ‚ü©
           ‚Üí ‚ü® IsDishonestParticipantId {(fst (makeDishonest' pp x nm' w))} nm ‚ü©  
  makeDishonest'-DishonestParticipantId (x‚ÇÇ ‚à∑ pp) nm x nm' (inl x‚ÇÉ) (inl x‚ÇÅ) = inl (proj‚ÇÅ x‚ÇÅ , refl)
  makeDishonest'-DishonestParticipantId (x‚ÇÇ ‚à∑ pp) nm x nm' (inl x‚ÇÉ) (inr x‚ÇÅ) =
     inr ((Œª x‚ÇÑ ‚Üí proj‚ÇÅ x (ExistMemberAs‚Üí (Œª a x‚ÇÖ ‚Üí sym (proj‚ÇÅ x‚ÇÑ) ‚àô proj‚ÇÅ x‚ÇÖ) (Œª a ‚Üí _ ‚âü _) (proj‚ÇÇ x‚ÇÅ))) , (proj‚ÇÇ x‚ÇÅ))
     --inr ((Œª x‚ÇÑ ‚Üí {!proj‚ÇÅ x‚ÇÑ ‚àô (sym (proj‚ÇÅ x‚ÇÉ))!}) , (proj‚ÇÇ x‚ÇÅ))
  makeDishonest'-DishonestParticipantId (x‚ÇÇ ‚à∑ pp) nm (x , x‚ÇÑ) nm' (inr x‚ÇÉ) (inl x‚ÇÅ) = inl x‚ÇÅ
  makeDishonest'-DishonestParticipantId (x‚ÇÇ ‚à∑ pp) nm (x , x‚ÇÑ) nm' (inr x‚ÇÉ) (inr x‚ÇÅ) =
     inr (proj‚ÇÅ x‚ÇÅ , (makeDishonest'-DishonestParticipantId pp nm x‚ÇÑ nm' (proj‚ÇÇ x‚ÇÉ) (proj‚ÇÇ x‚ÇÅ)))


  makeDishonest-ParticipantId : (ih : InteractionHead) ‚Üí ‚àÄ hp ‚Üí 
                                    ParticipantId ih ‚Üí ParticipantId (makeDishonest ih hp)
  makeDishonest-ParticipantId ih hp (AST.pId name‚ÇÅ {y}) =
     AST.pId name‚ÇÅ {makeDishonest'-ParticipantId _ _ (AST.uniquePtcpnts ih) _ _ y}

    
  makeDishonest-DishonestParticipantId : (ih : InteractionHead) ‚Üí ‚àÄ hp ‚Üí 
                                    DishonestParticipantId ih ‚Üí DishonestParticipantId (makeDishonest ih hp)
  makeDishonest-DishonestParticipantId ih hp (AST.pId name‚ÇÅ {y}) =
     AST.pId name‚ÇÅ {makeDishonest'-DishonestParticipantId _ _ (AST.uniquePtcpnts ih) _ _ y}



  CtxTrans' : (ptps : List (Identifier √ó ParticipantModality))
            ‚Üí Maybe (HonestParticipantId' {ptps})
            ‚Üí (HonestParticipantId' {ptps})
            ‚Üí DecPropŒ£
  CtxTrans' [] x (AST.pId name‚ÇÅ {()}) 
  CtxTrans' (x‚ÇÉ ‚à∑ ptps) nothing (_) = Unit-dp
  CtxTrans' (x‚ÇÉ ‚à∑ ptps) (just (AST.pId name‚ÇÇ {inl x})) (AST.pId name‚ÇÅ {inl x‚ÇÅ}) = Empty-dp
  CtxTrans' (x‚ÇÉ ‚à∑ ptps) (just (AST.pId name‚ÇÇ {inl x})) (AST.pId name‚ÇÅ {inr x‚ÇÅ}) = Unit-dp
  CtxTrans' (x‚ÇÉ ‚à∑ ptps) (just (AST.pId name‚ÇÇ {inr x})) (AST.pId name‚ÇÅ {inl x‚ÇÅ}) = Unit-dp
  CtxTrans' (x‚ÇÉ ‚à∑ ptps) (just (AST.pId name‚ÇÇ {inr x})) (AST.pId name‚ÇÅ {inr x‚ÇÅ}) = 
     CtxTrans' (ptps) (just (AST.pId name‚ÇÇ {proj‚ÇÇ x})) (AST.pId name‚ÇÅ {proj‚ÇÇ x‚ÇÅ})

  
  CtxTrans'-cases : (ptps : List (Identifier √ó ParticipantModality)) ‚Üí ‚àÄ {q}
            ‚Üí ‚àÄ nm
            ‚Üí (z : (‚ü® IsHonestParticipantId {ptps} nm ‚ü©))
            ‚Üí (hp : (HonestParticipantId' {ptps}))
            ‚Üí ‚ü® CtxTrans' ptps (just (AST.pId nm {z})) hp ‚ü©
            ‚Üí (‚ü® IsHonestParticipantId  {(fst (makeDishonest' ptps q (pId-nameHon hp) (pId-isInHon hp)))} nm ‚ü© )
  CtxTrans'-cases (x‚ÇÅ ‚à∑ ptps) nm (inr x‚ÇÇ) (AST.pId name‚ÇÅ {inl x‚ÇÉ}) x = inr ((true‚â¢false ‚àò proj‚ÇÇ) , (proj‚ÇÇ x‚ÇÇ))
  CtxTrans'-cases (x‚ÇÅ ‚à∑ ptps) nm (inl x‚ÇÇ) (AST.pId name‚ÇÅ {inr x‚ÇÉ}) x = inl x‚ÇÇ
  CtxTrans'-cases (x‚ÇÅ ‚à∑ ptps) {q} nm (inr x‚ÇÇ) (AST.pId name‚ÇÅ {inr x‚ÇÉ}) x =
     inr (proj‚ÇÅ x‚ÇÇ , CtxTrans'-cases (ptps) {proj‚ÇÇ q} nm (proj‚ÇÇ x‚ÇÇ) (AST.pId name‚ÇÅ {proj‚ÇÇ x‚ÇÉ}) x)

  
  CtxTrans'-cases¬¨ : (ptps : List (Identifier √ó ParticipantModality)) ‚Üí ‚àÄ {q}
            ‚Üí ‚àÄ nm
            ‚Üí (z : (‚ü® IsHonestParticipantId {ptps} nm ‚ü©))
            ‚Üí (hp : (HonestParticipantId' {ptps}))
            ‚Üí (‚ü® CtxTrans' ptps (just (AST.pId nm {z})) hp ‚ü© ‚Üí Empty)
            ‚Üí (‚ü® IsDishonestParticipantId  {(fst (makeDishonest' ptps q (pId-nameHon hp) (pId-isInHon hp)))} nm ‚ü© )
  CtxTrans'-cases¬¨ (x‚ÇÅ ‚à∑ ptps) nm (inr x‚ÇÇ) (AST.pId name‚ÇÅ {inl x‚ÇÉ}) x = empty-elim (x _)
  CtxTrans'-cases¬¨ (x‚ÇÅ ‚à∑ ptps) nm (inl x‚ÇÇ) (AST.pId name‚ÇÅ {inr x‚ÇÉ}) x = empty-elim (x _)
  CtxTrans'-cases¬¨ (x‚ÇÅ ‚à∑ ptps) {q} nm (inr x‚ÇÇ) (AST.pId name‚ÇÅ {inr x‚ÇÉ}) x =
     let z = Œª a ‚Üí proj‚ÇÅ q ((ExistMemberAs‚Üí (Œª a‚ÇÅ x‚ÇÑ ‚Üí (sym (proj‚ÇÅ a) ‚àô (proj‚ÇÅ x‚ÇÑ))) (Œª _ ‚Üí _ ‚âü _) (proj‚ÇÇ x‚ÇÇ)))
     in inr ( z , CtxTrans'-cases¬¨ (ptps) {proj‚ÇÇ q} nm (proj‚ÇÇ x‚ÇÇ) (AST.pId name‚ÇÅ {proj‚ÇÇ x‚ÇÉ}) x)
  CtxTrans'-cases¬¨ (x‚ÇÅ ‚à∑ ptps) {q} nm (inl x‚ÇÇ) (AST.pId name‚ÇÅ {inl x‚ÇÉ}) x = inl ((proj‚ÇÅ x‚ÇÇ) , refl)

  ctxTrans-hlp : ‚àÄ {ih : _} {hp : HonestParticipantId ih} ‚Üí (nm : Identifier)
       
       ‚Üí (xx : ExistMemberAs
             (Œª x‚ÇÅ ‚Üí (nm ‚â° proj‚ÇÅ x‚ÇÅ) √ó (true ‚â° proj‚ÇÇ x‚ÇÅ))
             (participantsWM ih))

       ‚Üí ‚ü® CtxTrans' (participantsWM ih) (just (AST.pId nm {xx})) hp ‚ü©
         
       ‚Üí ExistMemberAs
             (Œª x‚ÇÅ ‚Üí (nm ‚â° proj‚ÇÅ x‚ÇÅ) √ó (true ‚â° proj‚ÇÇ x‚ÇÅ))
             (ExistMemberAs-mapExisting (Œª x‚ÇÅ x‚ÇÇ ‚Üí proj‚ÇÅ x‚ÇÅ , false)
              (participantsWM ih) (AST.pId-isInHon _ _ _ hp))
  ctxTrans-hlp {AST.interactionHead (x‚ÇÅ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {AST.pId name‚ÇÅ {inl x‚ÇÇ}} nm (inl x‚ÇÉ) ()
  ctxTrans-hlp {AST.interactionHead (x‚ÇÅ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {AST.pId name‚ÇÅ {inl x‚ÇÇ}} nm (inr x‚ÇÉ) _ =
     inr ( true‚â¢false ‚àò proj‚ÇÇ , (proj‚ÇÇ x‚ÇÉ))
  ctxTrans-hlp {AST.interactionHead (x‚ÇÅ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {AST.pId name‚ÇÅ {inr x‚ÇÇ}} nm (inl x‚ÇÉ) _ = inl x‚ÇÉ
  ctxTrans-hlp {AST.interactionHead (x‚ÇÅ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ {yy} {x‚ÇÑ , x‚ÇÖ}} {AST.pId name‚ÇÅ {inr x‚ÇÇ}} nm (inr x‚ÇÉ) x = 
     inr ( proj‚ÇÅ x‚ÇÉ
       , ctxTrans-hlp {AST.interactionHead (participantsWM‚ÇÅ) parameters‚ÇÅ {yy} {x‚ÇÖ}} {AST.pId name‚ÇÅ {proj‚ÇÇ x‚ÇÇ}} nm (proj‚ÇÇ x‚ÇÉ) x)


  ctxTrans-hlp-CE' : ‚àÄ {ih : _} ‚Üí ‚àÄ {entries‚ÇÅ} ‚Üí ‚àÄ hp ‚Üí ‚àÄ nm ‚Üí (q : ‚ü® IsHonestParticipantId {participantsWM ih} nm ‚ü©) ‚Üí  
                        Maybe
                          ‚ü® √ó-dp ( IsHonestParticipantId {participantsWM (makeDishonest ih hp)} nm )
                          
                           (CtxTrans' (participantsWM ih)
                                   (narrowScope ih
                                   (con entries‚ÇÅ nothing) (just (pId nm {q})) tt)
                                   hp) ‚ü© 
  ctxTrans-hlp-CE' {ih} {entries‚ÇÅ} hp nm q =
      dec-rec' _ just (const nothing)
        (proj‚ÇÅ (snd ( √ó-dp ( IsHonestParticipantId {participantsWM (makeDishonest ih hp)} nm )
                          
                           (CtxTrans' (participantsWM ih)
                                   (narrowScope ih
                                   (con entries‚ÇÅ nothing) (just (pId nm {q})) tt)
                                   hp))) )

  ctxTrans-hlp-CE : ‚àÄ {ih : _} ‚Üí ‚àÄ hp ‚Üí ContextEntry ih ‚Üí Maybe (ContextEntry (makeDishonest ih hp))
  ctxTrans-hlp-CE hp (AST.ice nothing name‚ÇÅ type‚ÇÅ) = just (AST.ice nothing name‚ÇÅ type‚ÇÅ)
  ctxTrans-hlp-CE ih@{AST.interactionHead (x ‚à∑ xs) pms} hp (AST.ice (just zz@(AST.pId nm' {yy'})) name‚ÇÅ type‚ÇÅ) =
    dec-rec' _ (just ‚àò (Œª b ‚Üí ice (just (pId nm' {b})) name‚ÇÅ type‚ÇÅ) ‚àò ctxTrans-hlp {ih = ih} {hp = hp} nm' yy')
     (const nothing) (proj‚ÇÅ (snd (CtxTrans' _ (just zz) hp )) )

  scopeTrans : ‚àÄ {ih : _} {hp} ‚Üí (sc : Scope ih) ‚Üí ‚ü® CtxTrans' (participantsWM ih) sc hp ‚ü© ‚Üí Scope (makeDishonest ih hp)
  scopeTrans {ih} {hp} nothing x = nothing
  scopeTrans {ih} {hp} (just (AST.pId name‚ÇÅ {yy})) x = just (AST.pId name‚ÇÅ {ctxTrans-hlp {ih} {hp} name‚ÇÅ yy x })


  CtxTrans : {ih : InteractionHead} ‚Üí HonestParticipantId ih ‚Üí Context ih ‚Üí Type‚ÇÄ
  CtxTrans {ih} hp Œì =
       ‚ü® CtxTrans' (participantsWM ih) (scope' Œì) hp ‚ü©
        √ó Œ£ ‚Ñï Œª k ‚Üí BTFS (Œª Œ§ ‚Üí (Œª y ‚Üí ‚ü® isNothing-dp (scope y) ‚ü© √ó (Œ§ ‚â° type y) ))
            (name)
            k (filterMap (ctxTrans-hlp-CE {ih} hp) (AST.entries Œì))  
         -- List (BTF (filterMap (ctxTrans-hlp-CE {ih} hp) (AST.entries Œì)))


  ctxTrans : ‚àÄ {ih : _} {hp} ‚Üí (Œì : Context ih) ‚Üí CtxTrans hp Œì ‚Üí Context (makeDishonest ih hp)
  AST.entries (ctxTrans Œì x) = btfs _ _ (snd (proj‚ÇÇ x))
  AST.scope' (ctxTrans {ih} {hp} Œì x) = scopeTrans {ih} {hp} (_) (proj‚ÇÅ x)

  -- CtxTrans'-cases-PSOF : {ih : InteractionHead} ‚Üí ‚àÄ {entries‚ÇÅ}
  --           ‚Üí ‚àÄ nm
  --           ‚Üí (z : (‚ü® IsHonestParticipantId {participantsWM ih} nm ‚ü©))
  --           ‚Üí (hp : (HonestParticipantId' {participantsWM ih}))
  --           ‚Üí (d : ‚ü® CtxTrans' (participantsWM ih) (just (AST.pId nm {z})) hp ‚ü©)
  --           ‚Üí ‚àÄ vNm
  --           ‚Üí (d' : CtxTrans hp (con entries‚ÇÅ nothing))
  --           ‚Üí ‚ü® IsPrivateSymbolOf {ih} (con entries‚ÇÅ nothing) (AST.pId nm {z}) vNm ‚ü©
  --           ‚Üí ‚ü® IsPrivateSymbolOf {makeDishonest ih hp} ((ctxTrans {hp = hp} (con entries‚ÇÅ nothing) d') )
  --                  (AST.pId nm {CtxTrans'-cases (participantsWM ih) {uniquePtcpnts ih} nm z hp d}) vNm ‚ü©
  -- CtxTrans'-cases-PSOF {entries‚ÇÅ = e‚ÇÄ ‚à∑ entries‚ÇÅ} nm z hp d vNm (x‚ÇÇ , d') = {!!}

  -- CtxTrans'-cases-PSOF : {ih : InteractionHead} ‚Üí ‚àÄ {entries‚ÇÅ}
  --           ‚Üí ‚àÄ nm
  --           ‚Üí (z : (‚ü® IsHonestParticipantId {participantsWM ih} nm ‚ü©))
  --           ‚Üí (hp : (HonestParticipantId' {participantsWM ih}))
  --           ‚Üí (d : ‚ü® CtxTrans' (participantsWM ih) (just (AST.pId nm {z})) hp ‚ü©)
  --           ‚Üí ‚àÄ vNm
  --           ‚Üí (d' : CtxTrans hp (con entries‚ÇÅ nothing))
  --           ‚Üí ‚ü® IsPrivateSymbolOf {ih} (con entries‚ÇÅ nothing) (AST.pId nm {z}) vNm ‚ü©
  --           ‚Üí ‚ü® IsPrivateSymbolOf {makeDishonest ih hp} ((ctxTrans {hp = hp} (con entries‚ÇÅ nothing) d') )
  --                  (AST.pId nm {CtxTrans'-cases (participantsWM ih) {uniquePtcpnts ih} nm z hp d}) vNm ‚ü©
  -- CtxTrans'-cases-PSOF {entries‚ÇÅ = e‚ÇÄ ‚à∑ entries‚ÇÅ} nm z hp d vNm (x‚ÇÇ , d') =
  --    ? ‚àò existFWIA-filter h

  --   where

  --     h' : ? ‚Üí {!!}
  --     h' = {!!}

  --     h : ‚àÄ a ‚Üí recMaybe {!!} {!!} {!!}
  --     h = {!!}

     

  ctxTrans-symbol : {ih : InteractionHead} ‚Üí ‚àÄ Œì Œ§ hp ‚Üí ‚àÄ name‚ÇÅ ‚Üí ‚àÄ d
                   ‚Üí ‚ü® IsDefinedSymbolOfTy Œì Œ§ name‚ÇÅ ‚ü© 
                   ‚Üí ‚ü® IsDefinedSymbolOfTy (ctxTrans {ih} {hp} Œì d) Œ§ name‚ÇÅ ‚ü© 

  ctxTrans-symbol = {!!}


  ctxTrans-IsNotConsensus : ‚àÄ {ih} ‚Üí ‚àÄ {hp} ‚Üí ‚àÄ c ‚Üí ‚àÄ d
           ‚Üí ‚ü® IsNotConsensus c ‚ü©
           ‚Üí ‚ü® IsNotConsensus (ctxTrans {ih} {hp} c d) ‚ü©
  ctxTrans-IsNotConsensus (AST.con entries‚ÇÅ (just (AST.pId name‚ÇÅ))) d x = tt

  ctxTrans-IsConsensus : ‚àÄ {ih} ‚Üí ‚àÄ {hp} ‚Üí ‚àÄ c ‚Üí ‚àÄ d
           ‚Üí ‚ü® IsConsensus c ‚ü©
           ‚Üí ‚ü® IsConsensus (ctxTrans {ih} {hp} c d) ‚ü©
  ctxTrans-IsConsensus (AST.con entries‚ÇÅ nothing) d x = tt

  -- ctxTransFld-lem-1 : ‚àÄ {ih : _} {hp} ‚Üí  (a : AST.ContextEntry' Identifier builtIns one) ‚Üí
  --                           recMaybe (Lift Unit)
  --                           (Œª a' ‚Üí
  --                              (AST.name a ‚â° AST.name a') √ó
  --                              ((b : GType) ‚Üí
  --                               (fst (isNothing-dp (AST.scope a)) √ó (b ‚â° AST.type a) ‚Üí
  --                                fst (isNothing-dp (AST.scope a')) √ó (b ‚â° AST.type a'))
  --                               √ó
  --                               (fst (isNothing-dp (AST.scope a')) √ó (b ‚â° AST.type a') ‚Üí
  --                                fst (isNothing-dp (AST.scope a)) √ó (b ‚â° AST.type a))))
  --                           (ctxTrans-hlp-CE {ih} hp a)
  -- ctxTransFld-lem-1 {AST.interactionHead participantsWM‚ÇÅ parameters‚ÇÅ} (AST.ice nothing name‚ÇÅ type‚ÇÅ) =
  --    refl , (Œª b ‚Üí (idfun _) , (idfun _))
  -- ctxTransFld-lem-1 {AST.interactionHead [] parameters‚ÇÅ} (AST.ice (just (AST.pId name‚ÇÇ {()})) name‚ÇÅ type‚ÇÅ)
  -- ctxTransFld-lem-1 {AST.interactionHead (x‚ÇÅ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {hp = hp} (AST.ice (just zz@(AST.pId name‚ÇÇ {yy})) name‚ÇÅ type‚ÇÅ) with (proj‚ÇÅ (snd (CtxTrans' _ (just zz) hp )) )
  -- ... | yes p = refl , (Œª b ‚Üí (idfun _) , (idfun _))
  -- ... | no ¬¨p = _



  ctxTransFld-lem-1 : ‚àÄ {ih : _} {hp} ‚Üí (entries‚ÇÅ : List (ContextEntry ih)) ‚Üí ‚àÄ p ‚Üí ‚àÄ x‚ÇÅ
                                   -- ‚Üí ‚àÄ ( x‚ÇÇ : ‚ü® CtxTrans' (participantsWM ih) (just p) hp ‚ü©)
                           ‚Üí BTFS-‚áí {D = GType} name (Œª b x‚ÇÉ ‚Üí  ‚ü® CtxTrans' (participantsWM ih) (scope x‚ÇÉ) hp ‚ü© √ó ((b ‚â° AST.type x‚ÇÉ)))
                                                    (Œª b x‚ÇÉ ‚Üí  ‚ü® CtxTrans' (participantsWM ih) (scope x‚ÇÉ) hp ‚ü© √ó ((b ‚â° AST.type x‚ÇÉ)))
                              entries‚ÇÅ
                              ((AST.entries
                                (bindingMechanics' ih (AST.con entries‚ÇÅ nothing)
                                 (AST.Stmnt.bindingS
                                  (AST.BStmnt.BS-publish! p x‚ÇÅ)))))
  ctxTransFld-lem-1 [] p (AST.psof name‚ÇÅ {()})
  ctxTransFld-lem-1 {AST.interactionHead [] parameters‚ÇÅ} (x ‚à∑ entries‚ÇÅ) (AST.pId name‚ÇÇ {()}) (AST.psof name‚ÇÅ {inl x‚ÇÅ})
  ctxTransFld-lem-1 {AST.interactionHead (x‚ÇÉ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} (x ‚à∑ entries‚ÇÅ) (AST.pId name‚ÇÇ) (AST.psof name‚ÇÅ {inl x‚ÇÅ}) = 
      (refl , (Œª _ ‚Üí prod-map (const _) (idfun _))) , (PW-refl _ entries‚ÇÅ Œª a ‚Üí refl , (Œª _ ‚Üí idfun _))
  ctxTransFld-lem-1 {AST.interactionHead [] parameters‚ÇÅ} (x ‚à∑ entries‚ÇÅ) (AST.pId name‚ÇÇ {()}) (AST.psof name‚ÇÅ {inr x‚ÇÅ}) 
  ctxTransFld-lem-1 ih@{AST.interactionHead (x‚ÇÉ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} (x ‚à∑ entries‚ÇÅ) p (AST.psof name‚ÇÅ {inr x‚ÇÅ}) =
     (refl , (Œª _ ‚Üí idfun _)) ,
       ctxTransFld-lem-1 {ih} (entries‚ÇÅ) p (AST.psof name‚ÇÅ {proj‚ÇÇ x‚ÇÅ}) 

  ctxTransFld-lem-2 : ‚àÄ {ih : _} {hp} ‚Üí (entries‚ÇÅ : List (ContextEntry ih)) ‚Üí ‚àÄ p ‚Üí ‚àÄ x‚ÇÅ
                      ‚Üí ‚àÄ ( x‚ÇÇ : ‚ü® CtxTrans' (participantsWM ih) (just p) hp ‚ü©)
                      ‚Üí PW (Œª x x‚ÇÉ ‚Üí  ‚ü®  (maybe-eqCase (ctxTrans-hlp-CE {ih} hp x) (ctxTrans-hlp-CE {ih} hp x‚ÇÉ)) ‚ü© 
                                  √ó recMaybe Unit* (Œª x‚ÇÑ ‚Üí ((AST.name x ‚â° AST.name x‚ÇÑ)) √ó
                                        (‚àÄ b ‚Üí ‚ü® (isNothing-dp (AST.scope x‚ÇÑ)) ‚ü© √ó (b ‚â° AST.type x‚ÇÑ)
                                             ‚Üí ‚ü® (CtxTrans' (participantsWM ih) (AST.scope x) hp) ‚ü© √ó (b ‚â° AST.type x)))
                                     ( ctxTrans-hlp-CE {ih} hp x )
                                  √ó recMaybe Unit* (Œª x‚ÇÑ ‚Üí ((AST.name x‚ÇÉ ‚â° AST.name x‚ÇÑ)) √ó
                                        (‚àÄ b ‚Üí ‚ü®  (CtxTrans' (participantsWM ih) (AST.scope x‚ÇÉ) hp) ‚ü© √ó (b ‚â° AST.type x‚ÇÉ)
                                             ‚Üí ‚ü® (isNothing-dp (AST.scope x‚ÇÑ)) ‚ü©  √ó (b ‚â° AST.type x‚ÇÑ)))
                                      (ctxTrans-hlp-CE {ih} hp x‚ÇÉ))
                          entries‚ÇÅ
                          ((AST.entries
                                (bindingMechanics' ih (AST.con entries‚ÇÅ nothing)
                                 (AST.Stmnt.bindingS
                                  (AST.BStmnt.BS-publish! p x‚ÇÅ)))))
  ctxTransFld-lem-2 {AST.interactionHead [] parameters‚ÇÅ} entries‚ÇÅ (AST.pId name‚ÇÅ {()}) x‚ÇÅ x‚ÇÇ 
  ctxTransFld-lem-2 {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} [] p (AST.psof name‚ÇÅ {()}) x‚ÇÇ
  ctxTransFld-lem-2 {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {hp} (AST.ice nothing name‚ÇÇ type‚ÇÅ ‚à∑ entries‚ÇÅ) p (AST.psof name‚ÇÅ {inl (x‚ÇÅ , ())}) x‚ÇÇ
     -- (tt , ((refl , (Œª b x‚ÇÉ ‚Üí x‚ÇÉ)) , (refl , (Œª b x‚ÇÉ ‚Üí x‚ÇÉ)))) ,
     --   (PW-refl _ entries‚ÇÅ (Œª a ‚Üí maybe-eqCase-refl (ctxTrans-hlp-CE hp a)
     --        , {!!}))
  ctxTransFld-lem-2 {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} (AST.ice nothing name‚ÇÇ type‚ÇÅ ‚à∑ entries‚ÇÅ) p (AST.psof name‚ÇÅ {inr x‚ÇÅ}) x‚ÇÇ =
    {!!} , (ctxTransFld-lem-2 {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} (entries‚ÇÅ) p (AST.psof name‚ÇÅ {proj‚ÇÇ x‚ÇÅ}) x‚ÇÇ)
  ctxTransFld-lem-2 {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {AST.pId name‚ÇÑ {yy}} (AST.ice (just (AST.pId name‚ÇÉ {yyy})) name‚ÇÇ type‚ÇÅ ‚à∑ entries‚ÇÅ) (AST.pId name‚ÇÖ) (AST.psof name‚ÇÅ {inl x‚ÇÅ}) x‚ÇÇ with (proj‚ÇÅ (snd (CtxTrans' (x ‚à∑ participantsWM‚ÇÅ) (just (pId name‚ÇÉ {yyy})) (pId name‚ÇÑ {yy}))))
  ... | yes p‚ÇÅ = (_ , ((refl , (Œª b x‚ÇÉ ‚Üí empty-elim (proj‚ÇÅ x‚ÇÉ))) , (refl , (Œª b x‚ÇÉ ‚Üí x‚ÇÉ)))) ,
                      (PW-refl _ entries‚ÇÅ
                        (Œª a ‚Üí maybe-elim {B = Œª mmm ‚Üí fst
                          (maybe-eqCase (ctxTrans-hlp-CE (pId name‚ÇÑ) a)
                           mmm)
                          √ó
                          recMaybe (Lift Unit)
                          (Œª x‚ÇÑ ‚Üí
                             (AST.name a ‚â° AST.name x‚ÇÑ) √ó
                             ((b : GType) ‚Üí
                              fst (maybe-eqCase nothing (AST.scope x‚ÇÑ)) √ó (b ‚â° AST.type x‚ÇÑ) ‚Üí
                              fst (CtxTrans' (x ‚à∑ participantsWM‚ÇÅ) (AST.scope a) (pId name‚ÇÑ)) √ó
                              (b ‚â° AST.type a)))
                          mmm
                          √ó
                          recMaybe (Lift Unit)
                          (Œª x‚ÇÑ ‚Üí
                             (AST.name a ‚â° AST.name x‚ÇÑ) √ó
                             ((b : GType) ‚Üí
                              fst (CtxTrans' (x ‚à∑ participantsWM‚ÇÅ) (AST.scope a) (pId name‚ÇÑ)) √ó
                              (b ‚â° AST.type a) ‚Üí
                              fst (maybe-eqCase nothing (AST.scope x‚ÇÑ)) √ó (b ‚â° AST.type x‚ÇÑ)))
                          mmm} {!!} {!!} (ctxTrans-hlp-CE (pId name‚ÇÑ) a)))
  ... | no ¬¨p = empty-elim (¬¨p {!x‚ÇÇ!})

  ctxTransFld-lem-2 {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} (AST.ice (just (AST.pId name‚ÇÉ)) name‚ÇÇ type‚ÇÅ ‚à∑ entries‚ÇÅ) p (AST.psof name‚ÇÅ {inr x‚ÇÅ}) x‚ÇÇ =
    {!!} , (ctxTransFld-lem-2 {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} (entries‚ÇÅ) p (AST.psof name‚ÇÅ {proj‚ÇÇ x‚ÇÅ}) x‚ÇÇ)
  -- ctxTransFld-lem-2 ih@{AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {hp} (x‚ÇÉ ‚à∑ entries‚ÇÅ) p (AST.psof name‚ÇÅ {inr x‚ÇÅ}) x‚ÇÇ with (ctxTrans-hlp-CE {ih} hp x‚ÇÉ)
  -- ... | nothing = (_ , (_ , _)) , ctxTransFld-lem-2 {ih} {hp} entries‚ÇÅ p (AST.psof name‚ÇÅ {proj‚ÇÇ x‚ÇÅ}) x‚ÇÇ
  -- ... | just x‚ÇÑ = (_ , (({!!} , {!!}) , {!!})) , (ctxTransFld-lem-2 {ih} {hp} entries‚ÇÅ p (AST.psof name‚ÇÅ {proj‚ÇÇ x‚ÇÅ}) x‚ÇÇ)
  --    -- (maybe-eqCase-refl (ctxTrans-hlp-CE hp x‚ÇÉ) , {!!}) , {!!}

  -- ctxTransFld-lem-1 {AST.interactionHead participantsWM‚ÇÅ parameters‚ÇÅ} (AST.ice nothing name‚ÇÅ type‚ÇÅ) =
  --    refl , (Œª b ‚Üí (idfun _) , (idfun _))
  -- ctxTransFld-lem-1 {AST.interactionHead [] parameters‚ÇÅ} (AST.ice (just (AST.pId name‚ÇÇ {()})) name‚ÇÅ type‚ÇÅ)
  -- ctxTransFld-lem-1 {AST.interactionHead (x‚ÇÅ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} {hp = hp} (AST.ice (just zz@(AST.pId name‚ÇÇ {yy})) name‚ÇÅ type‚ÇÅ) with (proj‚ÇÅ (snd (CtxTrans' _ (just zz) hp )) )
  -- ... | yes p = refl , (Œª b ‚Üí (idfun _) , (idfun _))
  -- ... | no ¬¨p = _



  -- ctxTransFld-lem-22 : ‚àÄ ih ‚Üí ‚àÄ hp ‚Üí ‚àÄ name‚ÇÉ ‚Üí ‚àÄ scope‚ÇÅ ‚Üí ‚àÄ type‚ÇÅ ‚Üí ‚ü® CtxTrans' (participantsWM ih) scope‚ÇÅ hp ‚ü©
  --       ‚Üí ‚ü® maybe-eqCase (ctxTrans-hlp-CE {ih} hp (AST.ice scope‚ÇÅ name‚ÇÉ type‚ÇÅ))
  --                 (ctxTrans-hlp-CE {ih} hp (AST.ice nothing name‚ÇÉ type‚ÇÅ)) ‚ü© 
  -- ctxTransFld-lem-22 ih hp name‚ÇÉ nothing type‚ÇÅ x = _
  -- ctxTransFld-lem-22 (AST.interactionHead [] parameters‚ÇÅ) hp name‚ÇÉ (just (AST.pId name‚ÇÅ {()})) type‚ÇÅ x
  -- ctxTransFld-lem-22 (AST.interactionHead (x‚ÇÇ ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ) hp name‚ÇÉ (just (AST.pId name‚ÇÅ {yy})) type‚ÇÅ x with (proj‚ÇÅ (snd (CtxTrans' (x‚ÇÇ ‚à∑ participantsWM‚ÇÅ) (just (pId name‚ÇÅ {yy})) hp)))
  -- ... | yes p = _
  -- ... | no ¬¨p = ¬¨p x
  
  -- ctxTransFld-lem-2 : ‚àÄ {ih : _} {hp} ‚Üí ‚àÄ entries‚ÇÅ
  --                                ‚Üí (p : HonestParticipantId')
  --                                ‚Üí (x‚ÇÅ : PrivateSymbolOf (AST.con entries‚ÇÅ nothing) p) ‚Üí
  --                                   (x‚ÇÇ : fst (CtxTrans' (participantsWM ih) (just p) hp))
  --                                   ‚Üí PW (Œª x‚ÇÉ x‚ÇÑ ‚Üí
  --                                     Lift
  --                                     ‚ü®(maybe-eqCase (ctxTrans-hlp-CE {ih} hp x‚ÇÉ) (ctxTrans-hlp-CE {ih} hp x‚ÇÑ))‚ü©)
  --                                  entries‚ÇÅ (bindingMechanics ih {AST.con entries‚ÇÅ nothing} (BS-publish! p x‚ÇÅ))
  -- ctxTransFld-lem-2 {AST.interactionHead [] parameters‚ÇÅ} {hp} (AST.ice scope‚ÇÅ name‚ÇÉ type‚ÇÅ ‚à∑ entries‚ÇÅ) (AST.pId name‚ÇÇ {()}) (AST.psof name‚ÇÅ {inl x‚ÇÅ}) x‚ÇÇ

  -- ctxTransFld-lem-2 {ih@(AST.interactionHead (xx ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ)} {hp} (AST.ice nothing name‚ÇÉ type‚ÇÅ ‚à∑ entries‚ÇÅ) (AST.pId name‚ÇÇ {yy}) (AST.psof name‚ÇÅ {inl (x , ())}) x‚ÇÇ
  -- ctxTransFld-lem-2 {ih@(AST.interactionHead (xx ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ)} {hp} (AST.ice ss@(just (AST.pId name‚ÇÑ {yy'})) name‚ÇÉ type‚ÇÅ ‚à∑ entries‚ÇÅ) (AST.pId name‚ÇÇ {yy}) (AST.psof name‚ÇÅ {inl x‚ÇÅ}) x‚ÇÇ = 
  --   (lift (ctxTransFld-lem-22 ih hp name‚ÇÉ ss type‚ÇÅ
  --         -- {!x‚ÇÇ!} 
  --       (subst {x = (pId name‚ÇÇ {yy})} {y = (pId name‚ÇÑ {yy'})}
  --         (Œª x ‚Üí fst (CtxTrans' (xx ‚à∑ participantsWM‚ÇÅ) (just x) hp)) (Œª i ‚Üí AST.pId (proj‚ÇÇ x‚ÇÅ i)
  --                    {toPathP {A = Œª i ‚Üí fst (IsHonestParticipantId {participants = xx ‚à∑ participantsWM‚ÇÅ} (proj‚ÇÇ x‚ÇÅ i))}
  --                      {x = yy} {y = yy'}
  --                       (proj‚ÇÇ (snd (IsHonestParticipantId {xx ‚à∑ participantsWM‚ÇÅ} (proj‚ÇÇ x‚ÇÅ i1))) _ _)
  --                               i}) x‚ÇÇ )
  --      )) , PW-refl _ entries‚ÇÅ
  --            Œª a ‚Üí lift (maybe-eqCase-refl (ctxTrans-hlp-CE hp a))
  
  -- ctxTransFld-lem-2 {hp = hp} (x ‚à∑ entries‚ÇÅ) p (AST.psof name‚ÇÅ {inr x‚ÇÅ}) x‚ÇÇ =
  --    lift (maybe-eqCase-refl (ctxTrans-hlp-CE hp x)) , (ctxTransFld-lem-2 (entries‚ÇÅ) p (AST.psof name‚ÇÅ {proj‚ÇÇ x‚ÇÅ}) x‚ÇÇ)

  ctxTransFld : ‚àÄ {ih : _} {hp} ‚Üí (c : Context ih) (a : Stmnt ih c)
                    ‚Üí CtxTrans hp c
                    ‚Üí CtxTrans hp (bindingMechanics' ih c a)
  ctxTransFld {hp = hp} c (AST.bindingS (AST.BS-let (AST.ice scope‚ÇÅ name‚ÇÅ type‚ÇÅ) x‚ÇÅ)) x = 
    (proj‚ÇÅ x) , 
      maybe-elim
        {B = Œª x‚ÇÇ ‚Üí
             Œ£ ‚Ñï
                (Œª k ‚Üí
                   BTFS (Œª Œ§ y ‚Üí typ (isNothing-dp (AST.scope y)) √ó (Œ§ ‚â° AST.type y))
                   AST.name k
                   (recMaybe (filterMap (ctxTrans-hlp-CE hp) (c .AST.entries))
                    (_‚à∑ filterMap (ctxTrans-hlp-CE hp) (c .AST.entries))
                    x‚ÇÇ))
                 }
                 (proj‚ÇÇ x)
                 (Œª _ ‚Üí  _ , tailBTFS _ _ (snd (proj‚ÇÇ x)))
                  (ctxTrans-hlp-CE hp (ice scope‚ÇÅ name‚ÇÅ type‚ÇÅ)) 
  ctxTransFld {ih} {hp = hp} c@(AST.con entries‚ÇÅ nothing) (AST.bindingS (AST.BS-publish! p x‚ÇÅ {isCon})) x = 
       (proj‚ÇÅ x) , 
      dec-rec' _
          (Œª x‚ÇÇ ‚Üí (fst (proj‚ÇÇ x))
             , btfs-‚áí name
                 (BTFS-‚áí-filterMap name name
                      -- {B' = {!Œª z z‚ÇÅ ‚Üí
                      --           Cubical.Syntax.‚ü®‚ü©.has-‚ü®‚ü©.‚ü® TypeWithStr-has-‚ü®‚ü© ‚ü©
                      --           (CtxTrans' (participantsWM ih) (AST.scope z‚ÇÅ) hp)
                      --           √ó (z ‚â° AST.type z‚ÇÅ)!}}
                      -- {B'' = {!!}} 
                   (ctxTransFld-lem-2 {ih} {hp} entries‚ÇÅ p x‚ÇÅ x‚ÇÇ)
                    ((ctxTransFld-lem-1 {ih} {hp} entries‚ÇÅ p x‚ÇÅ)))
                 (fst (proj‚ÇÇ x)) (snd (proj‚ÇÇ x))  
                -- btfs-‚áí _
                --       (btfs-map _ (BTFS-‚áí-filterMap name name {f = (ctxTrans-hlp-CE hp)}
                --             {entries‚ÇÅ}
                --             {bindingMechanics ih (BS-publish! p x‚ÇÅ {isCon})}
                --           (ctxTransFld-lem-2 entries‚ÇÅ p x‚ÇÅ x‚ÇÇ)
                --            {B' = Œª x‚ÇÉ x‚ÇÑ ‚Üí ‚ü®  CtxTrans' (participantsWM ih) (AST.scope x‚ÇÑ) hp  ‚ü© √ó (x‚ÇÉ ‚â° AST.type x‚ÇÑ)}
                --            {B'' = Œª x‚ÇÉ x‚ÇÑ ‚Üí ‚ü® CtxTrans' (participantsWM
                --                                           (makeDishonest (ih) hp)) (AST.scope x‚ÇÑ)
                --                                              ({!ih!}) ‚ü© √ó (x‚ÇÉ ‚â° AST.type x‚ÇÑ)}
                --              -- {!!}
                --            (ctxTransFld-lem-1 {ih} {hp})
                --            {!(snd (proj‚ÇÇ x))!}))
                           
                --                               (fst (proj‚ÇÇ x)) (snd (proj‚ÇÇ x))
             )
          {!!}
         -- (Œª x‚ÇÇ ‚Üí map-List (BTF-trans
         --  (haveSameL-filter-lemma
         --                                 (ctxTrans-hlp-CE hp)
         --                                 entries‚ÇÅ
         --                                 (bindingMechanics ih (BS-publish! p x‚ÇÅ {isCon}))
         --                                 {!!})

         --  ) (proj‚ÇÇ x))

         -- (Œª x‚ÇÇ ‚Üí {!!}
         --      ‚à∑ map-List {!!} (proj‚ÇÇ x))
           ((proj‚ÇÅ (snd (CtxTrans' _ (just p) hp )) ))
  ctxTransFld c (AST.nonBindingS x‚ÇÅ) x = x

  -- TODO : remove unsafe pragma by stratification on nesting depth or by introducing speicalized subst in h-expr

--   {-# TERMINATING #-}
--   paramSubst : ‚àÄ {ih : _} ‚Üí (hp : HonestParticipantId ih)  ‚Üí 
--                    ‚àÄ {Œì : Context ih} ‚Üí (t : CtxTrans hp Œì) ‚Üí  Statements _ Œì ‚Üí Statements _ (ctxTrans {hp = hp} Œì t) 


--   paramSubst-e : ‚àÄ {ih : _} ‚Üí (hp : HonestParticipantId ih) ‚Üí ‚àÄ Œ§ ‚Üí {c : Context ih} (d : CtxTrans hp c)
--                    ‚Üí Expr ih c Œ§ ‚Üí (Expr (makeDishonest ih hp) (ctxTrans {ih} {hp} c d) Œ§)


--   paramSubst-h-arg : ‚àÄ {ih : _} ‚Üí (hp : HonestParticipantId ih) ‚Üí ‚àÄ Œ§ ‚Üí {c : Context ih} (d : CtxTrans hp c)
--                    ‚Üí Arg ih c Œ§ ‚Üí (Arg (makeDishonest ih hp) (ctxTrans {ih} {hp} c d) Œ§)

--   paramSubst-h-args : ‚àÄ {ih : _} ‚Üí (hp : HonestParticipantId ih) ‚Üí ‚àÄ Œ§s ‚Üí {c : Context ih} (d : CtxTrans hp c)
--                    ‚Üí Args ih c Œ§s ‚Üí (Args (makeDishonest ih hp) (ctxTrans {ih} {hp} c d) Œ§s)


--   paramSubst-h : ‚àÄ {ih : _} ‚Üí (hp : HonestParticipantId ih) ‚Üí {c : Context ih} (d : CtxTrans hp c) ‚Üí Stmnt ih c ‚Üí Maybe (Stmnt (makeDishonest ih hp) (ctxTrans {ih} {hp} c d))
--   paramSubst-h {AST.interactionHead [] parameters‚ÇÅ} (AST.pId name‚ÇÅ {()}) (x‚ÇÅ , x‚ÇÇ) x
--   paramSubst-h {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} hp {AST.con entries‚ÇÅ nothing} d (set name‚ÇÅ ‚à∂ type‚ÇÅ ‚âî x‚ÇÅ) =
--       just (AST.bindingS (AST.BS-let (AST.ice nothing name‚ÇÅ type‚ÇÅ) (paramSubst-e hp type‚ÇÅ d x‚ÇÅ)))
--   paramSubst-h ih@{AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} hp {AST.con entries‚ÇÅ nothing} d (AST.bindingS (AST.BS-let (AST.ice (just (AST.pId name‚ÇÇ {yy})) name‚ÇÅ type‚ÇÅ) x‚ÇÅ)) =
  
--        map-Maybe (Œª zz ‚Üí ((AST.bindingS (AST.BS-let (AST.ice (just (AST.pId name‚ÇÇ)) name‚ÇÅ type‚ÇÅ)
--          ((paramSubst-e hp type‚ÇÅ (proj‚ÇÇ zz , proj‚ÇÇ d) x‚ÇÅ)))))) (ctxTrans-hlp-CE' {ih} {entries‚ÇÅ} hp name‚ÇÇ yy)
--   -- 
--   paramSubst-h {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} hp {AST.con entries‚ÇÅ (just (AST.pId name‚ÇÇ))} d (set name‚ÇÅ ‚à∂ type‚ÇÅ ‚âî x‚ÇÅ) = 
--     just (AST.bindingS (AST.BS-let (AST.ice nothing name‚ÇÅ type‚ÇÅ) (paramSubst-e hp type‚ÇÅ d x‚ÇÅ)))


--   paramSubst-h {ih@(AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ)} hp {c@(AST.con entries‚ÇÅ nothing)} d (AST.bindingS (AST.BS-publish! p@(AST.pId name‚ÇÅ {yy}) x‚ÇÅ)) =
--    just ( dec-rec' _
--               {!!}
--               {!!}
--               -- (Œª x ‚Üí (AST.bindingS
--               --            ((AST.BS-publish!
--               --               (AST.pId _ {CtxTrans'-cases _ {AST.uniquePtcpnts ih} _ (pId-isInHon p) hp x})
--               --                          (AST.psof _
--               --                            {CtxTrans'-cases-PSOF _
--               --                                   (pId-isInHon p) _ x _ d (psof-proof _ x‚ÇÅ)  })
--               --                          ))))
--               -- (Œª x‚ÇÉ ‚Üí (AST.bindingS (AST.BS-let (AST.ice nothing (psof-name _ x‚ÇÅ)
--               --                    (IsPrivateSymbolOf‚ÜíGType ih c p _ (psof-proof _ x‚ÇÅ)))
--               --                    (receivePublished (AST.pId _
--               --                          {CtxTrans'-cases¬¨ _ {AST.uniquePtcpnts ih} _ (pId-isInHon p) hp x‚ÇÉ})) )))
--            (proj‚ÇÅ (snd (CtxTrans' _ (just p) hp)))
--      )
--   paramSubst-h ih@{AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} hp c@{AST.con entries‚ÇÅ nothing} d (AST.nonBindingS (AST.stmntNBS x‚ÇÅ)) = just (h x‚ÇÅ)
--      where
--        h : NBStmnt
--            (interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ) c ‚Üí 
--                     (Stmnt
--                      (makeDishonest (interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ)
--                       hp)
--                      (ctxTrans c d))
--        h (AST.NBS-require! x) = (AST.nonBindingS (AST.stmntNBS (AST.NBS-require! (paramSubst-e hp _ d x))))
--        h (AST.NBS-deposit! x x‚ÇÅ) = (AST.nonBindingS (AST.stmntNBS (AST.NBS-deposit! (makeDishonest-ParticipantId ih hp x) (paramSubst-e hp _ d x‚ÇÅ)))) 
--        h (AST.NBS-withdraw! x x‚ÇÅ) = (AST.nonBindingS (AST.stmntNBS (AST.NBS-withdraw! (makeDishonest-ParticipantId ih hp x) (paramSubst-e hp _ d x‚ÇÅ))))
--        h (AST.NBS-publishVal! x x‚ÇÅ) = imposible-statment-ProjectOut
--          where
--            postulate imposible-statment-ProjectOut : _

       
--   paramSubst-h {AST.interactionHead (x ‚à∑ participantsWM‚ÇÅ) parameters‚ÇÅ} hp {c} d (AST.nonBindingS (AST.exprNBS x‚ÇÅ)) =
--      just (AST.nonBindingS (AST.exprNBS (paramSubst-e hp _ d x‚ÇÅ)))
    
  
--   paramSubst-h-args hp [] d x = _
--   paramSubst-h-args hp (x‚ÇÅ ‚à∑ []) d x = paramSubst-h-arg hp x‚ÇÅ d x
--   paramSubst-h-args hp (x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ Œ§s) d (x , x‚ÇÉ) = paramSubst-h-arg hp x‚ÇÅ d x , paramSubst-h-args hp (x‚ÇÇ ‚à∑ Œ§s) d x‚ÇÉ

--   paramSubst-h-arg hp Œ§ d (AST.var-a (AST.dsot name‚ÇÅ {yy})) =
--      AST.var-a (AST.dsot name‚ÇÅ {ctxTrans-symbol _ _ _ _ _ yy})
--   paramSubst-h-arg hp Œ§ d (AST.lit-a x) = AST.lit-a x

--   paramSubst-e hp Œ§ d (AST.var (AST.dsot name‚ÇÅ {yy})) =
--     AST.var (AST.dsot name‚ÇÅ {ctxTrans-symbol _ _ _ _ _ yy})
  
--   paramSubst-e {ih} hp Œ§ {Œì} d (stmnts‚ÇÅ Õæb expr‚ÇÅ) =
--     let stmnts‚ÇÅ' = paramSubst hp d stmnts‚ÇÅ
--         (Œì' , d') = foldLinked' (Linked'-collect-Œ£ {fld-D = ctxTransFld {ih} {hp}} d stmnts‚ÇÅ )
--         p : (fst (foldLinked' (Linked'-collect-Œ£ d stmnts‚ÇÅ))) ‚â° (foldLinked' stmnts‚ÇÅ)
--         p = {!!}
--         expr‚ÇÅ' = paramSubst-e hp Œ§ (subst (CtxTrans hp) p d') expr‚ÇÅ
--         w' : ctxTrans (foldLinked' stmnts‚ÇÅ) (subst (CtxTrans hp) p d')
--                ‚â° (foldLinked' (paramSubst hp d stmnts‚ÇÅ))
--         w' = {!!}
--     in stmnts‚ÇÅ' Õæb  subst (Œª x ‚Üí Expr (makeDishonest ih hp) x Œ§) w' expr‚ÇÅ'
    
--   paramSubst-e hp Œ§ d (AST.lit x) = lit x
--   paramSubst-e hp Œ§ d (x AST.$' x‚ÇÅ) =
--      (x AST.$' paramSubst-h-args hp _ d x‚ÇÅ)
--   paramSubst-e hp Œ§ d (AST.input x {y}) = (AST.input x {ctxTrans-IsNotConsensus _ d y})
--   paramSubst-e hp Œ§ d (AST.sign x {y} {yy}) = (AST.sign (paramSubst-h-arg hp _ d x) {ctxTrans-IsNotConsensus _ d y } {yy})
--   paramSubst-e {ih} hp Œ§ d (AST.receivePublished x {y}) =
--       (AST.receivePublished (makeDishonest-DishonestParticipantId ih hp x) {ctxTrans-IsConsensus _ d y})
--   paramSubst-e hp Œ§ d (AST.if x then x‚ÇÅ else x‚ÇÇ) =
--       (AST.if (paramSubst-e hp _ d x) then (paramSubst-e hp Œ§ d x‚ÇÅ) else (paramSubst-e hp Œ§ d x‚ÇÇ))





--   paramSubst {ih} hp t =
--        map-Linked'-map-Œ£-Mb {D = CtxTrans {ih} hp}
--          (ctxTransFld {ih} {hp})
--          (ctxTrans {ih} {hp})
--           (paramSubst-h {ih} hp)
--          {!!}
--          t


-- -- --       h : {Œì : Context ih}
-- -- --              ‚Üí (b : Stmnt ih Œì) ‚Üí Stmnt _ (stripParamsCtx Œì)

-- -- --       h-expr : {Œì : Context ih} ‚Üí ‚àÄ {Œ§}
-- -- --              ‚Üí (b : Expr ih Œì Œ§) ‚Üí Expr _ (stripParamsCtx Œì) Œ§

-- -- --       h-arg : ‚àÄ {Œì Œ§} ‚Üí Arg ih Œì Œ§ ‚Üí Arg _ (stripParamsCtx Œì) Œ§
-- -- --       h-arg (AST.var-a (AST.dsot x {y})) =
-- -- --           sum-elim
-- -- --            (Œª a ‚Üí var-a (dsot x {inl a}))
-- -- --            (lit-a ‚àò (lookup-ParametersValue (ih .parameters) vv (iwt x _)) ‚àò proj‚ÇÇ)
-- -- --             y
-- -- --       h-arg (AST.lit-a x) = (AST.lit-a x)


-- -- --       h-args : ‚àÄ {Œì Œ§s}  ‚Üí Args ih Œì Œ§s ‚Üí Args _ (stripParamsCtx Œì) Œ§s
-- -- --       h-args {Œ§s = []} x = tt
-- -- --       h-args {Œ§s = x‚ÇÅ ‚à∑ []} x = h-arg x
-- -- --       h-args {Œ§s = x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ Œ§s} (x , x‚ÇÉ) = h-arg x , h-args  x‚ÇÉ 
      

-- -- --       h  (bindingS x) = bindingS (BS-lemma x)
-- -- --          where
-- -- --               BS-lemma : {Œì : Context ih} ‚Üí  BStmnt ih Œì -> BStmnt _ (stripParamsCtx Œì)
-- -- --               BS-lemma (BS-let x {asn} y) = (BS-let x {asn} (h-expr y))  
-- -- --               BS-lemma (BS-publish! p (psof name‚ÇÅ {w}) {y}) = (BS-publish! p (psof name‚ÇÅ {w}) {y})


-- -- --       h (nonBindingS x) = nonBindingS (z x)
-- -- --          where

-- -- --            zz : NBStmnt _ _ ‚Üí NBStmnt _ _ 
-- -- --            zz (NBS-require! x) = NBS-require! (h-expr x)
-- -- --            zz (NBS-deposit! p {y} x) = NBS-deposit! p {y} (h-expr x)
-- -- --            zz (NBS-withdraw! p {y} x) = NBS-withdraw! p {y} (h-expr x)
-- -- --            zz (NBS-publishVal! x y {z}) = NBS-publishVal! x y {z}

-- -- --            z : NBStmnt+Expr ih _ ‚Üí NBStmnt+Expr (stripParamsHead ih) _
-- -- --            z (stmntNBS x) =  stmntNBS (zz x)
-- -- --            z (exprNBS x) = exprNBS (h-expr x)

-- -- --       h-expr (var (dsot x {y})) =
-- -- --          sum-elim
-- -- --            (Œª a ‚Üí var (dsot x {inl a}))
-- -- --            (lit ‚àò (lookup-ParametersValue (ih .parameters) vv (iwt x _)) ‚àò proj‚ÇÇ)
-- -- --             y



-- -- --       h-expr (stmnts‚ÇÅ Õæb x) =
-- -- --          paramSubst {ih = ih} vv stmnts‚ÇÅ Õæb subst (Œª x‚ÇÅ ‚Üí Expr _ x‚ÇÅ _)
-- -- --              -- TODO : improve evaluation performance by introducing specialized "subst"
-- -- --              -- specialisation should be not only on Expr, but also on map-Linked'-map-fold
-- -- --         (map-Linked'-map-fold (stripParamsCtx {ih}) _ _ stmnts‚ÇÅ ) (h-expr x)
-- -- --       h-expr (lit x) = lit x
-- -- --       h-expr (_$'_ f xs) = _$'_ f (h-args xs)

-- -- --       h-expr (input msg {y}) = input msg {y}
-- -- --       -- h-expr (receivePublished x {y}) = publishVal x {y}
-- -- --       h-expr (if b then t else f) = if (h-expr b) then (h-expr t) else (h-expr f)
-- -- --       h-expr (AST.sign q {y} {w}) = (AST.sign (h-arg q) {y} {w})
-- -- --       h-expr (AST.receivePublished x x‚ÇÅ {y}) = AST.receivePublished x x‚ÇÅ {y}

-- -- --       hh : (Œì : Context ih) (x : Stmnt _ Œì) ‚Üí
-- -- --          stripParamsCtx (bindingMechanics' _ Œì x) ‚â°
-- -- --          bindingMechanics' (interactionHead (participantsWM ih) [])
-- -- --          (stripParamsCtx Œì) (h x)
-- -- --       hh _ (bindingS (BS-let _ _)) = refl 
-- -- --       hh _ (AST.bindingS (AST.BS-publish! _ (AST.psof name‚ÇÅ))) = refl
-- -- --       hh _ (nonBindingS _) = refl

-- -- --       -- h-args = ?

-- -- -- -- module Test-String where
-- -- -- --   open AST String {{String-Discrete-postulated}} zero

-- -- -- --   module ParamsSubstS = ParamsSubst {{String-Discrete-postulated}}

-- -- -- --   someInteraction : Interaction 
-- -- -- --   someInteraction =  
-- -- -- --        interaction‚ü®   "A" ‚à∑ "B" ‚à∑ [] ,  "pI1" ‚à∂ Nat ‚à∑ "b2" ‚à∂ Bool ‚à∑ "b1" ‚à∂ Bool ‚à∑ [] ‚ü© (
-- -- -- --             set "x" ‚à∂ Bool ‚âî < true > Õæ
-- -- -- --             at "B" set "y" ‚à∂ Bool ‚âî v "b1" Õæ
-- -- -- --             at "A" set "xx" ‚à∂ Bool ‚âî
-- -- -- --              ( if v "b1"
-- -- -- --                then
-- -- -- --                   (
-- -- -- --                   set "z" ‚à∂ Bool ‚âî input "enter choice 1" Õæ‚ÇÅ Õæb
-- -- -- --                   v "z"
-- -- -- --                 )
-- -- -- --                else (
-- -- -- --                 require! v "b2" Õæ'
-- -- -- --                 -- publish! "B" ‚ü∂ "y" Õæ
-- -- -- --                 -- withdraw! "B" ‚üµ < 3 > Õæ
-- -- -- --                 -- deposit! "B" ‚ü∂ < 2 > Õæ
-- -- -- --                 set "z" ‚à∂ Bool ‚âî < false > Õæb
-- -- -- --                 < true >
-- -- -- --                 )) Õæ
-- -- -- --             deposit! "B" ‚ü∂ < 2 > Õæ
-- -- -- --             at "A" set "yq" ‚à∂ Bool ‚âî input "enter choice 2" Õæ
-- -- -- --             withdraw! "B" ‚üµ < 3 > Õæ
-- -- -- --             publish! "A" ‚ü∂ "xx" Õæ        

-- -- -- --             publish! "B" ‚ü∂ "y" Õæ'        
-- -- -- --             set "yy" ‚à∂ Bool ‚âî v "y" )


-- -- -- --   param-sub-test : ‚Ñï √ó ùüö √ó ùüö √ó Unit ‚Üí Linked'
-- -- -- --                                         (bindingMechanics'
-- -- -- --                                          (ParamsSubstS.stripParamsHead
-- -- -- --                                           (interactionHead ("A" ‚à∑ "B" ‚à∑ [])
-- -- -- --                                            ("pI1" ‚à∂ Nat ‚à∑ "b2" ‚à∂ Bool ‚à∑ "b1" ‚à∂ Bool ‚à∑ []))))
-- -- -- --                                         (ParamsSubstS.stripParamsCtx (Interaction.emptyContext someInteraction))
-- -- -- --   param-sub-test vv = ParamsSubstS.paramSubst vv (Interaction.code someInteraction)
-- -- -- --       -- {!ParamsSubstS.paramSubst vv (Interaction.code someInteraction)!}


-- -- -- --   zzz :
-- -- -- --     let q : ‚Ñï √ó ùüö √ó ùüö √ó Unit
-- -- -- --         q = 3 , false , true , _
-- -- -- --         bT : Statements _ _
-- -- -- --         bT = (
-- -- -- --           set "x" ‚à∂ Bool ‚âî < true > Õæ
-- -- -- --           at "B" set "y" ‚à∂ Bool ‚âî < true > Õæ
-- -- -- --           at "A" set "xx" ‚à∂ Bool ‚âî (
-- -- -- --               require! < false > Õæ'
-- -- -- --               -- publish! "B" ‚ü∂ "y" Õæ
-- -- -- --               -- withdraw! "B" ‚üµ < 3 > Õæ
-- -- -- --               -- deposit! "B" ‚ü∂ < 2 > Õæ
-- -- -- --               set "z" ‚à∂ Bool ‚âî < false > Õæb
-- -- -- --               < true >
-- -- -- --               )Õæ
-- -- -- --           deposit! "B" ‚ü∂ < 2 > Õæ
-- -- -- --           withdraw! "B" ‚üµ < 3 > Õæ
-- -- -- --           publish! "B" ‚ü∂ "y" Õæ'        
-- -- -- --           set "yy" ‚à∂ Bool ‚âî v "y"
-- -- -- --           )
-- -- -- --     in bT ‚â° param-sub-test q 

-- -- -- --   zzz = refl



-- -- -- -- module Test-‚Ñï where
-- -- -- --   open AST ‚Ñï 

-- -- -- --   module ParamsSubstS = ParamsSubst {‚Ñï}

-- -- -- --   someInteraction : Interaction
-- -- -- --   someInteraction =  
-- -- -- --      interaction‚ü®   1 ‚à∑ 2 ‚à∑ [] ,  3 ‚à∂ Nat ‚à∑ 4 ‚à∂ Bool ‚à∑ 5 ‚à∂ Bool ‚à∑ [] ‚ü© (
-- -- -- --           set 6 ‚à∂ Bool ‚âî < true > Õæ
-- -- -- --           at 2 set 7 ‚à∂ Bool ‚âî v 5 Õæ
-- -- -- --           at 1 set 8 ‚à∂ Bool ‚âî (
-- -- -- --               require! v 4 Õæ'
-- -- -- --               -- publish! "B" ‚ü∂ "y" Õæ
-- -- -- --               -- withdraw! "B" ‚üµ < 3 > Õæ
-- -- -- --               -- deposit! "B" ‚ü∂ < 2 > Õæ
-- -- -- --               set 9 ‚à∂ Bool ‚âî < false > Õæb
-- -- -- --               < true >
-- -- -- --               )Õæ
-- -- -- --           deposit! 2 ‚ü∂ < 2 > Õæ
-- -- -- --           withdraw! 2 ‚üµ < 3 > Õæ
-- -- -- --           publish! 2 ‚ü∂ 7 Õæ'        
-- -- -- --           set 10 ‚à∂ Bool ‚âî v 7 )


-- -- -- --   param-sub-test : ‚Ñï √ó ùüö √ó ùüö √ó Unit ‚Üí Linked'
-- -- -- --                                         (bindingMechanics'
-- -- -- --                                          (ParamsSubstS.stripParamsHead
-- -- -- --                                           (interactionHead (1 ‚à∑ 2 ‚à∑ [])
-- -- -- --                                            (3 ‚à∂ Nat ‚à∑ 4 ‚à∂ Bool ‚à∑ 5 ‚à∂ Bool ‚à∑ []))))
-- -- -- --                                         (ParamsSubstS.stripParamsCtx (Interaction.emptyContext someInteraction))
-- -- -- --   param-sub-test vv = ParamsSubstS.paramSubst vv (Interaction.code someInteraction)

-- -- -- --   zzz-0 : Linked'
-- -- -- --             (bindingMechanics'
-- -- -- --              (ParamsSubstS.stripParamsHead
-- -- -- --               (interactionHead (1 ‚à∑ 2 ‚à∑ [])
-- -- -- --                (3 ‚à∂ Nat ‚à∑ 4 ‚à∂ Bool ‚à∑ 5 ‚à∂ Bool ‚à∑ []))))
-- -- -- --             (ParamsSubst.stripParamsCtx
-- -- -- --              (Interaction.emptyContext someInteraction))
              
-- -- -- --   zzz-0 = param-sub-test (3 , false , true , _)
-- -- -- --            -- bindingS
-- -- -- --             -- (BS-let (AST.ice nothing 6 Bool) {_}
-- -- -- --             --  (lit true))
-- -- -- --             -- ‚à∑L
-- -- -- --             -- (bindingS
-- -- -- --             --  (BS-let
-- -- -- --             --   (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --    (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --    (AST.ice (just (AST.pId 2 {_})) 7 Bool))
-- -- -- --             --   {_} (lit true))
-- -- -- --             --  ‚à∑L
-- -- -- --             --  (bindingS
-- -- -- --             --   (BS-let
-- -- -- --             --    (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --     (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --     (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --      (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --      (AST.ice (just (AST.pId 1 {_})) 8 Bool)))
-- -- -- --             --    {_}
-- -- -- --             --    (body
-- -- -- --             --     (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --      (Œª i ‚Üí
-- -- -- --             --         AST.Body {‚Ñï} ‚¶É ‚Ñï-Discrete ‚¶Ñ
-- -- -- --             --         (AST.interactionHead (1 ‚à∑ 2 ‚à∑ []) [] {_})
-- -- -- --             --         (record
-- -- -- --             --          { entries =
-- -- -- --             --              transp {Œª i‚ÇÅ ‚Üí ‚Ñì-zero}
-- -- -- --             --              (Œª i‚ÇÅ ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) (~ i)
-- -- -- --             --              (AST.ice (just (AST.pId 2 {_})) 7 Bool)
-- -- -- --             --              ‚à∑ AST.ice nothing 6 Bool ‚à∑ []
-- -- -- --             --          ; scope' = just (AST.pId 1 {_})
-- -- -- --             --          })
-- -- -- --             --         Bool)
-- -- -- --             --      i0
-- -- -- --             --      (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --       (Œª i ‚Üí
-- -- -- --             --          AST.Body {‚Ñï} ‚¶É ‚Ñï-Discrete ‚¶Ñ
-- -- -- --             --          (AST.interactionHead (1 ‚à∑ 2 ‚à∑ []) [] {_})
-- -- -- --             --          (record
-- -- -- --             --           { entries =
-- -- -- --             --               AST.ice (just (AST.pId 2 {_})) 7 Bool ‚à∑ AST.ice nothing 6 Bool ‚à∑ []
-- -- -- --             --           ; scope' = just (AST.pId 1 {_})
-- -- -- --             --           })
-- -- -- --             --          Bool)
-- -- -- --             --       i0
-- -- -- --             --       (bodyR
-- -- -- --             --        (nonBindingS
-- -- -- --             --         (stmntNBS
-- -- -- --             --          (NBS-require! (lit false)))
-- -- -- --             --         ‚à∑L
-- -- -- --             --         (bindingS
-- -- -- --             --          (BS-let
-- -- -- --             --           (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --            (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --            (AST.ice nothing 9 Bool))
-- -- -- --             --           {_} (lit false))
-- -- -- --             --          ‚à∑L []L))
-- -- -- --             --        (lit true))))))
-- -- -- --             --   ‚à∑L
-- -- -- --             --   (nonBindingS
-- -- -- --             --    (stmntNBS
-- -- -- --             --     (NBS-deposit! (AST.pId 2 {_}) {_}
-- -- -- --             --      (lit 2)))
-- -- -- --             --    ‚à∑L
-- -- -- --             --    (nonBindingS
-- -- -- --             --     (stmntNBS
-- -- -- --             --      (NBS-withdraw! (AST.pId 2 {_}) {_}
-- -- -- --             --       (lit 3)))
-- -- -- --             --     ‚à∑L
-- -- -- --             --     (bindingS
-- -- -- --             --      (BS-publish! (AST.pId 2 {_})
-- -- -- --             --       (psof 7 {_}) {_})
-- -- -- --             --      ‚à∑L
-- -- -- --             --      (bindingS
-- -- -- --             --       (BS-let
-- -- -- --             --        (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --         (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --         (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --          (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --          (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --           (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --           (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --            (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --            (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --             (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --             (transp {Œª i ‚Üí ‚Ñì-zero}
-- -- -- --             --              (Œª i ‚Üí AST.ContextEntry' ‚Ñï ‚¶É ‚Ñï-Discrete ‚¶Ñ {1 ‚à∑ 2 ‚à∑ []}) i0
-- -- -- --             --              (AST.ice nothing 10 Bool)))))))
-- -- -- --             --        {_} (var (dsot 7 {_})))
-- -- -- --             --       ‚à∑L []L))))))

-- -- -- --   zzz :
-- -- -- --     let q : ‚Ñï √ó ùüö √ó ùüö √ó Unit
-- -- -- --         q = 3 , false , true , _
-- -- -- --     in (
-- -- -- --           set 6 ‚à∂ Bool ‚âî < true > Õæ
-- -- -- --           at 2 set 7 ‚à∂ Bool ‚âî < true > Õæ
-- -- -- --           at 1 set 8 ‚à∂ Bool ‚âî (
-- -- -- --               require! < false > Õæ'
-- -- -- --               -- publish! "B" ‚ü∂ "y" Õæ
-- -- -- --               -- withdraw! "B" ‚üµ < 3 > Õæ
-- -- -- --               -- deposit! "B" ‚ü∂ < 2 > Õæ
-- -- -- --               set 9 ‚à∂ Bool ‚âî < false > Õæb
-- -- -- --               < true >
-- -- -- --               )Õæ
-- -- -- --           deposit! 2 ‚ü∂ < 2 > Õæ
-- -- -- --           withdraw! 2 ‚üµ < 3 > Õæ
-- -- -- --           publish! 2 ‚ü∂ 7 Õæ'        
-- -- -- --           set 10 ‚à∂ Bool ‚âî v 7 ) ‚â° param-sub-test q

-- -- -- --   zzz = refl
