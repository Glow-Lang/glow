
{-# OPTIONS --cubical  #-}
module Glow.ASTSafe where

open import Agda.Builtin.String
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything

open import Cubical.Data.Nat
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum
open import Cubical.Data.List

open import Cubical.Data.Maybe renaming (rec to recMaybe ;  nothing to ‚ó¶)
open import Cubical.Data.Bool hiding (if_then_else_)

open import Cubical.Data.Nat.Order.Recursive
open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

infixr 80 ‚Ä¢_

pattern ‚Ä¢ x = just x

data TopLevelDefinition : Type‚ÇÄ

Module = List TopLevelDefinition

data GType : Type‚ÇÄ where
  Bool·µç : GType 
  Int·µç : GType
  Nat·µç : GType

GTypeAgdaRep : GType ‚Üí Type‚ÇÄ
GTypeAgdaRep Bool·µç = Bool
GTypeAgdaRep Int·µç = ‚Ñ§
GTypeAgdaRep Nat·µç = ‚Ñï


data InteractionBody {participants‚Ñï : ‚Ñï} {paramtersTy : List GType} : Type‚ÇÄ

data InteractionEffect {participants‚Ñï : ‚Ñï} {paramtersTy : List GType} (ib : InteractionBody {participants‚Ñï} {paramtersTy}) : Type‚ÇÄ

data InteractionPart {participants‚Ñï : ‚Ñï} {paramtersTy : List GType} (ib : InteractionBody {participants‚Ñï} {paramtersTy}) : Type‚ÇÄ

data InteractionValue {participants‚Ñï : ‚Ñï} {paramtersTy : List GType} (ib : InteractionBody {participants‚Ñï} {paramtersTy}) GType : Type‚ÇÄ


-- data InteractionExpression {participants‚Ñï : ‚Ñï} {paramtersTy : List GType} : Type‚ÇÄ




getFreeSymbol : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
                        ‚Üí InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí ‚Ñï

Disc‚ÜíTy : ‚àÄ {‚Ñì} ‚Üí ‚àÄ {A : Type ‚Ñì} ‚Üí Dec A ‚Üí Type‚ÇÄ
Disc‚ÜíTy (yes p) = ‚ü® ‚ä§ ‚ü©
Disc‚ÜíTy (no ¬¨p) = ‚ü® ‚ä• ‚ü©

=‚ÑïTy : ‚Ñï ‚Üí ‚Ñï ‚Üí Type‚ÇÄ
=‚ÑïTy x x‚ÇÅ = Disc‚ÜíTy (discrete‚Ñï x x‚ÇÅ)

forceFreeSymbol : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
                        ‚Üí InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí ‚Ñï ‚Üí Type‚ÇÄ
forceFreeSymbol ib k = k ‚â§ getFreeSymbol ib

isDefinedSymbol : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
                        ‚Üí InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí ‚Ñï ‚Üí Type‚ÇÄ
isDefinedSymbol ib k = k < getFreeSymbol ib

isDefinedSymbolOfTy : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
                        ‚Üí InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí ‚Ñï ‚Üí GType ‚Üí Type‚ÇÄ
isDefinedSymbolOfTy ib k _ = ‚ü® ‚ä• ‚ü©

isParticipantSymbol : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
                        ‚Üí InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí ‚Ñï ‚Üí Type‚ÇÄ
isParticipantSymbol {participants‚Ñï = pN} _  k = k < pN


statementScopeCheck : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
                        ‚Üí (ib : InteractionBody {participants‚Ñï} {paramtersTy}) ‚Üí InteractionPart {participants‚Ñï} {paramtersTy} ib ‚Üí  Type‚ÇÄ
statementScopeCheck ib ip = ‚ü® ‚ä§ ‚ü© 

infixl 6 interaction‚ü®_,_‚ü©‚ÅÖ_‚ÅÜ

infix 60 _‚Çó
infix 60 _‚Çó'



data TopLevelDefinition where
  interaction‚ü®_,_‚ü©‚ÅÖ_‚ÅÜ :
     (participants‚Ñï : ‚Ñï) ‚Üí
     (paramtersTy : List GType) ‚Üí
     InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí
       TopLevelDefinition

-- forceLetSymbol : ‚Ñï 

data InteractionEffect ib where
  -- verify!  : {!!} ‚Üí InteractionEffect ib
  publish!_‚ü∂_ : (k : ‚Ñï) ‚Üí {_ : isParticipantSymbol ib k} ‚Üí
                    (j : ‚Ñï) ‚Üí {_ : isDefinedSymbol ib j} ‚Üí InteractionEffect ib
  deposit!_‚ü∂_  : (k : ‚Ñï) ‚Üí {_ : isParticipantSymbol ib k}
                   ‚Üí InteractionValue ib Int·µç
                   ‚Üí InteractionEffect ib
  withdraw!_‚üµ_ : (k : ‚Ñï) ‚Üí {_ : isParticipantSymbol ib k}
                   ‚Üí InteractionValue ib Int·µç
                   ‚Üí InteractionEffect ib

infix 40 _-_‚à∂_‚âî_
-- infixl 40 ‚ÜØ_

data InteractionPart {participants‚Ñï} {paramtersTy} ib where
  _-_‚à∂_‚âî_ : (j : Maybe ‚Ñï) ‚Üí {_ : recMaybe  ‚ü® ‚ä§ ‚ü© ( isParticipantSymbol ib) j } ‚Üí
               (k : ‚Ñï) ‚Üí (gTy : GType) ‚Üí {_ : forceFreeSymbol ib k} ‚Üí  InteractionValue ib gTy
                 ‚Üí InteractionPart ib
  ‚ÜØ_ : InteractionEffect ib ‚Üí InteractionPart ib
  if_then_else_ : InteractionValue ib Bool·µç ‚Üí
                    InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí
                    InteractionBody {participants‚Ñï} {paramtersTy} ‚Üí InteractionPart ib
  
-- let'_‚à∂_‚â°_ : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
--                         ‚Üí {ib : InteractionBody {participants‚Ñï} {paramtersTy}} ‚Üí                
--                (k : ‚Ñï) ‚Üí (gTy : GType) ‚Üí {_ : forceFreeSymbol ib k} ‚Üí  InteractionValue ib gTy
--                  ‚Üí InteractionPart ib
-- let'_‚à∂_‚â°_ = (_let·µç_‚à∂_‚â°_) nothing

-- ‚íú_let'_‚à∂_‚â°_ : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType}
--                         ‚Üí {ib : InteractionBody {participants‚Ñï} {paramtersTy}} ‚Üí
--                (j : ‚Ñï) ‚Üí {_ : isParticipantSymbol ib j } ‚Üí
--                (k : ‚Ñï) ‚Üí (gTy : GType) ‚Üí {_ : forceFreeSymbol ib k} ‚Üí  InteractionValue ib gTy
--                  ‚Üí InteractionPart ib
-- ‚íú_let'_‚à∂_‚â°_ {participants‚Ñï} {paramtersTy} {ib} j {x} k gTy {x‚ÇÅ} x‚ÇÇ =
--   _let·µç_‚à∂_‚â°_ {participants‚Ñï} {paramtersTy} {ib} (‚Ä¢ j) {x} k gTy {x‚ÇÅ} x‚ÇÇ



record IsGlowTy {a} (A : Type a) : Type a where
  field
    glowRep : GType
    cast : A ‚Üí GTypeAgdaRep glowRep


data InteractionValue {participants‚Ñï} {paramtersTy} ib gTy where
  ùìµ_ : (k : ‚Ñï) ‚Üí {_ : isDefinedSymbolOfTy ib k gTy} ‚Üí InteractionValue ib gTy
  _‚Çó' : GTypeAgdaRep gTy ‚Üí InteractionValue ib gTy
  input : String ‚Üí InteractionValue ib gTy
  -- ùìπ : (k : ‚Ñï) ‚Üí {_ : isParticipantSymbol ib k} ‚Üí  InteractionValue ib gTy

_‚Çó : {participants‚Ñï : ‚Ñï} {paramtersTy : List GType} ‚Üí 
      {ib : InteractionBody {participants‚Ñï} {paramtersTy}} ‚Üí 
                        {A : Type‚ÇÄ} ‚Üí {{isGlowTy : IsGlowTy A}} ‚Üí
                        A ‚Üí  InteractionValue ib (IsGlowTy.glowRep isGlowTy)
_‚Çó {participants‚Ñï} {paramtersTy} {ib} {A} ‚¶É isGlowTy ‚¶Ñ x = IsGlowTy.cast isGlowTy x ‚Çó' 

instance
  Bool-IsGlowTy : IsGlowTy Bool
  Bool-IsGlowTy = record { glowRep = Bool·µç ; cast = idfun _}

instance
  ‚Ñ§-IsGlowTy : IsGlowTy ‚Ñ§
  ‚Ñ§-IsGlowTy = record { glowRep = Int·µç  ; cast = idfun _ }

instance
  ‚Ñï-IsGlowTy : IsGlowTy ‚Ñï
  ‚Ñï-IsGlowTy = record { glowRep = Nat·µç  ; cast = idfun _ }



infixl 15 _Ôºõ_
infix 17 _Ôºõ‚ÇÅ

data InteractionBody {participants‚Ñï} {paramtersTy} where
 ‚àôib : InteractionBody {participants‚Ñï} {paramtersTy}
 _Ôºõ_ : (ss : InteractionBody {participants‚Ñï} {paramtersTy})
         ‚Üí  (s : InteractionPart ss) ‚Üí InteractionBody

pattern _Ôºõ‚ÇÅ x = ‚àôib Ôºõ x  

-- data InteractionExpression {participants‚Ñï} {paramtersTy} where

getFreeSymbol {paramtersTy = l} ‚àôib = length l
getFreeSymbol (x Ôºõ (_ - x‚ÇÅ ‚à∂ _ ‚âî x‚ÇÇ)) = suc (getFreeSymbol x)
getFreeSymbol (x Ôºõ _) = getFreeSymbol x


-- testModule : Module
-- testModule =
--   interaction‚ü® 2 , Bool·µç ‚à∑ [] ‚ü©‚ÅÖ
--      ‚àôib Ôºõ
--      ‚ó¶ - 1 ‚à∂ Bool·µç ‚âî false ‚Çó Ôºõ
--      ‚ó¶ - 1 ‚à∂ Nat·µç ‚âî 3 ‚Çó Ôºõ
--      {! !} Ôºõ
--      {!!}
--   ‚ÅÜ

--     ‚à∑ []


boolGameModule : Module
boolGameModule =
  interaction‚ü® 2 , Bool·µç ‚à∑ [] ‚ü©‚ÅÖ ‚àôib Ôºõ
  
      ‚ÜØ deposit! 0 ‚ü∂ 1 ‚Çó Ôºõ
      ‚ÜØ deposit! 1 ‚ü∂ 1 ‚Çó Ôºõ

      

      ‚Ä¢ 0 - 1 ‚à∂ Bool·µç ‚âî input "Enter A's choice." Ôºõ
      ‚ÜØ publish! 0 ‚ü∂ 1 Ôºõ
      
      ‚Ä¢ 1 - 2 ‚à∂ Bool·µç ‚âî input "Enter B's choice." Ôºõ
      ‚ÜØ publish! 1 ‚ü∂ 2 Ôºõ

      ‚ó¶ - {!!} ‚à∂ {!!}  ‚âî {!!} Ôºõ
      
      if ùìµ {!!}  
        then (‚ÜØ withdraw! 0 ‚üµ 2 ‚Çó Ôºõ‚ÇÅ)
        else (‚ÜØ withdraw! 0 ‚üµ 2 ‚Çó Ôºõ‚ÇÅ)
  ‚ÅÜ

    ‚à∑ []
