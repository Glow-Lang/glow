#!/bin/sh -e
## Easy Installation script for Glow implementers. See https://glow-lang.org
## This script is for people who intend to modify the Glow language itself,
## its compiler and its runtime.

{ # Prevent execution if this script was only partially downloaded

## For most users, use the alpha branch of MuKn's fork of nixpkgs
export nixpkgs=https://github.com/muknio/nixpkgs/archive/alpha.tar.gz

## For the development branch, you could instead be using:
#export nixpkgs=https://github.com/muknio/nixpkgs/archive/devel.tar.gz


# 0. Small prelude

panic() {
    echo "$0:" "$@" >&2
    exit 1
}
umask 0022

require_util() {
    command -v "$1" > /dev/null 2>&1 ||
        panic "You do not have '$1' installed, which I need $2"
}

# 1. Make sure Nix is installed, if not installed yet.
require_util curl "to download nix-env"
if ! command -v nix-env > /dev/null 2>&1 ; then
    echo "Installing Nix..."
    nix_install="$(mktemp -t nix-install.XXXXXXXXXX.sh || \
          oops "Can't nix install script")"
    curl -L https://nixos.org/nix/install -o $nix_install
    cleanup() {
        rm -f "$nix_install"
    }
    trap cleanup EXIT INT QUIT TERM
    case "$OSTYPE" in
        darwin*)
            export NIXPKGS_ALLOW_BROKEN=1
            sh "$nix_install" ||
            sh "$nix_install" --darwin-use-unencrypted-nix-store-volume ;;
        *)
            ### For multiuser install, replace the below line with:
            # sh "$nix_install" --daemon
        ;;
    esac || panic "Failed to install Nix."
fi

# 2. Make sure we're using the binaries from Nix.
# If somehow the nix install doesn't do that for your shell,
# you may have to add lines to your shell configuration files to achieve the same effect:
conf='n () { n="$1/etc/profile.d/nix.sh" ; [ -f "$n" ] && source "$n" ; }; n $HOME/.nix-profile || n /nix/var/nix/profiles/default || n /run/current-system/sw || n ""'

if ! grep -c "/[.]nix-profile" "$HOME/.zshenv" > /dev/null 2>&1 ; then
    echo "$conf" >> "$HOME/.zshenv"
fi
if ! grep -c "/[.]nix-profile" "$HOME/.bashrc" > /dev/null 2>&1 ; then
    echo "$conf" >> "$HOME/.bashrc"
fi
eval "$conf"

# 3. Install and configure the cachix client, so you can download the Glow packages
# instead of having your computer take an hour to rebuild them.
nix-env -iA cachix -f https://cachix.org/api/v1/install
cachix use mukn

# 4. Install Glow, and matching versions of a few other things along with it,
# from the very same version of nixpkgs used by MuKn.
# This ensures that the build is deterministic:
# if it builds for us, it will build identically for you.
#
# NB: We use go-ethereum (geth) only for testing and/or otherwise running your own ethereum node.
# Racket's scribble is used by Glow implementers for our documentation only;
# it is only necessary if you are going to modify or rebuild Glow yourself;
# it shouldn't be necessary for regular users, unless you decide to use the same tool as we do.
# To compile solidity code, you might also want to install solc, but that might fail on nix on mac.
EXTRAPKGS=""
case "$OSTYPE" in
  darwin*) : ;;
  linux*) EXTRAPKGS="racket solc";;
esac
echo "Using Nix to install Glow, and with it gerbil, geth, etc."
nix-env -f $nixpkgs -iA \
        glow-lang gerbil-unstable gerbilPackages-unstable go-ethereum $EXTRAPKGS

# 5. Install nix-thunk (optional, only for developers).
# See https://github.com/obsidiansystems/nix-thunk
# NB: We use nix-thunk as implementers of Glow to manage our dependencies in a reproducible way;
# it is only necessary if you are going to modify or rebuild Glow yourself;
# it shouldn't be necessary for regular users, unless you decide to use the same tool as we do.
##echo "Using Nix to install nix-thunk"
##nix-env -f https://github.com/obsidiansystems/nix-thunk/archive/v0.3.0.0.tar.gz -iA command

# 6. (Commented out---do it yourself manually) Download source code so you can modify it.
# These commands, if uncommented, checkout the glow repository under the current directory.
# You can move it to any place you desire.
# If you need local modifications to its dependencies, use nix-thunk (above)
# to manage that deterministically. See INSTALL.md in the repository for details.
: echo "Checking out the Glow repository"
: git clone https://gitlab.com/mukn/glow.git

# Last, tell the user how to enable Nix in the current shell
echo
echo "Glow was installed through the Nix package manager."
echo "Your bash and zsh shell configurations were updated to see Nix packages,"
echo "but this only applies to new shells, in new terminal windows or tabs."
echo "To enable Nix in your current shell, run the following command:"
echo; echo "    $conf"; echo
echo "Then you will be able to run Glow with, e.g."
echo; echo '    glow help'; echo
} # End of wrapping
