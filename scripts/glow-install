#!/bin/sh -e
## Easy Installation script for Glow implementers. See https://glow-lang.org
## This script is for people who intend to modify the Glow language itself,
## its compiler and its runtime.

{ # Prevent execution if this script was only partially downloaded

## For most users, use the alpha branch of MuKn's fork of nixpkgs
export nixpkgs=https://github.com/muknio/nixpkgs/archive/alpha.tar.gz

## For the development branch, you could instead be using:
#export nixpkgs=https://github.com/muknio/nixpkgs/archive/devel.tar.gz


# 0. Small prelude

panic() {
    echo "$0:" "$@" >&2
    exit 1
}
umask 0022

require_util() {
    command -v "$1" > /dev/null 2>&1 ||
        panic "You do not have '$1' installed, which I need $2"
}

# 1. Make sure Nix is installed, if not installed yet.
require_util curl "to download nix-env"
if ! command -v nix-env > /dev/null 2>&1 ; then
    echo "Installing Nix..."
    (curl -L https://nixos.org/nix/install | sh) ||
        panic "Failed to install Nix. If on a Mac, try to install nix as follows then retry the glow installation:\n" \
              "   sh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store-volume"
    ### For multiuser install, replace the above line with:
    # curl -L https://nixos.org/nix/install > nix-install.tmp && sh nix-install.tmp --daemon && rm nix-install.tmp
fi

# 2. Make sure we're using the binaries from Nix.
# If somehow the nix install doesn't do that for your shell,
# you may have to add lines to your shell configuration files to achieve the same effect:
PATH="$HOME/.nix-profile/bin:$PATH"

# 3. Install and configure the cachix client, so you can download the Glow packages
# instead of having your computer take an hour to rebuild them.
nix-env -iA cachix -f https://cachix.org/api/v1/install
cachix use mukn

# 4. Install Glow, and matching versions of a few other things along with it,
# from the very same version of nixpkgs used by MuKn.
# This ensures that the build is deterministic:
# if it builds for us, it will build identically for you.
#
# NB: We use go-ethereum (geth) only for testing and/or otherwise running your own ethereum node.
# Racket's scribble is used by Glow implementers for our documentation only;
# it is only necessary if you are going to modify or rebuild Glow yourself;
# it shouldn't be necessary for regular users, unless you decide to use the same tool as we do.
# To compile solidity code, you might also want to install solc, but that won't work on a mac.
echo "Using Nix to install Glow, and with it gerbil, geth, racket..."
nix-env -f $nixpkgs -iA \
        glow-lang gerbil-unstable gerbilPackages-unstable go-ethereum racket

# 5. Install nix-thunk (optional, only for developers).
# See https://github.com/obsidiansystems/nix-thunk
# NB: We use nix-thunk as implementers of Glow to manage our dependencies in a reproducible way;
# it is only necessary if you are going to modify or rebuild Glow yourself;
# it shouldn't be necessary for regular users, unless you decide to use the same tool as we do.
##echo "Using Nix to install nix-thunk"
##nix-env -f https://github.com/obsidiansystems/nix-thunk/archive/v0.3.0.0.tar.gz -iA command

# 6. (Commented out---do it yourself manually) Download source code so you can modify it.
# These commands, if uncommented, checkout the glow repository under the current directory.
# You can move it to any place you desire.
# If you need local modifications to its dependencies, use nix-thunk (above)
# to manage that deterministically. See INSTALL.md in the repository for details.
: echo "Checking out the Glow repository"
: git clone https://gitlab.com/mukn/glow.git

} # End of wrapping
